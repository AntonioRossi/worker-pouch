(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
'use strict';

module.exports = _dereq_('../lib/client');
},{"../lib/client":3}],2:[function(_dereq_,module,exports){
'use strict';
/* jshint ignore: start */
// yes this is really how this works
module.exports = new Worker(window.URL.createObjectURL(new Blob(['(function e(tnr){function s(ou){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o!0);if(i)return i(o!0);throw new Error("Cannot find module \'"+o+"\'")}var f=n[o]={exports:{}};t[o][0].call(f.exportsfunction(e){var n=t[o][1][e];return s(n?n:e)}ff.exportsetnr)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(requiremoduleexports){\n"use strict";\n\nvar inherits = require(\'inherits\');\ninherits(PouchError Error);\n\nfunction PouchError(opts) {\n  Error.call(opts.reason);\n  this.status = opts.status;\n  this.name = opts.error;\n  this.message = opts.reason;\n  this.error = true;\n}\n\nPouchError.prototype.toString = function () {\n  return JSON.stringify({\n    status: this.status\n    name: this.name\n    message: this.message\n  });\n};\n\nexports.UNAUTHORIZED = new PouchError({\n  status: 401\n  error: \'unauthorized\'\n  reason: "Name or password is incorrect."\n});\n\nexports.MISSING_BULK_DOCS = new PouchError({\n  status: 400\n  error: \'bad_request\'\n  reason: "Missing JSON list of \'docs\'"\n});\n\nexports.MISSING_DOC = new PouchError({\n  status: 404\n  error: \'not_found\'\n  reason: \'missing\'\n});\n\nexports.REV_CONFLICT = new PouchError({\n  status: 409\n  error: \'conflict\'\n  reason: \'Document update conflict\'\n});\n\nexports.INVALID_ID = new PouchError({\n  status: 400\n  error: \'invalid_id\'\n  reason: \'_id field must contain a string\'\n});\n\nexports.MISSING_ID = new PouchError({\n  status: 412\n  error: \'missing_id\'\n  reason: \'_id is required for puts\'\n});\n\nexports.RESERVED_ID = new PouchError({\n  status: 400\n  error: \'bad_request\'\n  reason: \'Only reserved document ids may start with underscore.\'\n});\n\nexports.NOT_OPEN = new PouchError({\n  status: 412\n  error: \'precondition_failed\'\n  reason: \'Database not open\'\n});\n\nexports.UNKNOWN_ERROR = new PouchError({\n  status: 500\n  error: \'unknown_error\'\n  reason: \'Database encountered an unknown error\'\n});\n\nexports.BAD_ARG = new PouchError({\n  status: 500\n  error: \'badarg\'\n  reason: \'Some query argument is invalid\'\n});\n\nexports.INVALID_REQUEST = new PouchError({\n  status: 400\n  error: \'invalid_request\'\n  reason: \'Request was invalid\'\n});\n\nexports.QUERY_PARSE_ERROR = new PouchError({\n  status: 400\n  error: \'query_parse_error\'\n  reason: \'Some query parameter is invalid\'\n});\n\nexports.DOC_VALIDATION = new PouchError({\n  status: 500\n  error: \'doc_validation\'\n  reason: \'Bad special document member\'\n});\n\nexports.BAD_REQUEST = new PouchError({\n  status: 400\n  error: \'bad_request\'\n  reason: \'Something wrong with the request\'\n});\n\nexports.NOT_AN_OBJECT = new PouchError({\n  status: 400\n  error: \'bad_request\'\n  reason: \'Document must be a JSON object\'\n});\n\nexports.DB_MISSING = new PouchError({\n  status: 404\n  error: \'not_found\'\n  reason: \'Database not found\'\n});\n\nexports.IDB_ERROR = new PouchError({\n  status: 500\n  error: \'indexed_db_went_bad\'\n  reason: \'unknown\'\n});\n\nexports.WSQ_ERROR = new PouchError({\n  status: 500\n  error: \'web_sql_went_bad\'\n  reason: \'unknown\'\n});\n\nexports.LDB_ERROR = new PouchError({\n  status: 500\n  error: \'levelDB_went_went_bad\'\n  reason: \'unknown\'\n});\n\nexports.FORBIDDEN = new PouchError({\n  status: 403\n  error: \'forbidden\'\n  reason: \'Forbidden by design doc validate_doc_update function\'\n});\n\nexports.INVALID_REV = new PouchError({\n  status: 400\n  error: \'bad_request\'\n  reason: \'Invalid rev format\'\n});\n\nexports.FILE_EXISTS = new PouchError({\n  status: 412\n  error: \'file_exists\'\n  reason: \'The database could not be created the file already exists.\'\n});\n\nexports.MISSING_STUB = new PouchError({\n  status: 412\n  error: \'missing_stub\'\n});\n\nexports.error = function (error reason name) {\n  function CustomPouchError(reason) {\n    // inherit error properties from our parent error manually\n    // so as to allow proper JSON parsing.\n    /* jshint ignore:start */\n    for (var p in error) {\n      if (typeof error[p] !== \'function\') {\n        this[p] = error[p];\n      }\n    }\n    /* jshint ignore:end */\n    if (name !== undefined) {\n      this.name = name;\n    }\n    if (reason !== undefined) {\n      this.reason = reason;\n    }\n  }\n  CustomPouchError.prototype = PouchError.prototype;\n  return new CustomPouchError(reason);\n};\n\n// Find one of the errors defined above based on the value\n// of the specified property.\n// If reason is provided prefer the error matching that reason.\n// This is for differentiating between errors with the same name and status,\n// eg, bad_request.\nexports.getErrorTypeByProp = function (prop, value, reason) {\n  var errors = exports;\n  var keys = Object.keys(errors).filter(function (key) {\n    var error = errors[key];\n    return typeof error !== \'function\' && error[prop] === value;\n  });\n  var key = reason && keys.filter(function (key) {\n      var error = errors[key];\n      return error.message === reason;\n    })[0] || keys[0];\n  return (key) ? errors[key] : null;\n};\n\nexports.generateErrorFromResponse = function (res) {\n  var error, errName, errType, errMsg, errReason;\n  var errors = exports;\n\n  errName = (res.error === true && typeof res.name === \'string\') ?\n    res.name :\n    res.error;\n  errReason = res.reason;\n  errType = errors.getErrorTypeByProp(\'name\', errName, errReason);\n\n  if (res.missing ||\n    errReason === \'missing\' ||\n    errReason === \'deleted\' ||\n    errName === \'not_found\') {\n    errType = errors.MISSING_DOC;\n  } else if (errName === \'doc_validation\') {\n    // doc validation needs special treatment since\n    // res.reason depends on the validation error.\n    // see utils.js\n    errType = errors.DOC_VALIDATION;\n    errMsg = errReason;\n  } else if (errName === \'bad_request\' && errType.message !== errReason) {\n    // if bad_request error already found based on reason don\'t override.\n\n    // attachment errors.\n    if (errReason.indexOf(\'unknown stub attachment\') === 0) {\n      errType = errors.MISSING_STUB;\n      errMsg = errReason;\n    } else {\n      errType = errors.BAD_REQUEST;\n    }\n  }\n\n  // fallback to error by statys or unknown error.\n  if (!errType) {\n    errType = errors.getErrorTypeByProp(\'status\', res.status, errReason) ||\n    errors.UNKNOWN_ERROR;\n  }\n\n  error = errors.error(errType, errReason, errName);\n\n  // Keep custom message.\n  if (errMsg) {\n    error.message = errMsg;\n  }\n\n  // Keep helpful response data in our error messages.\n  if (res.id) {\n    error.id = res.id;\n  }\n  if (res.status) {\n    error.status = res.status;\n  }\n  if (res.statusText) {\n    error.name = res.statusText;\n  }\n  if (res.missing) {\n    error.missing = res.missing;\n  }\n\n  return error;\n};\n\n},{"inherits":10}],2:[function(require,module,exports){\n\'use strict\';\n\n/* jshint worker:true */\n\nvar Promise = require(\'pouchdb/extras/promise\');\nvar errors = require(\'../shared/errors\');\nvar workerUtils = require(\'./utils\');\nvar makePouchCreator = require(\'./make-pouch-creator\');\nvar destringifyArgs = workerUtils.destringifyArgs;\nvar dbs = {};\nvar allChanges = {};\n\nvar log = require(\'debug\')(\'pouchdb:worker\');\n\nfunction sendError(socketId, messageId, data) {\n  log(\' -> sendError\', socketId, messageId, data);\n  self.postMessage({\n    type: \'error\',\n    id: socketId,\n    messageId: messageId,\n    content: workerUtils.createError(data)\n  });\n}\n\nfunction sendSuccess(socketId, messageId, data) {\n  log(\' -> sendSuccess\', socketId, messageId);\n  self.postMessage({\n    type: \'success\',\n    id: socketId,\n    messageId: messageId,\n    content: data\n  });\n}\n\nfunction sendBinarySuccess(socketId, messageId, type, blob) {\n  log(\' -> sendBinarySuccess\', socketId, messageId);\n  self.postMessage({\n    type: \'success\',\n    id: socketId,\n    messageId: messageId,\n    content: blob\n  });\n}\n\nfunction sendUpdate(socketId, messageId, data) {\n  log(\' -> sendUpdate\', socketId, messageId);\n  self.postMessage({\n    type: \'update\',\n    id: socketId,\n    messageId: messageId,\n    content: data\n  });\n}\n\nfunction dbMethod(socketId, methodName, messageId, args) {\n  var db = dbs[\'$\' + socketId];\n  if (!db) {\n    return sendError(socketId, messageId, {error: \'db not found\'});\n  }\n  Promise.resolve().then(function () {\n    return db;\n  }).then(function (res) {\n    var db = res.pouch;\n    return db[methodName].apply(db, args);\n  }).then(function (res) {\n    sendSuccess(socketId, messageId, res);\n  }).catch(function (err) {\n    sendError(socketId, messageId, err);\n  });\n}\n\nfunction getAttachment(socketId, messageId, args) {\n  var db = dbs[\'$\' + socketId];\n  if (!db) {\n    return sendError(socketId, messageId, {error: \'db not found\'});\n  }\n\n  Promise.resolve().then(function () {\n    return db;\n  }).then(function (res) {\n    var db = res.pouch;\n    var docId = args[0];\n    var attId = args[1];\n    var opts = args[2];\n    if (typeof opts !== \'object\') {\n      opts = {};\n    }\n    return db.get(docId, opts).then(function (doc) {\n      if (!doc._attachments || !doc._attachments[attId]) {\n        throw errors.MISSING_DOC;\n      }\n      var type = doc._attachments[attId].content_type;\n      return db.getAttachment.apply(db, args).then(function (buff) {\n        sendBinarySuccess(socketId, messageId, type, buff);\n      });\n    });\n  }).catch(function (err) {\n    sendError(socketId, messageId, err);\n  });\n}\n\nfunction destroy(socketId, messageId, args) {\n  var key = \'$\' + socketId;\n  var db = dbs[key];\n  if (!db) {\n    return sendError(socketId, messageId, {error: \'db not found\'});\n  }\n  delete dbs[key];\n\n  Promise.resolve().then(function () {\n    return db;\n  }).then(function (res) {\n    var db = res.pouch;\n    return db.destroy.apply(db, args);\n  }).then(function (res) {\n    sendSuccess(socketId, messageId, res);\n  }).catch(function (err) {\n    sendError(socketId, messageId, err);\n  });\n}\n\nfunction liveChanges(socketId, messageId, args) {\n  var db = dbs[\'$\' + socketId];\n  if (!db) {\n    return sendError(socketId, messageId, {error: \'db not found\'});\n  }\n  Promise.resolve().then(function () {\n    return db;\n  }).then(function (res) {\n    var db = res.pouch;\n    var changes = db.changes(args[0]);\n    allChanges[messageId] = changes;\n    changes.on(\'change\', function (change) {\n      sendUpdate(socketId, messageId, change);\n    }).on(\'complete\', function (change) {\n      changes.removeAllListeners();\n      delete allChanges[messageId];\n      sendSuccess(socketId, messageId, change);\n    }).on(\'error\', function (change) {\n      changes.removeAllListeners();\n      delete allChanges[messageId];\n      sendError(socketId, messageId, change);\n    });\n  });\n}\n\nfunction cancelChanges(messageId) {\n  var changes = allChanges[messageId];\n  if (changes) {\n    changes.cancel();\n  }\n}\n\nfunction createDatabase(socketId, messageId, args, pouchCreator) {\n  var key = \'$\' + socketId;\n  var db = dbs[key];\n  if (db) {\n    return sendSuccess(socketId, messageId, {ok: true, exists: true});\n  }\n\n  var name = typeof args[0] === \'string\' ? args[0] : args[0].name;\n\n  if (!name) {\n    return sendError(socketId, messageId, {\n      error: \'you must provide a database name\'\n    });\n  }\n\n  dbs[key] = pouchCreator(args);\n  pouchCreator(args).then(function () {\n    sendSuccess(socketId, messageId, {ok: true});\n  }).catch(function (err) {\n    sendError(socketId, messageId, err);\n  });\n}\n\nfunction onReceiveMessage(socketId, type, messageId, args, pouchCreator) {\n  log(\'onReceiveMessage\', type, socketId, messageId, args);\n  switch (type) {\n    case \'createDatabase\':\n      return createDatabase(socketId, messageId, args, pouchCreator);\n    case \'id\':\n      sendSuccess(socketId, messageId, socketId);\n      return;\n    case \'info\':\n    case \'put\':\n    case \'allDocs\':\n    case \'bulkDocs\':\n    case \'post\':\n    case \'get\':\n    case \'remove\':\n    case \'revsDiff\':\n    case \'compact\':\n    case \'viewCleanup\':\n    case \'removeAttachment\':\n    case \'putAttachment\':\n    case \'query\':\n    case \'changes\':\n      return dbMethod(socketId, type, messageId, args);\n    case \'getAttachment\':\n      return getAttachment(socketId, messageId, args);\n    case \'liveChanges\':\n      return liveChanges(socketId, messageId, args);\n    case \'cancelChanges\':\n      return cancelChanges(messageId);\n    case \'destroy\':\n      return destroy(socketId, messageId, args);\n    default:\n      return sendError(socketId, messageId, {error: \'unknown API method: \' + type});\n  }\n}\n\nfunction parseMessage(message, socketId, pouchCreator) {\n  try {\n    var type = message.type;\n    var messageId = message.messageId;\n    var args = destringifyArgs(message.args);\n    onReceiveMessage(socketId, type, messageId, args, pouchCreator);\n  } catch (err) {\n    log(\'invalid message, ignoring\', err);\n  }\n}\n\nvar options = {};\nvar pouchCreator = makePouchCreator(options);\n\nself.onmessage = function (event) {\n  var socketId = event.data.id;\n  if (event.data.type === \'close\') {\n    log(\'closing socket\', socketId);\n    delete dbs[\'$\' + socketId];\n  } else {\n    parseMessage(event.data, socketId, pouchCreator);\n  }\n};\n},{"../shared/errors":1,"./make-pouch-creator":3,"./utils":5,"debug":7,"pouchdb/extras/promise":11}],3:[function(require,module,exports){\n\'use strict\';\n\nvar PouchDB = require(\'pouchdb\');\nvar Promise = require(\'pouchdb/extras/promise\');\n\nfunction createLocalPouch(args) {\n\n  if (typeof args[0] === \'string\') {\n    args = [{name: args[0]}];\n  }\n\n  // TODO: there is probably a smarter way to be safe about filepaths\n  args[0].name = args[0].name.replace(\'.\', \'\').replace(\'/\', \'\');\n  return Promise.resolve({\n    pouch: new PouchDB(args[0])\n  });\n}\n\nfunction createHttpPouch(options) {\n  var remoteUrl = options.remoteUrl;\n  // chop off last \'/\'\n  if (remoteUrl[remoteUrl.length - 1] === \'/\') {\n    remoteUrl = remoteUrl.substring(0, remoteUrl.length -1);\n  }\n  return function (args) {\n    if (typeof args[0] === \'string\') {\n      args = [{name: args[0]}];\n    }\n    return Promise.resolve({\n      pouch: new PouchDB(remoteUrl + \'/\' + args[0].name)\n    });\n  };\n}\n\nfunction makePouchCreator(options) {\n  if (options.remoteUrl) {\n    return createHttpPouch(options);\n  }\n  if (!options.pouchCreator) {\n    return createLocalPouch;\n  }\n  return function (args) {\n    var name = typeof args[0] === \'string\' ? args[0] : args[0].name;\n    var res = options.pouchCreator(name);\n    if (res instanceof PouchDB) {\n      return {pouch: res};\n    } else {\n      return res;\n    }\n  };\n}\n\nmodule.exports = makePouchCreator;\n},{"pouchdb":83,"pouchdb/extras/promise":11}],4:[function(require,module,exports){\n\'use strict\';\n\nvar log = require(\'debug\')(\'pouchdb:worker\');\n\nmodule.exports = function safeEval(str) {\n  log(\'safeEvaling\', str);\n  var target = {};\n  /* jshint evil: true */\n  eval(\'target.target = (\' + str + \');\');\n  log(\'returning\', target.target);\n  return target.target;\n};\n},{"debug":7}],5:[function(require,module,exports){\n\'use strict\';\n\nvar safeEval = require(\'./safe-eval\');\n\n// mostly borrowed from express-pouchb\'s utils.sendError()\nexports.createError = function (err) {\n  var status = err.status || 500;\n\n  // last argument is optional\n  if (err.name && err.message) {\n    if (err.name === \'Error\' || err.name === \'TypeError\') {\n      if (err.message.indexOf("Bad special document member") !== -1) {\n        err.name = \'doc_validation\';\n        // add more clauses here if the error name is too general\n      } else {\n        err.name = \'bad_request\';\n      }\n    }\n    err = {\n      error: err.name,\n      name: err.name,\n      reason: err.message,\n      message: err.message,\n      status: status\n    };\n  }\n  return err;\n};\n\nexports.destringifyArgs = function destringifyArgs(args) {\n  var funcArgs = [\'filter\', \'map\', \'reduce\'];\n  args.forEach(function (arg) {\n    if (typeof arg === \'object\' && arg !== null && !Array.isArray(arg)) {\n      funcArgs.forEach(function (funcArg) {\n        if (funcArg in arg && arg[funcArg].type === \'func\' && arg[funcArg].func) {\n          arg[funcArg] = safeEval(arg[funcArg].func);\n        }\n      });\n    }\n  });\n  return args;\n};\n},{"./safe-eval":4}],6:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = argsArray;\n\nfunction argsArray(fun) {\n  return function () {\n    var len = arguments.length;\n    if (len) {\n      var args = [];\n      var i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n}\n},{}],7:[function(require,module,exports){\n\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require(\'./debug\');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = \'undefined\' != typeof chrome\n               && \'undefined\' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  \'lightseagreen\',\n  \'forestgreen\',\n  \'goldenrod\',\n  \'dodgerblue\',\n  \'darkorchid\',\n  \'crimson\'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support "%c" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return (\'WebkitAppearance\' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? \'%c\' : \'\')\n    + this.namespace\n    + (useColors ? \' %c\' : \' \')\n    + args[0]\n    + (useColors ? \'%c \' : \' \')\n    + \'+\' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = \'color: \' + this.color;\n  args = [args[0], c, \'color: inherit\'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final "%c" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if (\'%%\' === match) return;\n    index++;\n    if (\'%c\' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a "function".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn\'t have \'apply\'\n  return \'object\' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem(\'debug\');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n},{"./debug":8}],8:[function(require,module,exports){\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require(\'ms\');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special "%n" handling functions, for the debug "format" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. "n".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if (\'string\' !== typeof args[0]) {\n      // anything else let\'s inspect with %o\n      args = [\'%o\'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don\'t increase the array index\n      if (match === \'%%\') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if (\'function\' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it\'s inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if (\'function\' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || \'\').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, \'.*?\');\n    if (namespaces[0] === \'-\') {\n      exports.skips.push(new RegExp(\'^\' + namespaces.substr(1) + \'$\'));\n    } else {\n      exports.names.push(new RegExp(\'^\' + namespaces + \'$\'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable(\'\');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n},{"ms":9}],9:[function(require,module,exports){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if (\'string\' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = \'\' + str;\n  if (str.length > 10000) return;\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || \'ms\').toLowerCase();\n  switch (type) {\n    case \'years\':\n    case \'year\':\n    case \'yrs\':\n    case \'yr\':\n    case \'y\':\n      return n * y;\n    case \'days\':\n    case \'day\':\n    case \'d\':\n      return n * d;\n    case \'hours\':\n    case \'hour\':\n    case \'hrs\':\n    case \'hr\':\n    case \'h\':\n      return n * h;\n    case \'minutes\':\n    case \'minute\':\n    case \'mins\':\n    case \'min\':\n    case \'m\':\n      return n * m;\n    case \'seconds\':\n    case \'second\':\n    case \'secs\':\n    case \'sec\':\n    case \'s\':\n      return n * s;\n    case \'milliseconds\':\n    case \'millisecond\':\n    case \'msecs\':\n    case \'msec\':\n    case \'ms\':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + \'d\';\n  if (ms >= h) return Math.round(ms / h) + \'h\';\n  if (ms >= m) return Math.round(ms / m) + \'m\';\n  if (ms >= s) return Math.round(ms / s) + \'s\';\n  return ms + \'ms\';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, \'day\')\n    || plural(ms, h, \'hour\')\n    || plural(ms, m, \'minute\')\n    || plural(ms, s, \'second\')\n    || ms + \' ms\';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + \' \' + name;\n  return Math.ceil(ms / n) + \' \' + name + \'s\';\n}\n\n},{}],10:[function(require,module,exports){\nif (typeof Object.create === \'function\') {\n  // implementation from standard node.js \'util\' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],11:[function(require,module,exports){\n\'use strict\';\n\n// allow external plugins to require(\'pouchdb/extras/promise\')\nmodule.exports = require(\'../lib/deps/promise\');\n},{"../lib/deps/promise":77}],12:[function(require,module,exports){\n(function (process){\n"use strict";\n\nvar utils = require(\'./utils\');\nvar errors = require(\'./deps/errors\');\nvar EventEmitter = require(\'events\').EventEmitter;\nvar upsert = require(\'./deps/upsert\');\nvar Changes = require(\'./changes\');\nvar bulkGetShim = require(\'./deps/bulkGetShim\');\nvar Promise = utils.Promise;\nvar isDeleted = require(\'./deps/docs/isDeleted\');\nvar isLocalId = require(\'./deps/docs/isLocalId\');\nvar traverseRevTree = require(\'./deps/merge/traverseRevTree\');\nvar collectLeaves = require(\'./deps/merge/collectLeaves\');\nvar rootToLeaf = require(\'./deps/merge/rootToLeaf\');\nvar collectConflicts = require(\'./deps/merge/collectConflicts\');\n\n/*\n * A generic pouch adapter\n */\n\n// returns first element of arr satisfying callback predicate\nfunction arrayFirst(arr, callback) {\n  for (var i = 0; i < arr.length; i++) {\n    if (callback(arr[i], i) === true) {\n      return arr[i];\n    }\n  }\n  return false;\n}\n\n// Wrapper for functions that call the bulkdocs api with a single doc,\n// if the first result is an error, return an error\nfunction yankError(callback) {\n  return function (err, results) {\n    if (err || (results[0] && results[0].error)) {\n      callback(err || results[0]);\n    } else {\n      callback(null, results.length ? results[0]  : results);\n    }\n  };\n}\n\n// clean docs given to us by the user\nfunction cleanDocs(docs) {\n  for (var i = 0; i < docs.length; i++) {\n    var doc = docs[i];\n    if (doc._deleted) {\n      delete doc._attachments; // ignore atts for deleted docs\n    } else if (doc._attachments) {\n      // filter out extraneous keys from _attachments\n      var atts = Object.keys(doc._attachments);\n      for (var j = 0; j < atts.length; j++) {\n        var att = atts[j];\n        doc._attachments[att] = utils.pick(doc._attachments[att],\n          [\'data\', \'digest\', \'content_type\', \'length\', \'revpos\', \'stub\']);\n      }\n    }\n  }\n}\n\n// compare two docs, first by _id then by _rev\nfunction compareByIdThenRev(a, b) {\n  var idCompare = utils.compare(a._id, b._id);\n  if (idCompare !== 0) {\n    return idCompare;\n  }\n  var aStart = a._revisions ? a._revisions.start : 0;\n  var bStart = b._revisions ? b._revisions.start : 0;\n  return utils.compare(aStart, bStart);\n}\n\n// for every node in a revision tree computes its distance from the closest\n// leaf\nfunction computeHeight(revs) {\n  var height = {};\n  var edges = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {\n    var rev = pos + "-" + id;\n    if (isLeaf) {\n      height[rev] = 0;\n    }\n    if (prnt !== undefined) {\n      edges.push({from: prnt, to: rev});\n    }\n    return rev;\n  });\n\n  edges.reverse();\n  edges.forEach(function (edge) {\n    if (height[edge.from] === undefined) {\n      height[edge.from] = 1 + height[edge.to];\n    } else {\n      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);\n    }\n  });\n  return height;\n}\n\nfunction allDocsKeysQuery(api, opts, callback) {\n  var keys =  (\'limit\' in opts) ?\n      opts.keys.slice(opts.skip, opts.limit + opts.skip) :\n      (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\n  if (opts.descending) {\n    keys.reverse();\n  }\n  if (!keys.length) {\n    return api._allDocs({limit: 0}, callback);\n  }\n  var finalResults = {\n    offset: opts.skip\n  };\n  return Promise.all(keys.map(function (key) {\n    var subOpts = utils.extend({key: key, deleted: \'ok\'}, opts);\n    [\'limit\', \'skip\', \'keys\'].forEach(function (optKey) {\n      delete subOpts[optKey];\n    });\n    return new Promise(function (resolve, reject) {\n      api._allDocs(subOpts, function (err, res) {\n        if (err) {\n          return reject(err);\n        }\n        finalResults.total_rows = res.total_rows;\n        resolve(res.rows[0] || {key: key, error: \'not_found\'});\n      });\n    });\n  })).then(function (results) {\n    finalResults.rows = results;\n    return finalResults;\n  });\n}\n\n// all compaction is done in a queue, to avoid attaching\n// too many listeners at once\nfunction doNextCompaction(self) {\n  var task = self._compactionQueue[0];\n  var opts = task.opts;\n  var callback = task.callback;\n  self.get(\'_local/compaction\').catch(function () {\n    return false;\n  }).then(function (doc) {\n    if (doc && doc.last_seq) {\n      opts.last_seq = doc.last_seq;\n    }\n    self._compact(opts, function (err, res) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, res);\n      }\n      process.nextTick(function () {\n        self._compactionQueue.shift();\n        if (self._compactionQueue.length) {\n          doNextCompaction(self);\n        }\n      });\n    });\n  });\n}\n\nfunction attachmentNameError(name) {\n  if (name.charAt(0) === \'_\') {\n    return name + \'is not a valid attachment name, attachment \' +\n      \'names cannot start with \\\'_\\\'\';\n  }\n  return false;\n}\n\nutils.inherits(AbstractPouchDB, EventEmitter);\nmodule.exports = AbstractPouchDB;\n\nfunction AbstractPouchDB() {\n  EventEmitter.call(this);\n}\n\nAbstractPouchDB.prototype.post =\n  utils.adapterFun(\'post\', function (doc, opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof doc !== \'object\' || Array.isArray(doc)) {\n    return callback(errors.error(errors.NOT_AN_OBJECT));\n  }\n  this.bulkDocs({docs: [doc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.put =\n  utils.adapterFun(\'put\', utils.getArguments(function (args) {\n  var temp, temptype, opts, callback;\n  var doc = args.shift();\n  var id = \'_id\' in doc;\n  if (typeof doc !== \'object\' || Array.isArray(doc)) {\n    callback = args.pop();\n    return callback(errors.error(errors.NOT_AN_OBJECT));\n  }\n  while (true) {\n    temp = args.shift();\n    temptype = typeof temp;\n    if (temptype === "string" && !id) {\n      doc._id = temp;\n      id = true;\n    } else if (temptype === "string" && id && !(\'_rev\' in doc)) {\n      doc._rev = temp;\n    } else if (temptype === "object") {\n      opts = temp;\n    } else if (temptype === "function") {\n      callback = temp;\n    }\n    if (!args.length) {\n      break;\n    }\n  }\n  opts = opts || {};\n  var error = utils.invalidIdError(doc._id);\n  if (error) {\n    return callback(error);\n  }\n  if (isLocalId(doc._id) && typeof this._putLocal === \'function\') {\n    if (doc._deleted) {\n      return this._removeLocal(doc, callback);\n    } else {\n      return this._putLocal(doc, callback);\n    }\n  }\n  this.bulkDocs({docs: [doc]}, opts, yankError(callback));\n}));\n\nAbstractPouchDB.prototype.putAttachment =\n  utils.adapterFun(\'putAttachment\', function (docId, attachmentId, rev,\n                                              blob, type, callback) {\n  var api = this;\n  if (typeof type === \'function\') {\n    callback = type;\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n  if (typeof type === \'undefined\') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n\n  function createAttachment(doc) {\n    doc._attachments = doc._attachments || {};\n    doc._attachments[attachmentId] = {\n      content_type: type,\n      data: blob\n    };\n    return api.put(doc);\n  }\n\n  return api.get(docId).then(function (doc) {\n    if (doc._rev !== rev) {\n      throw errors.error(errors.REV_CONFLICT);\n    }\n\n    return createAttachment(doc);\n  }, function (err) {\n     // create new doc\n    if (err.reason === errors.MISSING_DOC.message) {\n      return createAttachment({_id: docId});\n    } else {\n      throw err;\n    }\n  });\n});\n\nAbstractPouchDB.prototype.removeAttachment =\n  utils.adapterFun(\'removeAttachment\', function (docId, attachmentId, rev,\n                                                 callback) {\n  var self = this;\n  self.get(docId, function (err, obj) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (obj._rev !== rev) {\n      callback(errors.error(errors.REV_CONFLICT));\n      return;\n    }\n    if (!obj._attachments) {\n      return callback();\n    }\n    delete obj._attachments[attachmentId];\n    if (Object.keys(obj._attachments).length === 0) {\n      delete obj._attachments;\n    }\n    self.put(obj, callback);\n  });\n});\n\nAbstractPouchDB.prototype.remove =\n  utils.adapterFun(\'remove\', function (docOrId, optsOrRev, opts, callback) {\n  var doc;\n  if (typeof optsOrRev === \'string\') {\n    // id, rev, opts, callback style\n    doc = {\n      _id: docOrId,\n      _rev: optsOrRev\n    };\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n  } else {\n    // doc, opts, callback style\n    doc = docOrId;\n    if (typeof optsOrRev === \'function\') {\n      callback = optsOrRev;\n      opts = {};\n    } else {\n      callback = opts;\n      opts = optsOrRev;\n    }\n  }\n  opts = opts || {};\n  opts.was_delete = true;\n  var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};\n  newDoc._deleted = true;\n  if (isLocalId(newDoc._id) && typeof this._removeLocal === \'function\') {\n    return this._removeLocal(doc, callback);\n  }\n  this.bulkDocs({docs: [newDoc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.revsDiff =\n  utils.adapterFun(\'revsDiff\', function (req, opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  var ids = Object.keys(req);\n\n  if (!ids.length) {\n    return callback(null, {});\n  }\n\n  var count = 0;\n  var missing = new utils.Map();\n\n  function addToMissing(id, revId) {\n    if (!missing.has(id)) {\n      missing.set(id, {missing: []});\n    }\n    missing.get(id).missing.push(revId);\n  }\n\n  function processDoc(id, rev_tree) {\n    // Is this fast enough? Maybe we should switch to a set simulated by a map\n    var missingForId = req[id].slice(0);\n    traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,\n      opts) {\n        var rev = pos + \'-\' + revHash;\n        var idx = missingForId.indexOf(rev);\n        if (idx === -1) {\n          return;\n        }\n\n        missingForId.splice(idx, 1);\n        if (opts.status !== \'available\') {\n          addToMissing(id, rev);\n        }\n      });\n\n    // Traversing the tree is synchronous, so now `missingForId` contains\n    // revisions that were not found in the tree\n    missingForId.forEach(function (rev) {\n      addToMissing(id, rev);\n    });\n  }\n\n  ids.map(function (id) {\n    this._getRevisionTree(id, function (err, rev_tree) {\n      if (err && err.status === 404 && err.message === \'missing\') {\n        missing.set(id, {missing: req[id]});\n      } else if (err) {\n        return callback(err);\n      } else {\n        processDoc(id, rev_tree);\n      }\n\n      if (++count === ids.length) {\n        // convert LazyMap to object\n        var missingObj = {};\n        missing.forEach(function (value, key) {\n          missingObj[key] = value;\n        });\n        return callback(null, missingObj);\n      }\n    });\n  }, this);\n});\n\n// _bulk_get API for faster replication, as described in\n// https://github.com/apache/couchdb-chttpd/pull/33\n// At the "abstract" level, it will just run multiple get()s in\n// parallel, because this isn\'t much of a performance cost\n// for local databases (except the cost of multiple transactions, which is\n// small). The http adapter overrides this in order\n// to do a more efficient single HTTP request.\nAbstractPouchDB.prototype.bulkGet =\n  utils.adapterFun(\'bulkGet\', function (opts, callback) {\n  bulkGetShim(this, opts, callback);\n});\n\n// compact one document and fire callback\n// by compacting we mean removing all revisions which\n// are further from the leaf in revision tree than max_height\nAbstractPouchDB.prototype.compactDocument =\n  utils.adapterFun(\'compactDocument\', function (docId, maxHeight, callback) {\n  var self = this;\n  this._getRevisionTree(docId, function (err, revTree) {\n    if (err) {\n      return callback(err);\n    }\n    var height = computeHeight(revTree);\n    var candidates = [];\n    var revs = [];\n    Object.keys(height).forEach(function (rev) {\n      if (height[rev] > maxHeight) {\n        candidates.push(rev);\n      }\n    });\n\n    traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {\n      var rev = pos + \'-\' + revHash;\n      if (opts.status === \'available\' && candidates.indexOf(rev) !== -1) {\n        revs.push(rev);\n      }\n    });\n    self._doCompaction(docId, revs, callback);\n  });\n});\n\n// compact the whole database using single document\n// compaction\nAbstractPouchDB.prototype.compact =\n  utils.adapterFun(\'compact\', function (opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  self._compactionQueue = self._compactionQueue || [];\n  self._compactionQueue.push({opts: opts, callback: callback});\n  if (self._compactionQueue.length === 1) {\n    doNextCompaction(self);\n  }\n});\nAbstractPouchDB.prototype._compact = function (opts, callback) {\n  var self = this;\n  var changesOpts = {\n    returnDocs: false,\n    last_seq: opts.last_seq || 0\n  };\n  var promises = [];\n\n  function onChange(row) {\n    promises.push(self.compactDocument(row.id, 0));\n  }\n  function onComplete(resp) {\n    var lastSeq = resp.last_seq;\n    Promise.all(promises).then(function () {\n      return upsert(self, \'_local/compaction\', function deltaFunc(doc) {\n        if (!doc.last_seq || doc.last_seq < lastSeq) {\n          doc.last_seq = lastSeq;\n          return doc;\n        }\n        return false; // somebody else got here first, don\'t update\n      });\n    }).then(function () {\n      callback(null, {ok: true});\n    }).catch(callback);\n  }\n  self.changes(changesOpts)\n    .on(\'change\', onChange)\n    .on(\'complete\', onComplete)\n    .on(\'error\', callback);\n};\n/* Begin api wrappers. Specific functionality to storage belongs in the\n   _[method] */\nAbstractPouchDB.prototype.get =\n  utils.adapterFun(\'get\', function (id, opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof id !== \'string\') {\n    return callback(errors.error(errors.INVALID_ID));\n  }\n  if (isLocalId(id) && typeof this._getLocal === \'function\') {\n    return this._getLocal(id, callback);\n  }\n  var leaves = [], self = this;\n\n  function finishOpenRevs() {\n    var result = [];\n    var count = leaves.length;\n    if (!count) {\n      return callback(null, result);\n    }\n    // order with open_revs is unspecified\n    leaves.forEach(function (leaf) {\n      self.get(id, {\n        rev: leaf,\n        revs: opts.revs,\n        attachments: opts.attachments\n      }, function (err, doc) {\n        if (!err) {\n          result.push({ok: doc});\n        } else {\n          result.push({missing: leaf});\n        }\n        count--;\n        if (!count) {\n          callback(null, result);\n        }\n      });\n    });\n  }\n\n  if (opts.open_revs) {\n    if (opts.open_revs === "all") {\n      this._getRevisionTree(id, function (err, rev_tree) {\n        if (err) {\n          return callback(err);\n        }\n        leaves = collectLeaves(rev_tree).map(function (leaf) {\n          return leaf.rev;\n        });\n        finishOpenRevs();\n      });\n    } else {\n      if (Array.isArray(opts.open_revs)) {\n        leaves = opts.open_revs;\n        for (var i = 0; i < leaves.length; i++) {\n          var l = leaves[i];\n          // looks like it\'s the only thing couchdb checks\n          if (!(typeof(l) === "string" && /^\\d+-/.test(l))) {\n            return callback(errors.error(errors.INVALID_REV));\n          }\n        }\n        finishOpenRevs();\n      } else {\n        return callback(errors.error(errors.UNKNOWN_ERROR,\n          \'function_clause\'));\n      }\n    }\n    return; // open_revs does not like other options\n  }\n\n  return this._get(id, opts, function (err, result) {\n    if (err) {\n      return callback(err);\n    }\n\n    var doc = result.doc;\n    var metadata = result.metadata;\n    var ctx = result.ctx;\n\n    if (opts.conflicts) {\n      var conflicts = collectConflicts(metadata);\n      if (conflicts.length) {\n        doc._conflicts = conflicts;\n      }\n    }\n\n    if (isDeleted(metadata, doc._rev)) {\n      doc._deleted = true;\n    }\n\n    if (opts.revs || opts.revs_info) {\n      var paths = rootToLeaf(metadata.rev_tree);\n      var path = arrayFirst(paths, function (arr) {\n        return arr.ids.map(function (x) { return x.id; })\n          .indexOf(doc._rev.split(\'-\')[1]) !== -1;\n      });\n\n      var indexOfRev = path.ids.map(function (x) {return x.id; })\n        .indexOf(doc._rev.split(\'-\')[1]) + 1;\n      var howMany = path.ids.length - indexOfRev;\n      path.ids.splice(indexOfRev, howMany);\n      path.ids.reverse();\n\n      if (opts.revs) {\n        doc._revisions = {\n          start: (path.pos + path.ids.length) - 1,\n          ids: path.ids.map(function (rev) {\n            return rev.id;\n          })\n        };\n      }\n      if (opts.revs_info) {\n        var pos =  path.pos + path.ids.length;\n        doc._revs_info = path.ids.map(function (rev) {\n          pos--;\n          return {\n            rev: pos + \'-\' + rev.id,\n            status: rev.opts.status\n          };\n        });\n      }\n    }\n\n    if (opts.attachments && doc._attachments) {\n      var attachments = doc._attachments;\n      var count = Object.keys(attachments).length;\n      if (count === 0) {\n        return callback(null, doc);\n      }\n      Object.keys(attachments).forEach(function (key) {\n        this._getAttachment(attachments[key], {\n          binary: opts.binary,\n          ctx: ctx\n        }, function (err, data) {\n          var att = doc._attachments[key];\n          att.data = data;\n          delete att.stub;\n          delete att.length;\n          if (!--count) {\n            callback(null, doc);\n          }\n        });\n      }, self);\n    } else {\n      if (doc._attachments) {\n        for (var key in doc._attachments) {\n          /* istanbul ignore else */\n          if (doc._attachments.hasOwnProperty(key)) {\n            doc._attachments[key].stub = true;\n          }\n        }\n      }\n      callback(null, doc);\n    }\n  });\n});\n\nAbstractPouchDB.prototype.getAttachment =\n  utils.adapterFun(\'getAttachment\', function (docId, attachmentId, opts,\n                                              callback) {\n  var self = this;\n  if (opts instanceof Function) {\n    callback = opts;\n    opts = {};\n  }\n  this._get(docId, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (res.doc._attachments && res.doc._attachments[attachmentId]) {\n      opts.ctx = res.ctx;\n      opts.binary = true;\n      self._getAttachment(res.doc._attachments[attachmentId], opts, callback);\n    } else {\n      return callback(errors.error(errors.MISSING_DOC));\n    }\n  });\n});\n\nAbstractPouchDB.prototype.allDocs =\n  utils.adapterFun(\'allDocs\', function (opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  opts.skip = typeof opts.skip !== \'undefined\' ? opts.skip : 0;\n  if (opts.start_key) {\n    opts.startkey = opts.start_key;\n  }\n  if (opts.end_key) {\n    opts.endkey = opts.end_key;\n  }\n  if (\'keys\' in opts) {\n    if (!Array.isArray(opts.keys)) {\n      return callback(new TypeError(\'options.keys must be an array\'));\n    }\n    var incompatibleOpt =\n      [\'startkey\', \'endkey\', \'key\'].filter(function (incompatibleOpt) {\n      return incompatibleOpt in opts;\n    })[0];\n    if (incompatibleOpt) {\n      callback(errors.error(errors.QUERY_PARSE_ERROR,\n        \'Query parameter `\' + incompatibleOpt +\n        \'` is not compatible with multi-get\'\n      ));\n      return;\n    }\n    if (this.type() !== \'http\') {\n      return allDocsKeysQuery(this, opts, callback);\n    }\n  }\n\n  return this._allDocs(opts, callback);\n});\n\nAbstractPouchDB.prototype.changes = function (opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  return new Changes(this, opts, callback);\n};\n\nAbstractPouchDB.prototype.close =\n  utils.adapterFun(\'close\', function (callback) {\n  this._closed = true;\n  return this._close(callback);\n});\n\nAbstractPouchDB.prototype.info = utils.adapterFun(\'info\', function (callback) {\n  var self = this;\n  this._info(function (err, info) {\n    if (err) {\n      return callback(err);\n    }\n    // assume we know better than the adapter, unless it informs us\n    info.db_name = info.db_name || self._db_name;\n    info.auto_compaction = !!(self.auto_compaction && self.type() !== \'http\');\n    info.adapter = self.type();\n    callback(null, info);\n  });\n});\n\nAbstractPouchDB.prototype.id = utils.adapterFun(\'id\', function (callback) {\n  return this._id(callback);\n});\n\nAbstractPouchDB.prototype.type = function () {\n  return (typeof this._type === \'function\') ? this._type() : this.adapter;\n};\n\nAbstractPouchDB.prototype.bulkDocs =\n  utils.adapterFun(\'bulkDocs\', function (req, opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n\n  if (Array.isArray(req)) {\n    req = {\n      docs: req\n    };\n  }\n\n  if (!req || !req.docs || !Array.isArray(req.docs)) {\n    return callback(errors.error(errors.MISSING_BULK_DOCS));\n  }\n\n  for (var i = 0; i < req.docs.length; ++i) {\n    if (typeof req.docs[i] !== \'object\' || Array.isArray(req.docs[i])) {\n      return callback(errors.error(errors.NOT_AN_OBJECT));\n    }\n  }\n\n  var attachmentError;\n  req.docs.forEach(function(doc) {\n    if (doc._attachments) {\n      Object.keys(doc._attachments).forEach(function (name) {\n        attachmentError = attachmentError || attachmentNameError(name);\n      });\n    }\n  });\n\n  if (attachmentError) {\n    return callback(errors.error(errors.BAD_REQUEST, attachmentError));\n  }\n\n  if (!(\'new_edits\' in opts)) {\n    if (\'new_edits\' in req) {\n      opts.new_edits = req.new_edits;\n    } else {\n      opts.new_edits = true;\n    }\n  }\n\n  if (!opts.new_edits && this.type() !== \'http\') {\n    // ensure revisions of the same doc are sorted, so that\n    // the local adapter processes them correctly (#2935)\n    req.docs.sort(compareByIdThenRev);\n  }\n\n  cleanDocs(req.docs);\n\n  return this._bulkDocs(req, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (!opts.new_edits) {\n      // this is what couch does when new_edits is false\n      res = res.filter(function (x) {\n        return x.error;\n      });\n    }\n    callback(null, res);\n  });\n});\n\nAbstractPouchDB.prototype.registerDependentDatabase =\n  utils.adapterFun(\'registerDependentDatabase\', function (dependentDb,\n                                                          callback) {\n  var depDB = new this.constructor(dependentDb, this.__opts);\n\n  function diffFun(doc) {\n    doc.dependentDbs = doc.dependentDbs || {};\n    if (doc.dependentDbs[dependentDb]) {\n      return false; // no update required\n    }\n    doc.dependentDbs[dependentDb] = true;\n    return doc;\n  }\n  upsert(this, \'_local/_pouch_dependentDbs\', diffFun)\n    .then(function () {\n      callback(null, {db: depDB});\n    }).catch(callback);\n});\n\nAbstractPouchDB.prototype.destroy =\n  utils.adapterFun(\'destroy\', function (opts, callback) {\n\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  var usePrefix = \'use_prefix\' in self ? self.use_prefix : true;\n\n  function destroyDb() {\n    // call destroy method of the particular adaptor\n    self._destroy(opts, function (err, resp) {\n      if (err) {\n        return callback(err);\n      }\n      self.emit(\'destroyed\');\n      callback(null, resp || { \'ok\': true });\n    });\n  }\n\n  if (self.type() === \'http\') {\n    // no need to check for dependent DBs if it\'s a remote DB\n    return destroyDb();\n  }\n\n  self.get(\'_local/_pouch_dependentDbs\', function (err, localDoc) {\n    if (err) {\n      if (err.status !== 404) {\n        return callback(err);\n      } else { // no dependencies\n        return destroyDb();\n      }\n    }\n    var dependentDbs = localDoc.dependentDbs;\n    var PouchDB = self.constructor;\n    var deletedMap = Object.keys(dependentDbs).map(function (name) {\n      var trueName = usePrefix ?\n        name.replace(new RegExp(\'^\' + PouchDB.prefix), \'\') : name;\n      return new PouchDB(trueName, self.__opts).destroy();\n    });\n    Promise.all(deletedMap).then(destroyDb, function (error) {\n      callback(error);\n    });\n  });\n});\n\n}).call(this,require("/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))\n},{"./changes":25,"./deps/bulkGetShim":50,"./deps/docs/isDeleted":52,"./deps/docs/isLocalId":53,"./deps/errors":62,"./deps/merge/collectConflicts":66,"./deps/merge/collectLeaves":67,"./deps/merge/rootToLeaf":70,"./deps/merge/traverseRevTree":71,"./deps/upsert":79,"./utils":100,"/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":110,"events":109}],13:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = {\n  idb: require(\'./adapters/idb\'),\n  websql: require(\'./adapters/websql\')\n};\n},{"./adapters/idb":19,"./adapters/websql":23}],14:[function(require,module,exports){\n"use strict";\n\nvar CHANGES_BATCH_SIZE = 25;\nvar MAX_SIMULTANEOUS_REVS = 50;\n\nvar supportsBulkGetMap = {};\n\n// according to http://stackoverflow.com/a/417184/680742,\n// the de facto URL length limit is 2000 characters.\n// but since most of our measurements don\'t take the full\n// URL into account, we fudge it a bit.\n// TODO: we could measure the full URL to enforce exactly 2000 chars\nvar MAX_URL_LENGTH = 1800;\n\nvar binStringToBluffer =\n  require(\'../../deps/binary/binaryStringToBlobOrBuffer\');\nvar b64StringToBluffer =\n  require(\'../../deps/binary/base64StringToBlobOrBuffer\');\nvar utils = require(\'../../utils\');\nvar Promise = utils.Promise;\nvar clone = utils.clone;\nvar base64 = require(\'../../deps/binary/base64\');\nvar btoa = base64.btoa;\nvar atob = base64.atob;\nvar errors = require(\'../../deps/errors\');\nvar log = require(\'debug\')(\'pouchdb:http\');\nvar createMultipart = require(\'../../deps/ajax/multipart\');\nvar blufferToBase64 = require(\'../../deps/binary/blobOrBufferToBase64\');\nvar parseDoc = require(\'../../deps/docs/parseDoc\');\nvar bulkGetShim = require(\'../../deps/bulkGetShim\');\nvar flatten = require(\'../../deps/flatten\');\n\nfunction readAttachmentsAsBlobOrBuffer(row) {\n  var atts = row.doc && row.doc._attachments;\n  if (!atts) {\n    return;\n  }\n  Object.keys(atts).forEach(function (filename) {\n    var att = atts[filename];\n    att.data = b64StringToBluffer(att.data, att.content_type);\n  });\n}\n\nfunction encodeDocId(id) {\n  if (/^_design/.test(id)) {\n    return \'_design/\' + encodeURIComponent(id.slice(8));\n  }\n  if (/^_local/.test(id)) {\n    return \'_local/\' + encodeURIComponent(id.slice(7));\n  }\n  return encodeURIComponent(id);\n}\n\nfunction preprocessAttachments(doc) {\n  if (!doc._attachments || !Object.keys(doc._attachments)) {\n    return Promise.resolve();\n  }\n\n  return Promise.all(Object.keys(doc._attachments).map(function (key) {\n    var attachment = doc._attachments[key];\n    if (attachment.data && typeof attachment.data !== \'string\') {\n      return blufferToBase64(attachment.data).then(function (b64) {\n        attachment.data = b64;\n      });\n    }\n  }));\n}\n\n// Get all the information you possibly can about the URI given by name and\n// return it as a suitable object.\nfunction getHost(name) {\n  // Prase the URI into all its little bits\n  var uri = utils.parseUri(name);\n\n  // Store the user and password as a separate auth object\n  if (uri.user || uri.password) {\n    uri.auth = {username: uri.user, password: uri.password};\n  }\n\n  // Split the path part of the URI into parts using \'/\' as the delimiter\n  // after removing any leading \'/\' and any trailing \'/\'\n  var parts = uri.path.replace(/(^\\/|\\/$)/g, \'\').split(\'/\');\n\n  // Store the first part as the database name and remove it from the parts\n  // array\n  uri.db = parts.pop();\n\n  // Restore the path by joining all the remaining parts (all the parts\n  // except for the database name) with \'/\'s\n  uri.path = parts.join(\'/\');\n\n  return uri;\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genDBUrl(opts, path) {\n  return genUrl(opts, opts.db + \'/\' + path);\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genUrl(opts, path) {\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  var pathDel = !opts.path ? \'\' : \'/\';\n\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  return opts.protocol + \'://\' + opts.host + \':\' + opts.port + \'/\' +\n         opts.path + pathDel + path;\n}\n\n// Implements the PouchDB API for dealing with CouchDB instances over HTTP\nfunction HttpPouch(opts, callback) {\n  // The functions that will be publicly available for HttpPouch\n  var api = this;\n\n  // Parse the URI given by opts.name into an easy-to-use object\n  var getHostFun = getHost;\n\n  // TODO: this seems to only be used by yarong for the Thali project.\n  // Verify whether or not it\'s still needed.\n  /* istanbul ignore:next */\n  if (opts.getHost) {\n    getHostFun = opts.getHost;\n  }\n\n  var host = getHostFun(opts.name, opts);\n  var dbUrl = genDBUrl(host, \'\');\n\n  opts = clone(opts);\n  var ajaxOpts = opts.ajax || {};\n\n  api.getUrl = function () { return dbUrl; };\n  api.getHeaders = function () { return ajaxOpts.headers || {}; };\n\n  if (opts.auth || host.auth) {\n    var nAuth = opts.auth || host.auth;\n    var token = btoa(nAuth.username + \':\' + nAuth.password);\n    ajaxOpts.headers = ajaxOpts.headers || {};\n    ajaxOpts.headers.Authorization = \'Basic \' + token;\n  }\n\n  function ajax(userOpts, options, callback) {\n    var reqAjax = userOpts.ajax || {};\n    var reqOpts = utils.extend(clone(ajaxOpts), reqAjax, options);\n    log(reqOpts.method + \' \' + reqOpts.url);\n    return utils.ajax(reqOpts, callback);\n  }\n\n  function ajaxPromise(userOpts, opts) {\n    return new Promise(function (resolve, reject) {\n      ajax(userOpts, opts, function (err, res) {\n        if (err) {\n          return reject(err);\n        }\n        resolve(res);\n      });\n    });\n  }\n\n  function adapterFun(name, fun) {\n    return utils.adapterFun(name, utils.getArguments(function (args) {\n      setup().then(function (res) {\n        return fun.apply(this, args);\n      }).catch(function(e) {\n        var callback = args.pop();\n        callback(e);\n      });\n    }));\n  }\n\n  var setupPromise;\n\n  function setup() {\n    // TODO: Remove `skipSetup` in favor of `skip_setup` in a future release\n    if (opts.skipSetup || opts.skip_setup) {\n      return Promise.resolve();\n    }\n\n    // If there is a setup in process or previous successful setup\n    // done then we will use that\n    // If previous setups have been rejected we will try again\n    if (setupPromise) {\n      return setupPromise;\n    }\n\n    var checkExists = {method: \'GET\', url: dbUrl};\n    var create = {method: \'PUT\', url: dbUrl};\n    setupPromise = ajaxPromise({}, checkExists).catch(function(err) {\n      if (err && err.status && err.status === 404) {\n        // Doesnt exist, create it\n        utils.explain404(\'PouchDB is just detecting if the remote exists.\');\n        return ajaxPromise({}, create);\n      } else {\n        return Promise.reject(err);\n      }\n    }).catch(function(err) {\n      // If we get an authorisation error\n      if (err && err.status && err.status === 401) {\n        return ajaxPromise({}, checkExists);\n      }\n      // If we try to create a database that already exists\n      if (err && err.status && err.status === 412) {\n        return true;\n      }\n      return Promise.reject(err);\n    });\n\n    setupPromise.catch(function() {\n      setupPromise = null;\n    });\n\n    return setupPromise;\n  }\n\n  setTimeout(function() {\n    callback(null, api);\n  });\n\n  api.type = function () {\n    return \'http\';\n  };\n\n  api.id = adapterFun(\'id\', function (callback) {\n    ajax({}, {method: \'GET\', url: genUrl(host, \'\')}, function (err, result) {\n      var uuid = (result && result.uuid) ?\n        (result.uuid + host.db) : genDBUrl(host, \'\');\n      callback(null, uuid);\n    });\n  });\n\n  api.request = adapterFun(\'request\', function (options, callback) {\n    options.url = genDBUrl(host, options.url);\n    ajax({}, options, callback);\n  });\n\n  // Sends a POST request to the host calling the couchdb _compact function\n  //    version: The version of CouchDB it is running\n  api.compact = adapterFun(\'compact\', function (opts, callback) {\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n    ajax(opts, {\n      url: genDBUrl(host, \'_compact\'),\n      method: \'POST\'\n    }, function () {\n      function ping() {\n        api.info(function (err, res) {\n          if (!res.compact_running) {\n            callback(null, {ok: true});\n          } else {\n            setTimeout(ping, opts.interval || 200);\n          }\n        });\n      }\n      // Ping the http if it\'s finished compaction\n      ping();\n    });\n  });\n\n  api.bulkGet = utils.adapterFun(\'bulkGet\', function (opts, callback) {\n    var self = this;\n\n    function doBulkGet(cb) {\n      var params = [];\n      if (opts.revs) {\n        params.push(\'revs=true\');\n      }\n      if (opts.attachments) {\n        params.push(\'attachments=true\');\n      }\n      params = params.join(\'&\');\n      if (params !== \'\') {\n        params = \'?\' + params;\n      }\n\n      ajax({}, {\n        headers: host.headers,\n        url: genDBUrl(host, \'_bulk_get\' + params),\n        method: \'POST\',\n        body: { docs: opts.docs}\n      }, cb);\n    }\n\n    function doBulkGetShim() {\n      if (!opts.docs.length) {\n        return callback(null, {results: []});\n      }\n\n      // avoid "url too long error" by splitting up into multiple requests\n      var batchSize = MAX_SIMULTANEOUS_REVS;\n      var numBatches = Math.ceil(opts.docs.length / batchSize);\n      var numDone = 0;\n      var results = new Array(numBatches);\n\n      function onResult(batchNum) {\n        return function (err, res) {\n          // err is impossible because shim returns a list of errs in that case\n          results[batchNum] = res.results;\n          if (++numDone === numBatches) {\n            callback(null, {results: flatten(results)});\n          }\n        };\n      }\n\n      for (var i = 0; i < numBatches; i++) {\n        var subOpts = utils.pick(opts, [\'revs\', \'attachments\']);\n        subOpts.docs = opts.docs.slice(i * batchSize,\n          Math.min(opts.docs.length, (i + 1) * batchSize));\n        bulkGetShim(self, subOpts, onResult(i));\n      }\n    }\n\n    // mark the whole database as either supporting or not supporting _bulk_get\n    var dbUrl = genUrl(host, \'\');\n    var supportsBulkGet = supportsBulkGetMap[dbUrl];\n\n    if (typeof supportsBulkGet !== \'boolean\') {\n      // check if this database supports _bulk_get\n      doBulkGet(function (err, res) {\n        if (err) {\n          if (Math.floor(err.status / 100) === 4) { // 40x\n            supportsBulkGetMap[dbUrl] = false;\n            doBulkGetShim();\n          } else {\n            callback(err);\n          }\n        } else {\n          supportsBulkGetMap[dbUrl] = true;\n          callback(null, res);\n        }\n      });\n    } else if (supportsBulkGet) {\n      doBulkGet(callback);\n    } else {\n      doBulkGetShim();\n    }\n  });\n\n  // Calls GET on the host, which gets back a JSON string containing\n  //    couchdb: A welcome string\n  //    version: The version of CouchDB it is running\n  api._info = function (callback) {\n    setup().then(function() {\n      ajax({}, {\n        method: \'GET\',\n        url: genDBUrl(host, \'\')\n      }, function (err, res) {\n        /* istanbul ignore next */\n        if (err) {\n        return callback(err);\n        }\n        res.host = genDBUrl(host, \'\');\n        callback(null, res);\n      });\n    }).catch(callback);\n  };\n\n  // Get the document with the given id from the database given by host.\n  // The id could be solely the _id in the database, or it may be a\n  // _design/ID or _local/ID path\n  api.get = adapterFun(\'get\', function (id, opts, callback) {\n    // If no options were given, set the callback to the second parameter\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = [];\n\n    // If it exists, add the opts.revs value to the list of parameters.\n    // If revs=true then the resulting JSON will include a field\n    // _revisions containing an array of the revision IDs.\n    if (opts.revs) {\n      params.push(\'revs=true\');\n    }\n\n    // If it exists, add the opts.revs_info value to the list of parameters.\n    // If revs_info=true then the resulting JSON will include the field\n    // _revs_info containing an array of objects in which each object\n    // representing an available revision.\n    if (opts.revs_info) {\n      params.push(\'revs_info=true\');\n    }\n\n    // If it exists, add the opts.open_revs value to the list of parameters.\n    // If open_revs=all then the resulting JSON will include all the leaf\n    // revisions. If open_revs=["rev1", "rev2",...] then the resulting JSON\n    // will contain an array of objects containing data of all revisions\n    if (opts.open_revs) {\n      if (opts.open_revs !== "all") {\n        opts.open_revs = JSON.stringify(opts.open_revs);\n      }\n      params.push(\'open_revs=\' + opts.open_revs);\n    }\n\n    // If it exists, add the opts.rev value to the list of parameters.\n    // If rev is given a revision number then get the specified revision.\n    if (opts.rev) {\n      params.push(\'rev=\' + opts.rev);\n    }\n\n    // If it exists, add the opts.conflicts value to the list of parameters.\n    // If conflicts=true then the resulting JSON will include the field\n    // _conflicts containing all the conflicting revisions.\n    if (opts.conflicts) {\n      params.push(\'conflicts=\' + opts.conflicts);\n    }\n\n    // Format the list of parameters into a valid URI query string\n    params = params.join(\'&\');\n    params = params === \'\' ? \'\' : \'?\' + params;\n\n    id = encodeDocId(id);\n\n    // Set the options for the ajax call\n    var options = {\n      method: \'GET\',\n      url: genDBUrl(host, id + params)\n    };\n\n    function fetchAttachments(doc) {\n      var atts = doc._attachments;\n      var filenames = atts && Object.keys(atts);\n      if (!atts || !filenames.length) {\n        return;\n      }\n      // we fetch these manually in separate XHRs, because\n      // Sync Gateway would normally send it back as multipart/mixed,\n      // which we cannot parse. Also, this is more efficient than\n      // receiving attachments as base64-encoded strings.\n      return Promise.all(filenames.map(function (filename) {\n        var att = atts[filename];\n        var path = encodeDocId(doc._id) + \'/\' + encodeAttachmentId(filename) +\n          \'?rev=\' + doc._rev;\n        return ajaxPromise(opts, {\n          method: \'GET\',\n          url: genDBUrl(host, path),\n          binary: true\n        }).then(function (blob) {\n          if (opts.binary) {\n            return blob;\n          }\n          return blufferToBase64(blob);\n        }).then(function (data) {\n          delete att.stub;\n          delete att.length;\n          att.data = data;\n        });\n      }));\n    }\n\n    function fetchAllAttachments(docOrDocs) {\n      if (Array.isArray(docOrDocs)) {\n        return Promise.all(docOrDocs.map(function (doc) {\n          if (doc.ok) {\n            return fetchAttachments(doc.ok);\n          }\n        }));\n      }\n      return fetchAttachments(docOrDocs);\n    }\n\n    ajaxPromise(opts, options).then(function (res) {\n      return Promise.resolve().then(function () {\n        if (opts.attachments) {\n          return fetchAllAttachments(res);\n        }\n      }).then(function () {\n        callback(null, res);\n      });\n    }).catch(callback);\n  });\n\n  // Delete the document given by doc from the database given by host.\n  api.remove = adapterFun(\'remove\',\n      function (docOrId, optsOrRev, opts, callback) {\n    var doc;\n    if (typeof optsOrRev === \'string\') {\n      // id, rev, opts, callback style\n      doc = {\n        _id: docOrId,\n        _rev: optsOrRev\n      };\n      if (typeof opts === \'function\') {\n        callback = opts;\n        opts = {};\n      }\n    } else {\n      // doc, opts, callback style\n      doc = docOrId;\n      if (typeof optsOrRev === \'function\') {\n        callback = optsOrRev;\n        opts = {};\n      } else {\n        callback = opts;\n        opts = optsOrRev;\n      }\n    }\n\n    var rev = (doc._rev || opts.rev);\n\n    // Delete the document\n    ajax(opts, {\n      method: \'DELETE\',\n      url: genDBUrl(host, encodeDocId(doc._id)) + \'?rev=\' + rev\n    }, callback);\n  });\n\n  function encodeAttachmentId(attachmentId) {\n    return attachmentId.split("/").map(encodeURIComponent).join("/");\n  }\n\n  // Get the attachment\n  api.getAttachment =\n    adapterFun(\'getAttachment\', function (docId, attachmentId, opts,\n                                                callback) {\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    var params = opts.rev ? (\'?rev=\' + opts.rev) : \'\';\n    var url = genDBUrl(host, encodeDocId(docId)) + \'/\' +\n      encodeAttachmentId(attachmentId) + params;\n    ajax(opts, {\n      method: \'GET\',\n      url: url,\n      binary: true\n    }, callback);\n  });\n\n  // Remove the attachment given by the id and rev\n  api.removeAttachment =\n    adapterFun(\'removeAttachment\', function (docId, attachmentId, rev,\n                                                   callback) {\n\n    var url = genDBUrl(host, encodeDocId(docId) + \'/\' +\n      encodeAttachmentId(attachmentId)) + \'?rev=\' + rev;\n\n    ajax({}, {\n      method: \'DELETE\',\n      url: url\n    }, callback);\n  });\n\n  // Add the attachment given by blob and its contentType property\n  // to the document with the given id, the revision given by rev, and\n  // add it to the database given by host.\n  api.putAttachment =\n    adapterFun(\'putAttachment\', function (docId, attachmentId, rev, blob,\n                                                type, callback) {\n    if (typeof type === \'function\') {\n      callback = type;\n      type = blob;\n      blob = rev;\n      rev = null;\n    }\n    var id = encodeDocId(docId) + \'/\' + encodeAttachmentId(attachmentId);\n    var url = genDBUrl(host, id);\n    if (rev) {\n      url += \'?rev=\' + rev;\n    }\n\n    if (typeof blob === \'string\') {\n      var binary;\n      try {\n        binary = atob(blob);\n      } catch (err) {\n        // it\'s not base64-encoded, so throw error\n        return callback(errors.error(errors.BAD_ARG,\n                        \'Attachments need to be base64 encoded\'));\n      }\n      blob = binary ? binStringToBluffer(binary, type) : \'\';\n    }\n\n    var opts = {\n      headers: {\'Content-Type\': type},\n      method: \'PUT\',\n      url: url,\n      processData: false,\n      body: blob,\n      timeout: ajaxOpts.timeout || 60000\n    };\n    // Add the attachment\n    ajax({}, opts, callback);\n  });\n\n  // Add the document given by doc (in JSON string format) to the database\n  // given by host. This fails if the doc has no _id field.\n  api.put = adapterFun(\'put\', utils.getArguments(function (args) {\n    var temp, temptype, opts;\n    var doc = args.shift();\n    var callback = args.pop();\n\n    if (typeof doc !== \'object\' || Array.isArray(doc)) {\n      return callback(errors.error(errors.NOT_AN_OBJECT));\n    }\n\n    var id = \'_id\' in doc;\n    doc = clone(doc);\n\n    preprocessAttachments(doc).then(function () {\n      while (true) {\n        temp = args.shift();\n        temptype = typeof temp;\n        if (temptype === "string" && !id) {\n          doc._id = temp;\n          id = true;\n        } else if (temptype === "string" && id && !(\'_rev\' in doc)) {\n          doc._rev = temp;\n        } else if (temptype === "object") {\n          opts = clone(temp);\n        }\n        if (!args.length) {\n          break;\n        }\n      }\n      opts = opts || {};\n\n      // check for any errors\n      // TODO: rename this function\n      parseDoc.invalidIdError(doc._id);\n\n      // List of parameter to add to the PUT request\n      var params = [];\n\n      // If it exists, add the opts.new_edits value to the list of parameters.\n      // If new_edits = false then the database will NOT assign this document a\n      // new revision number\n      if (opts && typeof opts.new_edits !== \'undefined\') {\n        params.push(\'new_edits=\' + opts.new_edits);\n      }\n\n      // Format the list of parameters into a valid URI query string\n      params = params.join(\'&\');\n      if (params !== \'\') {\n        params = \'?\' + params;\n      }\n\n      var ajaxOpts = {\n        method: \'PUT\',\n        url: genDBUrl(host, encodeDocId(doc._id)) + params,\n        body: doc\n      };\n\n      return Promise.resolve().then(function () {\n        var hasNonStubAttachments = doc._attachments &&\n          Object.keys(doc._attachments).filter(function (att) {\n            return !doc._attachments[att].stub;\n          }).length;\n        if (hasNonStubAttachments) {\n          // use multipart/related for more efficient attachment uploading\n          var multipart = createMultipart(doc);\n          ajaxOpts.body = multipart.body;\n          ajaxOpts.processData = false;\n          ajaxOpts.headers = multipart.headers;\n        }\n      }).catch(function () {\n        throw new Error(\'Did you forget to base64-encode an attachment?\');\n      }).then(function () {\n        return ajaxPromise(opts, ajaxOpts);\n      }).then(function (res) {\n        res.ok = true; // smooths out cloudant not doing this\n        callback(null, res);\n      });\n    }).catch(callback);\n  }));\n\n  // Add the document given by doc (in JSON string format) to the database\n  // given by host. This does not assume that doc is a new document\n  // (i.e. does not have a _id or a _rev field.)\n  api.post = adapterFun(\'post\', function (doc, opts, callback) {\n    // If no options were given, set the callback to be the second parameter\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n    if (typeof doc !== \'object\') {\n      return callback(errors.error(errors.NOT_AN_OBJECT));\n    }\n    if (! ("_id" in doc)) {\n      doc._id = utils.uuid();\n    }\n    api.put(doc, opts, function (err, res) {\n      if (err) {\n        return callback(err);\n      }\n      res.ok = true;\n      callback(null, res);\n    });\n  });\n\n  // Update/create multiple documents given by req in the database\n  // given by host.\n  api._bulkDocs = function (req, opts, callback) {\n    // If new_edits=false then it prevents the database from creating\n    // new revision numbers for the documents. Instead it just uses\n    // the old ones. This is used in database replication.\n    req.new_edits = opts.new_edits;\n\n    setup().then(function () {\n      return Promise.all(req.docs.map(preprocessAttachments));\n    }).then(function () {\n      // Update/create the documents\n      ajax(opts, {\n        method: \'POST\',\n        url: genDBUrl(host, \'_bulk_docs\'),\n        body: req\n      }, function (err, results) {\n        if (err) {\n          return callback(err);\n        }\n        results.forEach(function (result) {\n          result.ok = true; // smooths out cloudant not adding this\n        });\n        callback(null, results);\n      });\n    }).catch(callback);\n  };\n\n  // Get a listing of the documents in the database given\n  // by host and ordered by increasing id.\n  api.allDocs = adapterFun(\'allDocs\', function (opts, callback) {\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n    // List of parameters to add to the GET request\n    var params = [];\n    var body;\n    var method = \'GET\';\n\n    if (opts.conflicts) {\n      params.push(\'conflicts=true\');\n    }\n\n    // If opts.descending is truthy add it to params\n    if (opts.descending) {\n      params.push(\'descending=true\');\n    }\n\n    // If opts.include_docs exists, add the include_docs value to the\n    // list of parameters.\n    // If include_docs=true then include the associated document with each\n    // result.\n    if (opts.include_docs) {\n      params.push(\'include_docs=true\');\n    }\n\n    if (opts.attachments) {\n      // added in CouchDB 1.6.0\n      params.push(\'attachments=true\');\n    }\n\n    if (opts.key) {\n      params.push(\'key=\' + encodeURIComponent(JSON.stringify(opts.key)));\n    }\n\n    if (opts.start_key) {\n      opts.startkey = opts.start_key;\n    }\n\n    // If opts.startkey exists, add the startkey value to the list of\n    // parameters.\n    // If startkey is given then the returned list of documents will\n    // start with the document whose id is startkey.\n    if (opts.startkey) {\n      params.push(\'startkey=\' +\n        encodeURIComponent(JSON.stringify(opts.startkey)));\n    }\n\n    if (opts.end_key) {\n      opts.endkey = opts.end_key;\n    }\n\n    // If opts.endkey exists, add the endkey value to the list of parameters.\n    // If endkey is given then the returned list of docuemnts will\n    // end with the document whose id is endkey.\n    if (opts.endkey) {\n      params.push(\'endkey=\' + encodeURIComponent(JSON.stringify(opts.endkey)));\n    }\n\n    if (typeof opts.inclusive_end !== \'undefined\') {\n      params.push(\'inclusive_end=\' + !!opts.inclusive_end);\n    }\n\n    // If opts.limit exists, add the limit value to the parameter list.\n    if (typeof opts.limit !== \'undefined\') {\n      params.push(\'limit=\' + opts.limit);\n    }\n\n    if (typeof opts.skip !== \'undefined\') {\n      params.push(\'skip=\' + opts.skip);\n    }\n\n    // Format the list of parameters into a valid URI query string\n    params = params.join(\'&\');\n    if (params !== \'\') {\n      params = \'?\' + params;\n    }\n\n    if (typeof opts.keys !== \'undefined\') {\n\n      var keysAsString =\n        \'keys=\' + encodeURIComponent(JSON.stringify(opts.keys));\n      if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {\n        // If the keys are short enough, do a GET. we do this to work around\n        // Safari not understanding 304s on POSTs (see issue #1239)\n        params += (params.indexOf(\'?\') !== -1 ? \'&\' : \'?\') + keysAsString;\n      } else {\n        // If keys are too long, issue a POST request to circumvent GET\n        // query string limits\n        // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n        method = \'POST\';\n        body = {keys: opts.keys};\n      }\n    }\n\n    // Get the document listing\n    ajaxPromise(opts, {\n      method: method,\n      url: genDBUrl(host, \'_all_docs\' + params),\n      body: body\n    }).then(function (res) {\n      if (opts.include_docs && opts.attachments && opts.binary) {\n        res.rows.forEach(readAttachmentsAsBlobOrBuffer);\n      }\n      callback(null, res);\n    }).catch(callback);\n  });\n\n  // Get a list of changes made to documents in the database given by host.\n  // TODO According to the README, there should be two other methods here,\n  // api.changes.addListener and api.changes.removeListener.\n  api._changes = function (opts) {\n\n    // We internally page the results of a changes request, this means\n    // if there is a large set of changes to be returned we can start\n    // processing them quicker instead of waiting on the entire\n    // set of changes to return and attempting to process them at once\n    var batchSize = \'batch_size\' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;\n\n    opts = clone(opts);\n    opts.timeout = opts.timeout || ajaxOpts.timeout || 30 * 1000;\n\n    // We give a 5 second buffer for CouchDB changes to respond with\n    // an ok timeout\n    var params = { timeout: opts.timeout - (5 * 1000) };\n    var limit = (typeof opts.limit !== \'undefined\') ? opts.limit : false;\n    var returnDocs;\n    if (\'returnDocs\' in opts) {\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    //\n    var leftToFetch = limit;\n\n    if (opts.style) {\n      params.style = opts.style;\n    }\n\n    if (opts.include_docs || opts.filter && typeof opts.filter === \'function\') {\n      params.include_docs = true;\n    }\n\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.continuous) {\n      params.feed = \'longpoll\';\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if (opts.filter && typeof opts.filter === \'string\') {\n      params.filter = opts.filter;\n      if (opts.filter === \'_view\' &&\n          opts.view &&\n          typeof opts.view === \'string\') {\n        params.view = opts.view;\n      }\n    }\n\n    // If opts.query_params exists, pass it through to the changes request.\n    // These parameters may be used by the filter on the source database.\n    if (opts.query_params && typeof opts.query_params === \'object\') {\n      for (var param_name in opts.query_params) {\n        /* istanbul ignore else */\n        if (opts.query_params.hasOwnProperty(param_name)) {\n          params[param_name] = opts.query_params[param_name];\n        }\n      }\n    }\n\n    var method = \'GET\';\n    var body;\n\n    if (opts.doc_ids) {\n      // set this automagically for the user; it\'s annoying that couchdb\n      // requires both a "filter" and a "doc_ids" param.\n      params.filter = \'_doc_ids\';\n\n      var docIdsJson = JSON.stringify(opts.doc_ids);\n\n      if (docIdsJson.length < MAX_URL_LENGTH) {\n        params.doc_ids = docIdsJson;\n      } else {\n        // anything greater than ~2000 is unsafe for gets, so\n        // use POST instead\n        method = \'POST\';\n        body = {doc_ids: opts.doc_ids };\n      }\n    }\n\n    var xhr;\n    var lastFetchedSeq;\n\n    // Get all the changes starting wtih the one immediately after the\n    // sequence number given by since.\n    var fetch = function (since, callback) {\n      if (opts.aborted) {\n        return;\n      }\n      params.since = since;\n      // "since" can be any kind of json object in Coudant/CouchDB 2.x\n      /* istanbul ignore next */\n      if (typeof params.since === "object") {\n        params.since = JSON.stringify(params.since);\n      }\n\n      if (opts.descending) {\n        if (limit) {\n          params.limit = leftToFetch;\n        }\n      } else {\n        params.limit = (!limit || leftToFetch > batchSize) ?\n          batchSize : leftToFetch;\n      }\n\n      var paramStr = \'?\' + Object.keys(params).map(function (k) {\n        return k + \'=\' + encodeURIComponent(params[k]);\n      }).join(\'&\');\n\n      // Set the options for the ajax call\n      var xhrOpts = {\n        method: method,\n        url: genDBUrl(host, \'_changes\' + paramStr),\n        // _changes can take a long time to generate, especially when filtered\n        timeout: opts.timeout,\n        body: body\n      };\n      lastFetchedSeq = since;\n\n      if (opts.aborted) {\n        return;\n      }\n\n      // Get the changes\n      setup().then(function() {\n        xhr = ajax(opts, xhrOpts, callback);\n      }).catch(callback);\n    };\n\n    // If opts.since exists, get all the changes from the sequence\n    // number given by opts.since. Otherwise, get all the changes\n    // from the sequence number 0.\n    var fetchTimeout = 10;\n    var fetchRetryCount = 0;\n\n    var results = {results: []};\n\n    var fetched = function (err, res) {\n      if (opts.aborted) {\n        return;\n      }\n      var raw_results_length = 0;\n      // If the result of the ajax call (res) contains changes (res.results)\n      if (res && res.results) {\n        raw_results_length = res.results.length;\n        results.last_seq = res.last_seq;\n        // For each change\n        var req = {};\n        req.query = opts.query_params;\n        res.results = res.results.filter(function (c) {\n          leftToFetch--;\n          var ret = utils.filterChange(opts)(c);\n          if (ret) {\n            if (opts.include_docs && opts.attachments && opts.binary) {\n              readAttachmentsAsBlobOrBuffer(c);\n            }\n            if (returnDocs) {\n              results.results.push(c);\n            }\n            opts.onChange(c);\n          }\n          return ret;\n        });\n      } else if (err) {\n        // In case of an error, stop listening for changes and call\n        // opts.complete\n        opts.aborted = true;\n        opts.complete(err);\n        return;\n      }\n\n      // The changes feed may have timed out with no results\n      // if so reuse last update sequence\n      if (res && res.last_seq) {\n        lastFetchedSeq = res.last_seq;\n      }\n\n      var finished = (limit && leftToFetch <= 0) ||\n        (res && raw_results_length < batchSize) ||\n        (opts.descending);\n\n      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {\n        // Increase retry delay exponentially as long as errors persist\n        if (err) {\n          fetchRetryCount += 1;\n        } else {\n          fetchRetryCount = 0;\n        }\n        var timeoutMultiplier = 1 << fetchRetryCount;\n        var retryWait = fetchTimeout * timeoutMultiplier;\n        var maximumWait = opts.maximumWait || 30000;\n\n        if (retryWait > maximumWait) {\n          opts.complete(err || errors.error(errors.UNKNOWN_ERROR));\n          return;\n        }\n\n        // Queue a call to fetch again with the newest sequence number\n        setTimeout(function () { fetch(lastFetchedSeq, fetched); }, retryWait);\n      } else {\n        // We\'re done, call the callback\n        opts.complete(null, results);\n      }\n    };\n\n    fetch(opts.since || 0, fetched);\n\n    // Return a method to cancel this method from processing any more\n    return {\n      cancel: function () {\n        opts.aborted = true;\n        if (xhr) {\n          xhr.abort();\n        }\n      }\n    };\n  };\n\n  // Given a set of document/revision IDs (given by req), tets the subset of\n  // those that do NOT correspond to revisions stored in the database.\n  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff\n  api.revsDiff = adapterFun(\'revsDiff\', function (req, opts, callback) {\n    // If no options were given, set the callback to be the second parameter\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n\n    // Get the missing document/revision IDs\n    ajax(opts, {\n      method: \'POST\',\n      url: genDBUrl(host, \'_revs_diff\'),\n      body: req\n    }, callback);\n  });\n\n  api._close = function (callback) {\n    callback();\n  };\n\n  api._destroy = function (options, callback) {\n    setup().then(function() {\n      ajax(options, {\n        url: genDBUrl(host, \'\'),\n        method: \'DELETE\'\n      }, function (err, resp) {\n        /* istanbul ignore next */\n        if (err) {\n          api.emit(\'error\', err);\n          return callback(err);\n        }\n        api.emit(\'destroyed\');\n        api.constructor.emit(\'destroyed\', opts.name);\n        callback(null, resp);\n      });\n    }).catch(callback);\n  };\n}\n\n// HttpPouch is a valid adapter.\nHttpPouch.valid = function () {\n  return true;\n};\n\nmodule.exports = HttpPouch;\n\n},{"../../deps/ajax/multipart":35,"../../deps/binary/base64":39,"../../deps/binary/base64StringToBlobOrBuffer":40,"../../deps/binary/binaryStringToBlobOrBuffer":42,"../../deps/binary/blobOrBufferToBase64":44,"../../deps/bulkGetShim":50,"../../deps/docs/parseDoc":56,"../../deps/errors":62,"../../deps/flatten":64,"../../utils":100,"debug":7}],15:[function(require,module,exports){\n\'use strict\';\n\nvar errors = require(\'../../deps/errors\');\nvar idbUtils = require(\'./utils\');\nvar idbConstants = require(\'./constants\');\nvar collectConflicts = require(\'../../deps/merge/collectConflicts\');\n\nvar ATTACH_STORE = idbConstants.ATTACH_STORE;\nvar BY_SEQ_STORE = idbConstants.BY_SEQ_STORE;\nvar DOC_STORE = idbConstants.DOC_STORE;\n\nvar decodeDoc = idbUtils.decodeDoc;\nvar decodeMetadata = idbUtils.decodeMetadata;\nvar fetchAttachmentsIfNecessary = idbUtils.fetchAttachmentsIfNecessary;\nvar postProcessAttachments = idbUtils.postProcessAttachments;\nvar openTransactionSafely = idbUtils.openTransactionSafely;\n\nfunction createKeyRange(start, end, inclusiveEnd, key, descending) {\n  try {\n    if (start && end) {\n      if (descending) {\n        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\n      } else {\n        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\n      }\n    } else if (start) {\n      if (descending) {\n        return IDBKeyRange.upperBound(start);\n      } else {\n        return IDBKeyRange.lowerBound(start);\n      }\n    } else if (end) {\n      if (descending) {\n        return IDBKeyRange.lowerBound(end, !inclusiveEnd);\n      } else {\n        return IDBKeyRange.upperBound(end, !inclusiveEnd);\n      }\n    } else if (key) {\n      return IDBKeyRange.only(key);\n    }\n  } catch (e) {\n    return {error: e};\n  }\n  return null;\n}\n\nfunction handleKeyRangeError(api, opts, err, callback) {\n  if (err.name === "DataError" && err.code === 0) {\n    // data error, start is less than end\n    return callback(null, {\n      total_rows: api._meta.docCount,\n      offset: opts.skip,\n      rows: []\n    });\n  }\n  callback(errors.error(errors.IDB_ERROR, err.name, err.message));\n}\n\nfunction idbAllDocs(opts, api, idb, callback) {\n\n  function allDocsQuery(opts, callback) {\n    var start = \'startkey\' in opts ? opts.startkey : false;\n    var end = \'endkey\' in opts ? opts.endkey : false;\n    var key = \'key\' in opts ? opts.key : false;\n    var skip = opts.skip || 0;\n    var limit = typeof opts.limit === \'number\' ? opts.limit : -1;\n    var inclusiveEnd = opts.inclusive_end !== false;\n    var descending = \'descending\' in opts && opts.descending ? \'prev\' : null;\n\n    var keyRange = createKeyRange(start, end, inclusiveEnd, key, descending);\n    if (keyRange && keyRange.error) {\n      return handleKeyRangeError(api, opts, keyRange.error, callback);\n    }\n\n    var stores = [DOC_STORE, BY_SEQ_STORE];\n\n    if (opts.attachments) {\n      stores.push(ATTACH_STORE);\n    }\n    var txnResult = openTransactionSafely(idb, stores, \'readonly\');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var cursor = descending ?\n      docStore.openCursor(keyRange, descending) :\n      docStore.openCursor(keyRange);\n    var docIdRevIndex = seqStore.index(\'_doc_id_rev\');\n    var results = [];\n    var docCount = 0;\n\n    // if the user specifies include_docs=true, then we don\'t\n    // want to block the main cursor while we\'re fetching the doc\n    function fetchDocAsynchronously(metadata, row, winningRev) {\n      var key = metadata.id + "::" + winningRev;\n      docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {\n        row.doc = decodeDoc(e.target.result);\n        if (opts.conflicts) {\n          row.doc._conflicts = collectConflicts(metadata);\n        }\n        fetchAttachmentsIfNecessary(row.doc, opts, txn);\n      };\n    }\n\n    function allDocsInner(cursor, winningRev, metadata) {\n      var row = {\n        id: metadata.id,\n        key: metadata.id,\n        value: {\n          rev: winningRev\n        }\n      };\n      var deleted = metadata.deleted;\n      if (opts.deleted === \'ok\') {\n        results.push(row);\n        // deleted docs are okay with "keys" requests\n        if (deleted) {\n          row.value.deleted = true;\n          row.doc = null;\n        } else if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n      } else if (!deleted && skip-- <= 0) {\n        results.push(row);\n        if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n        if (--limit === 0) {\n          return;\n        }\n      }\n      cursor.continue();\n    }\n\n    function onGetCursor(e) {\n      docCount = api._meta.docCount; // do this within the txn for consistency\n      var cursor = e.target.result;\n      if (!cursor) {\n        return;\n      }\n      var metadata = decodeMetadata(cursor.value);\n      var winningRev = metadata.winningRev;\n\n      allDocsInner(cursor, winningRev, metadata);\n    }\n\n    function onResultsReady() {\n      callback(null, {\n        total_rows: docCount,\n        offset: opts.skip,\n        rows: results\n      });\n    }\n\n    function onTxnComplete() {\n      if (opts.attachments) {\n        postProcessAttachments(results, opts.binary).then(onResultsReady);\n      } else {\n        onResultsReady();\n      }\n    }\n\n    txn.oncomplete = onTxnComplete;\n    cursor.onsuccess = onGetCursor;\n  }\n\n  function allDocs(opts, callback) {\n\n    if (opts.limit === 0) {\n      return callback(null, {\n        total_rows: api._meta.docCount,\n        offset: opts.skip,\n        rows: []\n      });\n    }\n    allDocsQuery(opts, callback);\n  }\n\n  allDocs(opts, callback);\n}\n\nmodule.exports = idbAllDocs;\n},{"../../deps/errors":62,"../../deps/merge/collectConflicts":66,"./constants":18,"./utils":20}],16:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'../../utils\');\nvar createBlob = require(\'../../deps/binary/blob\');\n\nvar idbConstants = require(\'./constants\');\nvar DETECT_BLOB_SUPPORT_STORE = idbConstants.DETECT_BLOB_SUPPORT_STORE;\n\n//\n// Detect blob support. Chrome didn\'t support it until version 38.\n// In version 37 they had a broken version where PNGs (and possibly\n// other binary types) aren\'t stored correctly, because when you fetch\n// them, the content type is always null.\n//\n// Furthermore, they have some outstanding bugs where blobs occasionally\n// are read by FileReader as null, or by ajax as 404s.\n//\n// Sadly we use the 404 bug to detect the FileReader bug, so if they\n// get fixed independently and released in different versions of Chrome,\n// then the bug could come back. So it\'s worthwhile to watch these issues:\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\nfunction checkBlobSupport(txn, idb) {\n  return new utils.Promise(function (resolve, reject) {\n    var blob = createBlob([\'\'], {type: \'image/png\'});\n    txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, \'key\');\n\n    txn.onabort = function (e) {\n      // If the transaction aborts now its due to not being able to\n      // write to the database, likely due to the disk being full\n      e.preventDefault();\n      e.stopPropagation();\n      resolve(false);\n    };\n\n    txn.oncomplete = function () {\n      // have to do it in a separate transaction, else the correct\n      // content type is always returned\n      var blobTxn = idb.transaction([DETECT_BLOB_SUPPORT_STORE],\n        \'readwrite\');\n      var getBlobReq = blobTxn.objectStore(\n        DETECT_BLOB_SUPPORT_STORE).get(\'key\');\n      getBlobReq.onerror = reject;\n      getBlobReq.onsuccess = function (e) {\n\n        var storedBlob = e.target.result;\n        var url = URL.createObjectURL(storedBlob);\n\n        utils.ajax({\n          url: url,\n          cache: true,\n          binary: true\n        }, function (err, res) {\n          if (err && err.status === 405) {\n            // firefox won\'t let us do that. but firefox doesn\'t\n            // have the blob type bug that Chrome does, so that\'s ok\n            resolve(true);\n          } else {\n            resolve(!!(res && res.type === \'image/png\'));\n            if (err && err.status === 404) {\n              utils.explain404(\'PouchDB is just detecting blob URL support.\');\n            }\n          }\n          URL.revokeObjectURL(url);\n        });\n      };\n    };\n  }).catch(function () {\n    return false; // error, so assume unsupported\n  });\n}\n\nmodule.exports = checkBlobSupport;\n\n},{"../../deps/binary/blob":43,"../../utils":100,"./constants":18}],17:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'../../utils\');\nvar errors = require(\'../../deps/errors\');\nvar preprocessAttachments =\n  require(\'../../deps/docs/preprocessAttachments\');\nvar processDocs = require(\'../../deps/docs/processDocs\');\nvar isLocalId = require(\'../../deps/docs/isLocalId\');\nvar idbUtils = require(\'./utils\');\nvar idbConstants = require(\'./constants\');\n\nvar ATTACH_AND_SEQ_STORE = idbConstants.ATTACH_AND_SEQ_STORE;\nvar ATTACH_STORE = idbConstants.ATTACH_STORE;\nvar BY_SEQ_STORE = idbConstants.BY_SEQ_STORE;\nvar DOC_STORE = idbConstants.DOC_STORE;\nvar LOCAL_STORE = idbConstants.LOCAL_STORE;\nvar META_STORE = idbConstants.META_STORE;\n\nvar compactRevs = idbUtils.compactRevs;\nvar decodeMetadata = idbUtils.decodeMetadata;\nvar encodeMetadata = idbUtils.encodeMetadata;\nvar idbError = idbUtils.idbError;\nvar openTransactionSafely = idbUtils.openTransactionSafely;\n\nfunction idbBulkDocs(req, opts, api, idb, Changes, callback) {\n  var docInfos = req.docs;\n  var txn;\n  var docStore;\n  var bySeqStore;\n  var attachStore;\n  var attachAndSeqStore;\n  var docInfoError;\n  var docCountDelta = 0;\n\n  for (var i = 0, len = docInfos.length; i < len; i++) {\n    var doc = docInfos[i];\n    if (doc._id && isLocalId(doc._id)) {\n      continue;\n    }\n    doc = docInfos[i] = utils.parseDoc(doc, opts.new_edits);\n    if (doc.error && !docInfoError) {\n      docInfoError = doc;\n    }\n  }\n\n  if (docInfoError) {\n    return callback(docInfoError);\n  }\n\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new utils.Map();\n  var preconditionErrored = false;\n  var blobType = api._meta.blobSupport ? \'blob\' : \'base64\';\n\n  preprocessAttachments(docInfos, blobType, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    startTransaction();\n  });\n\n  function startTransaction() {\n\n    var stores = [\n      DOC_STORE, BY_SEQ_STORE,\n      ATTACH_STORE, META_STORE,\n      LOCAL_STORE, ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, \'readwrite\');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    txn = txnResult.txn;\n    txn.onabort = idbError(callback);\n    txn.ontimeout = idbError(callback);\n    txn.oncomplete = complete;\n    docStore = txn.objectStore(DOC_STORE);\n    bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    attachStore = txn.objectStore(ATTACH_STORE);\n    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    verifyAttachments(function (err) {\n      if (err) {\n        preconditionErrored = true;\n        return callback(err);\n      }\n      fetchExistingDocs();\n    });\n  }\n\n  function idbProcessDocs() {\n\n    processDocs(docInfos, api, fetchedDocs, txn, results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs() {\n\n    if (!docInfos.length) {\n      return;\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        idbProcessDocs();\n      }\n    }\n\n    function readMetadata(event) {\n      var metadata = decodeMetadata(event.target.result);\n\n      if (metadata) {\n        fetchedDocs.set(metadata.id, metadata);\n      }\n      checkDone();\n    }\n\n    for (var i = 0, len = docInfos.length; i < len; i++) {\n      var docInfo = docInfos[i];\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        checkDone(); // skip local docs\n        continue;\n      }\n      var req = docStore.get(docInfo.metadata.id);\n      req.onsuccess = readMetadata;\n    }\n  }\n\n  function complete() {\n    if (preconditionErrored) {\n      return;\n    }\n\n    Changes.notify(api._meta.name);\n    api._meta.docCount += docCountDelta;\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n\n    var req = attachStore.get(digest);\n    req.onsuccess = function (e) {\n      if (!e.target.result) {\n        var err = errors.error(errors.MISSING_STUB,\n          \'unknown stub attachment with digest \' +\n          digest);\n        err.status = 412;\n        callback(err);\n      } else {\n        callback();\n      }\n    };\n  }\n\n  function verifyAttachments(finish) {\n\n\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    docCountDelta += delta;\n\n    docInfo.metadata.winningRev = winningRev;\n    docInfo.metadata.deleted = winningRevIsDeleted;\n\n    var doc = docInfo.data;\n    doc._id = docInfo.metadata.id;\n    doc._rev = docInfo.metadata.rev;\n\n    if (newRevIsDeleted) {\n      doc._deleted = true;\n    }\n\n    var hasAttachments = doc._attachments &&\n      Object.keys(doc._attachments).length;\n    if (hasAttachments) {\n      return writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n        isUpdate, resultsIdx, callback);\n    }\n\n    finishDoc(docInfo, winningRev, winningRevIsDeleted,\n      isUpdate, resultsIdx, callback);\n  }\n\n  function autoCompact(docInfo) {\n\n    var revsToDelete = utils.compactTree(docInfo.metadata);\n    compactRevs(revsToDelete, docInfo.metadata.id, txn);\n  }\n\n  function finishDoc(docInfo, winningRev, winningRevIsDeleted,\n                     isUpdate, resultsIdx, callback) {\n\n    var doc = docInfo.data;\n    var metadata = docInfo.metadata;\n\n    doc._doc_id_rev = metadata.id + \'::\' + metadata.rev;\n    delete doc._id;\n    delete doc._rev;\n\n    function afterPutDoc(e) {\n      if (isUpdate && api.auto_compaction) {\n        autoCompact(docInfo);\n      }\n      metadata.seq = e.target.result;\n      // Current _rev is calculated from _rev_tree on read\n      delete metadata.rev;\n      var metadataToStore = encodeMetadata(metadata, winningRev,\n        winningRevIsDeleted);\n      var metaDataReq = docStore.put(metadataToStore);\n      metaDataReq.onsuccess = afterPutMetadata;\n    }\n\n    function afterPutDocError(e) {\n      // ConstraintError, need to update, not put (see #1638 for details)\n      e.preventDefault(); // avoid transaction abort\n      e.stopPropagation(); // avoid transaction onerror\n      var index = bySeqStore.index(\'_doc_id_rev\');\n      var getKeyReq = index.getKey(doc._doc_id_rev);\n      getKeyReq.onsuccess = function (e) {\n        var putReq = bySeqStore.put(doc, e.target.result);\n        putReq.onsuccess = afterPutDoc;\n      };\n    }\n\n    function afterPutMetadata() {\n      results[resultsIdx] = {\n        ok: true,\n        id: metadata.id,\n        rev: winningRev\n      };\n      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);\n      insertAttachmentMappings(docInfo, metadata.seq, callback);\n    }\n\n    var putReq = bySeqStore.put(doc);\n\n    putReq.onsuccess = afterPutDoc;\n    putReq.onerror = afterPutDocError;\n  }\n\n  function writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n                            isUpdate, resultsIdx, callback) {\n\n\n    var doc = docInfo.data;\n\n    var numDone = 0;\n    var attachments = Object.keys(doc._attachments);\n\n    function collectResults() {\n      if (numDone === attachments.length) {\n        finishDoc(docInfo, winningRev, winningRevIsDeleted,\n          isUpdate, resultsIdx, callback);\n      }\n    }\n\n    function attachmentSaved() {\n      numDone++;\n      collectResults();\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        numDone++;\n        collectResults();\n      }\n    });\n  }\n\n  // map seqs to attachment digests, which\n  // we will need later during compaction\n  function insertAttachmentMappings(docInfo, seq, callback) {\n\n    var attsAdded = 0;\n    var attsToAdd = Object.keys(docInfo.data._attachments || {});\n\n    if (!attsToAdd.length) {\n      return callback();\n    }\n\n    function checkDone() {\n      if (++attsAdded === attsToAdd.length) {\n        callback();\n      }\n    }\n\n    function add(att) {\n      var digest = docInfo.data._attachments[att].digest;\n      var req = attachAndSeqStore.put({\n        seq: seq,\n        digestSeq: digest + \'::\' + seq\n      });\n\n      req.onsuccess = checkDone;\n      req.onerror = function (e) {\n        // this callback is for a constaint error, which we ignore\n        // because this docid/rev has already been associated with\n        // the digest (e.g. when new_edits == false)\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n        checkDone();\n      };\n    }\n    for (var i = 0; i < attsToAdd.length; i++) {\n      add(attsToAdd[i]); // do in parallel\n    }\n  }\n\n  function saveAttachment(digest, data, callback) {\n\n\n    var getKeyReq = attachStore.count(digest);\n    getKeyReq.onsuccess = function(e) {\n      var count = e.target.result;\n      if (count) {\n        return callback(); // already exists\n      }\n      var newAtt = {\n        digest: digest,\n        body: data\n      };\n      var putReq = attachStore.put(newAtt);\n      putReq.onsuccess = callback;\n    };\n  }\n}\n\nmodule.exports = idbBulkDocs;\n\n},{"../../deps/docs/isLocalId":53,"../../deps/docs/preprocessAttachments":57,"../../deps/docs/processDocs":58,"../../deps/errors":62,"../../utils":100,"./constants":18,"./utils":20}],18:[function(require,module,exports){\n\'use strict\';\n\n// IndexedDB requires a versioned database structure, so we use the\n// version here to manage migrations.\nexports.ADAPTER_VERSION = 5;\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\n// Keyed by document id\nexports. DOC_STORE = \'document-store\';\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nexports.BY_SEQ_STORE = \'by-sequence\';\n// Where we store attachments\nexports.ATTACH_STORE = \'attach-store\';\n// Where we store many-to-many relations\n// between attachment digests and seqs\nexports.ATTACH_AND_SEQ_STORE = \'attach-seq-store\';\n\n// Where we store database-wide meta data in a single record\n// keyed by id: META_STORE\nexports.META_STORE = \'meta-store\';\n// Where we store local documents\nexports.LOCAL_STORE = \'local-store\';\n// Where we detect blob support\nexports.DETECT_BLOB_SUPPORT_STORE = \'detect-blob-support\';\n},{}],19:[function(require,module,exports){\n(function (process){\n\'use strict\';\n\nvar utils = require(\'../../utils\');\nvar isDeleted = require(\'../../deps/docs/isDeleted\');\nvar isLocalId = require(\'../../deps/docs/isLocalId\');\nvar errors = require(\'../../deps/errors\');\nvar idbUtils = require(\'./utils\');\nvar idbConstants = require(\'./constants\');\nvar idbBulkDocs = require(\'./bulkDocs\');\nvar idbAllDocs = require(\'./allDocs\');\nvar checkBlobSupport = require(\'./blobSupport\');\nvar hasLocalStorage = require(\'../../deps/env/hasLocalStorage\');\nvar calculateWinningRev = require(\'../../deps/merge/winningRev\');\nvar traverseRevTree = require(\'../../deps/merge/traverseRevTree\');\n\nvar ADAPTER_VERSION = idbConstants.ADAPTER_VERSION;\nvar ATTACH_AND_SEQ_STORE = idbConstants.ATTACH_AND_SEQ_STORE;\nvar ATTACH_STORE = idbConstants.ATTACH_STORE;\nvar BY_SEQ_STORE = idbConstants.BY_SEQ_STORE;\nvar DETECT_BLOB_SUPPORT_STORE = idbConstants.DETECT_BLOB_SUPPORT_STORE;\nvar DOC_STORE = idbConstants.DOC_STORE;\nvar LOCAL_STORE = idbConstants.LOCAL_STORE;\nvar META_STORE = idbConstants.META_STORE;\n\nvar applyNext = idbUtils.applyNext;\nvar compactRevs = idbUtils.compactRevs;\nvar decodeDoc = idbUtils.decodeDoc;\nvar decodeMetadata = idbUtils.decodeMetadata;\nvar encodeMetadata = idbUtils.encodeMetadata;\nvar fetchAttachmentsIfNecessary = idbUtils.fetchAttachmentsIfNecessary;\nvar idbError = idbUtils.idbError;\nvar postProcessAttachments = idbUtils.postProcessAttachments;\nvar readBlobData = idbUtils.readBlobData;\nvar taskQueue = idbUtils.taskQueue;\nvar openTransactionSafely = idbUtils.openTransactionSafely;\n\nvar cachedDBs = {};\nvar blobSupportPromise;\n\nfunction IdbPouch(opts, callback) {\n  var api = this;\n\n  taskQueue.queue.push({\n    action: function (thisCallback) {\n      init(api, opts, thisCallback);\n    },\n    callback: callback\n  });\n  applyNext();\n}\n\nfunction init(api, opts, callback) {\n\n  var dbName = opts.name;\n\n  var idb = null;\n  api._meta = null;\n\n  // called when creating a fresh new database\n  function createSchema(db) {\n    var docStore = db.createObjectStore(DOC_STORE, {keyPath : \'id\'});\n    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})\n      .createIndex(\'_doc_id_rev\', \'_doc_id_rev\', {unique: true});\n    db.createObjectStore(ATTACH_STORE, {keyPath: \'digest\'});\n    db.createObjectStore(META_STORE, {keyPath: \'id\', autoIncrement: false});\n    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\n    // added in v2\n    docStore.createIndex(\'deletedOrLocal\', \'deletedOrLocal\', {unique : false});\n\n    // added in v3\n    db.createObjectStore(LOCAL_STORE, {keyPath: \'_id\'});\n\n    // added in v4\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex(\'seq\', \'seq\');\n    attAndSeqStore.createIndex(\'digestSeq\', \'digestSeq\', {unique: true});\n  }\n\n  // migration to version 2\n  // unfortunately "deletedOrLocal" is a misnomer now that we no longer\n  // store local docs in the main doc-store, but whaddyagonnado\n  function addDeletedOrLocalIndex(txn, callback) {\n    var docStore = txn.objectStore(DOC_STORE);\n    docStore.createIndex(\'deletedOrLocal\', \'deletedOrLocal\', {unique : false});\n\n    docStore.openCursor().onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var deleted = isDeleted(metadata);\n        metadata.deletedOrLocal = deleted ? "1" : "0";\n        docStore.put(metadata);\n        cursor.continue();\n      } else {\n        callback();\n      }\n    };\n  }\n\n  // migration to version 3 (part 1)\n  function createLocalStoreSchema(db) {\n    db.createObjectStore(LOCAL_STORE, {keyPath: \'_id\'})\n      .createIndex(\'_doc_id_rev\', \'_doc_id_rev\', {unique: true});\n  }\n\n  // migration to version 3 (part 2)\n  function migrateLocalStore(txn, cb) {\n    var localStore = txn.objectStore(LOCAL_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var docId = metadata.id;\n        var local = isLocalId(docId);\n        var rev = calculateWinningRev(metadata);\n        if (local) {\n          var docIdRev = docId + "::" + rev;\n          // remove all seq entries\n          // associated with this docId\n          var start = docId + "::";\n          var end = docId + "::~";\n          var index = seqStore.index(\'_doc_id_rev\');\n          var range = IDBKeyRange.bound(start, end, false, false);\n          var seqCursor = index.openCursor(range);\n          seqCursor.onsuccess = function (e) {\n            seqCursor = e.target.result;\n            if (!seqCursor) {\n              // done\n              docStore.delete(cursor.primaryKey);\n              cursor.continue();\n            } else {\n              var data = seqCursor.value;\n              if (data._doc_id_rev === docIdRev) {\n                localStore.put(data);\n              }\n              seqStore.delete(seqCursor.primaryKey);\n              seqCursor.continue();\n            }\n          };\n        } else {\n          cursor.continue();\n        }\n      } else if (cb) {\n        cb();\n      }\n    };\n  }\n\n  // migration to version 4 (part 1)\n  function addAttachAndSeqStore(db) {\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex(\'seq\', \'seq\');\n    attAndSeqStore.createIndex(\'digestSeq\', \'digestSeq\', {unique: true});\n  }\n\n  // migration to version 4 (part 2)\n  function migrateAttsAndSeqs(txn, callback) {\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var attStore = txn.objectStore(ATTACH_STORE);\n    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    // need to actually populate the table. this is the expensive part,\n    // so as an optimization, check first that this database even\n    // contains attachments\n    var req = attStore.count();\n    req.onsuccess = function (e) {\n      var count = e.target.result;\n      if (!count) {\n        return callback(); // done\n      }\n\n      seqStore.openCursor().onsuccess = function (e) {\n        var cursor = e.target.result;\n        if (!cursor) {\n          return callback(); // done\n        }\n        var doc = cursor.value;\n        var seq = cursor.primaryKey;\n        var atts = Object.keys(doc._attachments || {});\n        var digestMap = {};\n        for (var j = 0; j < atts.length; j++) {\n          var att = doc._attachments[atts[j]];\n          digestMap[att.digest] = true; // uniq digests, just in case\n        }\n        var digests = Object.keys(digestMap);\n        for (j = 0; j < digests.length; j++) {\n          var digest = digests[j];\n          attAndSeqStore.put({\n            seq: seq,\n            digestSeq: digest + \'::\' + seq\n          });\n        }\n        cursor.continue();\n      };\n    };\n  }\n\n  // migration to version 5\n  // Instead of relying on on-the-fly migration of metadata,\n  // this brings the doc-store to its modern form:\n  // - metadata.winningrev\n  // - metadata.seq\n  // - stringify the metadata when storing it\n  function migrateMetadata(txn) {\n\n    function decodeMetadataCompat(storedObject) {\n      if (!storedObject.data) {\n        // old format, when we didn\'t store it stringified\n        storedObject.deleted = storedObject.deletedOrLocal === \'1\';\n        return storedObject;\n      }\n      return decodeMetadata(storedObject);\n    }\n\n    // ensure that every metadata has a winningRev and seq,\n    // which was previously created on-the-fly but better to migrate\n    var bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (e) {\n      var cursor = e.target.result;\n      if (!cursor) {\n        return; // done\n      }\n      var metadata = decodeMetadataCompat(cursor.value);\n\n      metadata.winningRev = metadata.winningRev ||\n        calculateWinningRev(metadata);\n\n      function fetchMetadataSeq() {\n        // metadata.seq was added post-3.2.0, so if it\'s missing,\n        // we need to fetch it manually\n        var start = metadata.id + \'::\';\n        var end = metadata.id + \'::\\uffff\';\n        var req = bySeqStore.index(\'_doc_id_rev\').openCursor(\n          IDBKeyRange.bound(start, end));\n\n        var metadataSeq = 0;\n        req.onsuccess = function (e) {\n          var cursor = e.target.result;\n          if (!cursor) {\n            metadata.seq = metadataSeq;\n            return onGetMetadataSeq();\n          }\n          var seq = cursor.primaryKey;\n          if (seq > metadataSeq) {\n            metadataSeq = seq;\n          }\n          cursor.continue();\n        };\n      }\n\n      function onGetMetadataSeq() {\n        var metadataToStore = encodeMetadata(metadata,\n          metadata.winningRev, metadata.deleted);\n\n        var req = docStore.put(metadataToStore);\n        req.onsuccess = function () {\n          cursor.continue();\n        };\n      }\n\n      if (metadata.seq) {\n        return onGetMetadataSeq();\n      }\n\n      fetchMetadataSeq();\n    };\n\n  }\n\n  api.type = function () {\n    return \'idb\';\n  };\n\n  api._id = utils.toPromise(function (callback) {\n    callback(null, api._meta.instanceId);\n  });\n\n  api._bulkDocs = function idb_bulkDocs(req, opts, callback) {\n    idbBulkDocs(req, opts, api, idb, IdbPouch.Changes, callback);\n  };\n\n  // First we look up the metadata in the ids database, then we fetch the\n  // current revision(s) from the by sequence store\n  api._get = function idb_get(id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var txn = opts.ctx;\n    if (!txn) {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], \'readonly\');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: txn});\n    }\n\n    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {\n      metadata = decodeMetadata(e.target.result);\n      // we can determine the result here if:\n      // 1. there is no such document\n      // 2. the document is deleted and we don\'t ask about specific rev\n      // When we ask with opts.rev we expect the answer to be either\n      // doc (possibly with _deleted=true) or missing error\n      if (!metadata) {\n        err = errors.error(errors.MISSING_DOC, \'missing\');\n        return finish();\n      }\n      if (isDeleted(metadata) && !opts.rev) {\n        err = errors.error(errors.MISSING_DOC, "deleted");\n        return finish();\n      }\n      var objectStore = txn.objectStore(BY_SEQ_STORE);\n\n      var rev = opts.rev || metadata.winningRev;\n      var key = metadata.id + \'::\' + rev;\n\n      objectStore.index(\'_doc_id_rev\').get(key).onsuccess = function (e) {\n        doc = e.target.result;\n        if (doc) {\n          doc = decodeDoc(doc);\n        }\n        if (!doc) {\n          err = errors.error(errors.MISSING_DOC, \'missing\');\n          return finish();\n        }\n        finish();\n      };\n    };\n  };\n\n  api._getAttachment = function (attachment, opts, callback) {\n    var txn;\n    if (opts.ctx) {\n      txn = opts.ctx;\n    } else {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], \'readonly\');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n\n    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {\n      var body = e.target.result.body;\n      readBlobData(body, type, opts.binary, function (blobData) {\n        callback(null, blobData);\n      });\n    };\n  };\n\n  api._info = function idb_info(callback) {\n\n    if (idb === null || !cachedDBs[dbName]) {\n      var error = new Error(\'db isn\\\'t open\');\n      error.id = \'idbNull\';\n      return callback(error);\n    }\n    var updateSeq;\n    var docCount;\n\n    var txnResult = openTransactionSafely(idb, [BY_SEQ_STORE], \'readonly\');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var cursor = txn.objectStore(BY_SEQ_STORE).openCursor(null, \'prev\');\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      updateSeq = cursor ? cursor.key : 0;\n      // count within the same txn for consistency\n      docCount = api._meta.docCount;\n    };\n\n    txn.oncomplete = function () {\n      callback(null, {\n        doc_count: docCount,\n        update_seq: updateSeq,\n        // for debugging\n        idb_attachment_format: (api._meta.blobSupport ? \'binary\' : \'base64\')\n      });\n    };\n  };\n\n  api._allDocs = function idb_allDocs(opts, callback) {\n    idbAllDocs(opts, api, idb, callback);\n  };\n\n  api._changes = function (opts) {\n    opts = utils.clone(opts);\n\n    if (opts.continuous) {\n      var id = dbName + \':\' + utils.uuid();\n      IdbPouch.Changes.addListener(dbName, id, api, opts);\n      IdbPouch.Changes.notify(dbName);\n      return {\n        cancel: function () {\n          IdbPouch.Changes.removeListener(dbName, id);\n        }\n      };\n    }\n\n    var docIds = opts.doc_ids && new utils.Set(opts.doc_ids);\n\n    opts.since = opts.since || 0;\n    var lastSeq = opts.since;\n\n    var limit = \'limit\' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n    var returnDocs;\n    if (\'returnDocs\' in opts) {\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n\n    var results = [];\n    var numResults = 0;\n    var filter = utils.filterChange(opts);\n    var docIdsToMetadata = new utils.Map();\n\n    var txn;\n    var bySeqStore;\n    var docStore;\n    var docIdRevIndex;\n\n    function onGetCursor(cursor) {\n\n      var doc = decodeDoc(cursor.value);\n      var seq = cursor.key;\n\n      if (docIds && !docIds.has(doc._id)) {\n        return cursor.continue();\n      }\n\n      var metadata;\n\n      function onGetMetadata() {\n        if (metadata.seq !== seq) {\n          // some other seq is later\n          return cursor.continue();\n        }\n\n        lastSeq = seq;\n\n        if (metadata.winningRev === doc._rev) {\n          return onGetWinningDoc(doc);\n        }\n\n        fetchWinningDoc();\n      }\n\n      function fetchWinningDoc() {\n        var docIdRev = doc._id + \'::\' + metadata.winningRev;\n        var req = docIdRevIndex.get(docIdRev);\n        req.onsuccess = function (e) {\n          onGetWinningDoc(decodeDoc(e.target.result));\n        };\n      }\n\n      function onGetWinningDoc(winningDoc) {\n\n        var change = opts.processChange(winningDoc, metadata, opts);\n        change.seq = metadata.seq;\n\n        var filtered = filter(change);\n        if (typeof filtered === \'object\') {\n          return opts.complete(filtered);\n        }\n\n        if (filtered) {\n          numResults++;\n          if (returnDocs) {\n            results.push(change);\n          }\n          // process the attachment immediately\n          // for the benefit of live listeners\n          if (opts.attachments && opts.include_docs) {\n            fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {\n              postProcessAttachments([change], opts.binary).then(function () {\n                opts.onChange(change);\n              });\n            });\n          } else {\n            opts.onChange(change);\n          }\n        }\n        if (numResults !== limit) {\n          cursor.continue();\n        }\n      }\n\n      metadata = docIdsToMetadata.get(doc._id);\n      if (metadata) { // cached\n        return onGetMetadata();\n      }\n      // metadata not cached, have to go fetch it\n      docStore.get(doc._id).onsuccess = function (event) {\n        metadata = decodeMetadata(event.target.result);\n        docIdsToMetadata.set(doc._id, metadata);\n        onGetMetadata();\n      };\n    }\n\n    function onsuccess(event) {\n      var cursor = event.target.result;\n\n      if (!cursor) {\n        return;\n      }\n      onGetCursor(cursor);\n    }\n\n    function fetchChanges() {\n      var objectStores = [DOC_STORE, BY_SEQ_STORE];\n      if (opts.attachments) {\n        objectStores.push(ATTACH_STORE);\n      }\n      var txnResult = openTransactionSafely(idb, objectStores, \'readonly\');\n      if (txnResult.error) {\n        return opts.complete(txnResult.error);\n      }\n      txn = txnResult.txn;\n      txn.onabort = idbError(opts.complete);\n      txn.oncomplete = onTxnComplete;\n\n      bySeqStore = txn.objectStore(BY_SEQ_STORE);\n      docStore = txn.objectStore(DOC_STORE);\n      docIdRevIndex = bySeqStore.index(\'_doc_id_rev\');\n\n      var req;\n\n      if (opts.descending) {\n        req = bySeqStore.openCursor(null, \'prev\');\n      } else {\n        req = bySeqStore.openCursor(IDBKeyRange.lowerBound(opts.since, true));\n      }\n\n      req.onsuccess = onsuccess;\n    }\n\n    fetchChanges();\n\n    function onTxnComplete() {\n\n      function finish() {\n        opts.complete(null, {\n          results: results,\n          last_seq: lastSeq\n        });\n      }\n\n      if (!opts.continuous && opts.attachments) {\n        // cannot guarantee that postProcessing was already done,\n        // so do it again\n        postProcessAttachments(results).then(finish);\n      } else {\n        finish();\n      }\n    }\n  };\n\n  api._close = function (callback) {\n    if (idb === null) {\n      return callback(errors.error(errors.NOT_OPEN));\n    }\n\n    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close\n    // "Returns immediately and closes the connection in a separate thread..."\n    idb.close();\n    delete cachedDBs[dbName];\n    idb = null;\n    callback();\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    var txnResult = openTransactionSafely(idb, [DOC_STORE], \'readonly\');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var req = txn.objectStore(DOC_STORE).get(docId);\n    req.onsuccess = function (event) {\n      var doc = decodeMetadata(event.target.result);\n      if (!doc) {\n        callback(errors.error(errors.MISSING_DOC));\n      } else {\n        callback(null, doc.rev_tree);\n      }\n    };\n  };\n\n  // This function removes revisions of document docId\n  // which are listed in revs and sets this document\n  // revision to to rev_tree\n  api._doCompaction = function (docId, revs, callback) {\n    var stores = [\n      DOC_STORE,\n      BY_SEQ_STORE,\n      ATTACH_STORE,\n      ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, \'readwrite\');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n\n    var docStore = txn.objectStore(DOC_STORE);\n\n    docStore.get(docId).onsuccess = function (event) {\n      var metadata = decodeMetadata(event.target.result);\n      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                         revHash, ctx, opts) {\n        var rev = pos + \'-\' + revHash;\n        if (revs.indexOf(rev) !== -1) {\n          opts.status = \'missing\';\n        }\n      });\n      compactRevs(revs, docId, txn);\n      var winningRev = metadata.winningRev;\n      var deleted = metadata.deleted;\n      txn.objectStore(DOC_STORE).put(\n        encodeMetadata(metadata, winningRev, deleted));\n    };\n    txn.onabort = idbError(callback);\n    txn.oncomplete = function () {\n      callback();\n    };\n  };\n\n\n  api._getLocal = function (id, callback) {\n    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], \'readonly\');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var tx = txnResult.txn;\n    var req = tx.objectStore(LOCAL_STORE).get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var doc = e.target.result;\n      if (!doc) {\n        callback(errors.error(errors.MISSING_DOC));\n      } else {\n        delete doc[\'_doc_id_rev\']; // for backwards compat\n        callback(null, doc);\n      }\n    };\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    if (!oldRev) {\n      doc._rev = \'0-1\';\n    } else {\n      doc._rev = \'0-\' + (parseInt(oldRev.split(\'-\')[1], 10) + 1);\n    }\n\n    var tx = opts.ctx;\n    var ret;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], \'readwrite\');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.onerror = idbError(callback);\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req;\n    if (oldRev) {\n      req = oStore.get(id);\n      req.onsuccess = function (e) {\n        var oldDoc = e.target.result;\n        if (!oldDoc || oldDoc._rev !== oldRev) {\n          callback(errors.error(errors.REV_CONFLICT));\n        } else { // update\n          var req = oStore.put(doc);\n          req.onsuccess = function () {\n            ret = {ok: true, id: doc._id, rev: doc._rev};\n            if (opts.ctx) { // return immediately\n              callback(null, ret);\n            }\n          };\n        }\n      };\n    } else { // new doc\n      req = oStore.add(doc);\n      req.onerror = function (e) {\n        // constraint error, already exists\n        callback(errors.error(errors.REV_CONFLICT));\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n      };\n      req.onsuccess = function () {\n        ret = {ok: true, id: doc._id, rev: doc._rev};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      };\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    var tx = opts.ctx;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], \'readwrite\');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n    var ret;\n    var id = doc._id;\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req = oStore.get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var oldDoc = e.target.result;\n      if (!oldDoc || oldDoc._rev !== doc._rev) {\n        callback(errors.error(errors.MISSING_DOC));\n      } else {\n        oStore.delete(id);\n        ret = {ok: true, id: id, rev: \'0-0\'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      }\n    };\n  };\n\n  api._destroy = function (opts, callback) {\n    IdbPouch.Changes.removeAllListeners(dbName);\n\n    //Close open request for "dbName" database to fix ie delay.\n    if (IdbPouch.openReqList[dbName] && IdbPouch.openReqList[dbName].result) {\n      IdbPouch.openReqList[dbName].result.close();\n      delete cachedDBs[dbName];\n    }\n    var req = indexedDB.deleteDatabase(dbName);\n\n    req.onsuccess = function () {\n      //Remove open request from the list.\n      if (IdbPouch.openReqList[dbName]) {\n        IdbPouch.openReqList[dbName] = null;\n      }\n      if (hasLocalStorage() && (dbName in localStorage)) {\n        delete localStorage[dbName];\n      }\n      callback(null, { \'ok\': true });\n    };\n\n    req.onerror = idbError(callback);\n  };\n\n  var cached = cachedDBs[dbName];\n\n  if (cached) {\n    idb = cached.idb;\n    api._meta = cached.global;\n    process.nextTick(function () {\n      callback(null, api);\n    });\n    return;\n  }\n\n  var req;\n  if (opts.storage) {\n    req = indexedDB.open(dbName, {\n      version: ADAPTER_VERSION,\n      storage: opts.storage\n    });\n  } else {\n    req = indexedDB.open(dbName, ADAPTER_VERSION);\n  }\n\n  if (!(\'openReqList\' in IdbPouch)) {\n    IdbPouch.openReqList = {};\n  }\n  IdbPouch.openReqList[dbName] = req;\n\n  req.onupgradeneeded = function (e) {\n    var db = e.target.result;\n    if (e.oldVersion < 1) {\n      return createSchema(db); // new db, initial schema\n    }\n    // do migrations\n\n    var txn = e.currentTarget.transaction;\n    // these migrations have to be done in this function, before\n    // control is returned to the event loop, because IndexedDB\n\n    if (e.oldVersion < 3) {\n      createLocalStoreSchema(db); // v2 -> v3\n    }\n    if (e.oldVersion < 4) {\n      addAttachAndSeqStore(db); // v3 -> v4\n    }\n\n    var migrations = [\n      addDeletedOrLocalIndex, // v1 -> v2\n      migrateLocalStore,      // v2 -> v3\n      migrateAttsAndSeqs,     // v3 -> v4\n      migrateMetadata         // v4 -> v5\n    ];\n\n    var i = e.oldVersion;\n\n    function next() {\n      var migration = migrations[i - 1];\n      i++;\n      if (migration) {\n        migration(txn, next);\n      }\n    }\n\n    next();\n  };\n\n  req.onsuccess = function (e) {\n\n    idb = e.target.result;\n\n    idb.onversionchange = function () {\n      idb.close();\n      delete cachedDBs[dbName];\n    };\n\n    idb.onabort = function (e) {\n      console.error(\'Database has a global failure\', e.target.error);\n      idb.close();\n      delete cachedDBs[dbName];\n    };\n\n    var txn = idb.transaction([\n      META_STORE,\n      DETECT_BLOB_SUPPORT_STORE,\n      DOC_STORE\n    ], \'readwrite\');\n\n    var req = txn.objectStore(META_STORE).get(META_STORE);\n\n    var blobSupport = null;\n    var docCount = null;\n    var instanceId = null;\n\n    req.onsuccess = function (e) {\n\n      var checkSetupComplete = function () {\n        if (blobSupport === null || docCount === null ||\n            instanceId === null) {\n          return;\n        } else {\n          api._meta = {\n            name: dbName,\n            instanceId: instanceId,\n            blobSupport: blobSupport,\n            docCount: docCount\n          };\n\n          cachedDBs[dbName] = {\n            idb: idb,\n            global: api._meta\n          };\n          callback(null, api);\n        }\n      };\n\n      //\n      // fetch/store the id\n      //\n\n      var meta = e.target.result || {id: META_STORE};\n      if (dbName  + \'_id\' in meta) {\n        instanceId = meta[dbName + \'_id\'];\n        checkSetupComplete();\n      } else {\n        instanceId = utils.uuid();\n        meta[dbName + \'_id\'] = instanceId;\n        txn.objectStore(META_STORE).put(meta).onsuccess = function () {\n          checkSetupComplete();\n        };\n      }\n\n      //\n      // check blob support\n      //\n\n      if (!blobSupportPromise) {\n        // make sure blob support is only checked once\n        blobSupportPromise = checkBlobSupport(txn, idb);\n      }\n\n      blobSupportPromise.then(function (val) {\n        blobSupport = val;\n        checkSetupComplete();\n      });\n\n      //\n      // count docs\n      //\n\n      var index = txn.objectStore(DOC_STORE).index(\'deletedOrLocal\');\n      index.count(IDBKeyRange.only(\'0\')).onsuccess = function (e) {\n        docCount = e.target.result;\n        checkSetupComplete();\n      };\n\n    };\n  };\n\n  req.onerror = function(e) {\n    var msg = \'Failed to open indexedDB, are you in private browsing mode?\';\n    console.error(msg);\n    callback(errors.error(errors.IDB_ERROR, msg));\n  };\n}\n\nIdbPouch.valid = function () {\n  // Issue #2533, we finally gave up on doing bug\n  // detection instead of browser sniffing. Safari brought us\n  // to our knees.\n  var isSafari = typeof openDatabase !== \'undefined\' &&\n    /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) &&\n    !/Chrome/.test(navigator.userAgent) &&\n    !/BlackBerry/.test(navigator.platform);\n\n  // some outdated implementations of IDB that appear on Samsung\n  // and HTC Android devices <4.4 are missing IDBKeyRange\n  return !isSafari && typeof indexedDB !== \'undefined\' &&\n    typeof IDBKeyRange !== \'undefined\';\n};\n\nIdbPouch.Changes = new utils.Changes();\n\nmodule.exports = IdbPouch;\n\n}).call(this,require("/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))\n},{"../../deps/docs/isDeleted":52,"../../deps/docs/isLocalId":53,"../../deps/env/hasLocalStorage":60,"../../deps/errors":62,"../../deps/merge/traverseRevTree":71,"../../deps/merge/winningRev":72,"../../utils":100,"./allDocs":15,"./blobSupport":16,"./bulkDocs":17,"./constants":18,"./utils":20,"/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":110}],20:[function(require,module,exports){\n(function (process){\n\'use strict\';\n\nvar errors = require(\'../../deps/errors\');\nvar utils = require(\'../../utils\');\nvar base64 = require(\'../../deps/binary/base64\');\nvar btoa = base64.btoa;\nvar constants = require(\'./constants\');\nvar readAsBinaryString = require(\'../../deps/binary/readAsBinaryString\');\nvar b64StringToBlob = require(\'../../deps/binary/base64StringToBlobOrBuffer\');\nvar createBlob = require(\'../../deps/binary/blob\');\n\nfunction tryCode(fun, that, args) {\n  try {\n    fun.apply(that, args);\n  } catch (err) { // shouldn\'t happen\n    if (typeof PouchDB !== \'undefined\') {\n      PouchDB.emit(\'error\', err);\n    }\n  }\n}\n\nexports.taskQueue = {\n  running: false,\n  queue: []\n};\n\nexports.applyNext = function () {\n  if (exports.taskQueue.running || !exports.taskQueue.queue.length) {\n    return;\n  }\n  exports.taskQueue.running = true;\n  var item = exports.taskQueue.queue.shift();\n  item.action(function (err, res) {\n    tryCode(item.callback, this, [err, res]);\n    exports.taskQueue.running = false;\n    process.nextTick(exports.applyNext);\n  });\n};\n\nexports.idbError = function (callback) {\n  return function (evt) {\n    var message = \'unknown_error\';\n    if (evt.target && evt.target.error) {\n      message = evt.target.error.name || evt.target.error.message;\n    }\n    callback(errors.error(errors.IDB_ERROR, message, evt.type));\n  };\n};\n\n// Unfortunately, the metadata has to be stringified\n// when it is put into the database, because otherwise\n// IndexedDB can throw errors for deeply-nested objects.\n// Originally we just used JSON.parse/JSON.stringify; now\n// we use this custom vuvuzela library that avoids recursion.\n// If we could do it all over again, we\'d probably use a\n// format for the revision trees other than JSON.\nexports.encodeMetadata = function (metadata, winningRev, deleted) {\n  return {\n    data: utils.safeJsonStringify(metadata),\n    winningRev: winningRev,\n    deletedOrLocal: deleted ? \'1\' : \'0\',\n    seq: metadata.seq, // highest seq for this doc\n    id: metadata.id\n  };\n};\n\nexports.decodeMetadata = function (storedObject) {\n  if (!storedObject) {\n    return null;\n  }\n  var metadata = utils.safeJsonParse(storedObject.data);\n  metadata.winningRev = storedObject.winningRev;\n  metadata.deleted = storedObject.deletedOrLocal === \'1\';\n  metadata.seq = storedObject.seq;\n  return metadata;\n};\n\n// read the doc back out from the database. we don\'t store the\n// _id or _rev because we already have _doc_id_rev.\nexports.decodeDoc = function (doc) {\n  if (!doc) {\n    return doc;\n  }\n  var idx = doc._doc_id_rev.lastIndexOf(\':\');\n  doc._id = doc._doc_id_rev.substring(0, idx - 1);\n  doc._rev = doc._doc_id_rev.substring(idx + 1);\n  delete doc._doc_id_rev;\n  return doc;\n};\n\n// Read a blob from the database, encoding as necessary\n// and translating from base64 if the IDB doesn\'t support\n// native Blobs\nexports.readBlobData = function (body, type, asBlob, callback) {\n  if (asBlob) {\n    if (!body) {\n      callback(createBlob([\'\'], {type: type}));\n    } else if (typeof body !== \'string\') { // we have blob support\n      callback(body);\n    } else { // no blob support\n      callback(b64StringToBlob(body, type));\n    }\n  } else { // as base64 string\n    if (!body) {\n      callback(\'\');\n    } else if (typeof body !== \'string\') { // we have blob support\n      readAsBinaryString(body, function (binary) {\n        callback(btoa(binary));\n      });\n    } else { // no blob support\n      callback(body);\n    }\n  }\n};\n\nexports.fetchAttachmentsIfNecessary = function (doc, opts, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var digest = attObj.digest;\n    var req = txn.objectStore(constants.ATTACH_STORE).get(digest);\n    req.onsuccess = function (e) {\n      attObj.body = e.target.result.body;\n      checkDone();\n    };\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n};\n\n// IDB-specific postprocessing necessary because\n// we don\'t know whether we stored a true Blob or\n// a base64-encoded string, and if it\'s a Blob it\n// needs to be read outside of the transaction context\nexports.postProcessAttachments = function (results, asBlob) {\n  return utils.Promise.all(results.map(function (row) {\n    if (row.doc && row.doc._attachments) {\n      var attNames = Object.keys(row.doc._attachments);\n      return utils.Promise.all(attNames.map(function (att) {\n        var attObj = row.doc._attachments[att];\n        if (!(\'body\' in attObj)) { // already processed\n          return;\n        }\n        var body = attObj.body;\n        var type = attObj.content_type;\n        return new utils.Promise(function (resolve) {\n          exports.readBlobData(body, type, asBlob, function (data) {\n            row.doc._attachments[att] = utils.extend(\n              utils.pick(attObj, [\'digest\', \'content_type\']),\n              {data: data}\n            );\n            resolve();\n          });\n        });\n      }));\n    }\n  }));\n};\n\nexports.compactRevs = function (revs, docId, txn) {\n\n  var possiblyOrphanedDigests = [];\n  var seqStore = txn.objectStore(constants.BY_SEQ_STORE);\n  var attStore = txn.objectStore(constants.ATTACH_STORE);\n  var attAndSeqStore = txn.objectStore(constants.ATTACH_AND_SEQ_STORE);\n  var count = revs.length;\n\n  function checkDone() {\n    count--;\n    if (!count) { // done processing all revs\n      deleteOrphanedAttachments();\n    }\n  }\n\n  function deleteOrphanedAttachments() {\n    if (!possiblyOrphanedDigests.length) {\n      return;\n    }\n    possiblyOrphanedDigests.forEach(function (digest) {\n      var countReq = attAndSeqStore.index(\'digestSeq\').count(\n        IDBKeyRange.bound(\n          digest + \'::\', digest + \'::\\uffff\', false, false));\n      countReq.onsuccess = function (e) {\n        var count = e.target.result;\n        if (!count) {\n          // orphaned\n          attStore.delete(digest);\n        }\n      };\n    });\n  }\n\n  revs.forEach(function (rev) {\n    var index = seqStore.index(\'_doc_id_rev\');\n    var key = docId + "::" + rev;\n    index.getKey(key).onsuccess = function (e) {\n      var seq = e.target.result;\n      if (typeof seq !== \'number\') {\n        return checkDone();\n      }\n      seqStore.delete(seq);\n\n      var cursor = attAndSeqStore.index(\'seq\')\n        .openCursor(IDBKeyRange.only(seq));\n\n      cursor.onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor) {\n          var digest = cursor.value.digestSeq.split(\'::\')[0];\n          possiblyOrphanedDigests.push(digest);\n          attAndSeqStore.delete(cursor.primaryKey);\n          cursor.continue();\n        } else { // done\n          checkDone();\n        }\n      };\n    };\n  });\n};\n\nexports.openTransactionSafely = function (idb, stores, mode) {\n  try {\n    return {\n      txn: idb.transaction(stores, mode)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n};\n\n}).call(this,require("/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))\n},{"../../deps/binary/base64":39,"../../deps/binary/base64StringToBlobOrBuffer":40,"../../deps/binary/blob":43,"../../deps/binary/readAsBinaryString":49,"../../deps/errors":62,"../../utils":100,"./constants":18,"/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":110}],21:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'../../utils\');\nvar errors = require(\'../../deps/errors\');\nvar preprocessAttachments =\n  require(\'../../deps/docs/preprocessAttachments\');\nvar isLocalId = require(\'../../deps/docs/isLocalId\');\nvar processDocs = require(\'../../deps/docs/processDocs\');\n\nvar websqlUtils = require(\'./utils\');\nvar websqlConstants = require(\'./constants\');\n\nvar DOC_STORE = websqlConstants.DOC_STORE;\nvar BY_SEQ_STORE = websqlConstants.BY_SEQ_STORE;\nvar ATTACH_STORE = websqlConstants.ATTACH_STORE;\nvar ATTACH_AND_SEQ_STORE = websqlConstants.ATTACH_AND_SEQ_STORE;\n\nvar select = websqlUtils.select;\nvar stringifyDoc = websqlUtils.stringifyDoc;\nvar compactRevs = websqlUtils.compactRevs;\nvar unknownError = websqlUtils.websqlError;\n\nfunction websqlBulkDocs(req, opts, api, db, Changes, callback) {\n  var newEdits = opts.new_edits;\n  var userDocs = req.docs;\n\n  // Parse the docs, give them a sequence number for the result\n  var docInfos = userDocs.map(function (doc) {\n    if (doc._id && isLocalId(doc._id)) {\n      return doc;\n    }\n    var newDoc = utils.parseDoc(doc, newEdits);\n    return newDoc;\n  });\n\n  var docInfoErrors = docInfos.filter(function (docInfo) {\n    return docInfo.error;\n  });\n  if (docInfoErrors.length) {\n    return callback(docInfoErrors[0]);\n  }\n\n  var tx;\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new utils.Map();\n\n  var preconditionErrored;\n  function complete() {\n    if (preconditionErrored) {\n      return callback(preconditionErrored);\n    }\n    Changes.notify(api._name);\n    api._docCount = -1; // invalidate\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n    var sql = \'SELECT count(*) as cnt FROM \' + ATTACH_STORE +\n      \' WHERE digest=?\';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.item(0).cnt === 0) {\n        var err = errors.error(errors.MISSING_STUB,\n          \'unknown stub attachment with digest \' +\n          digest);\n        callback(err);\n      } else {\n        callback();\n      }\n    });\n  }\n\n  function verifyAttachments(finish) {\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    function finish() {\n      var data = docInfo.data;\n      var deletedInt = newRevIsDeleted ? 1 : 0;\n\n      var id = data._id;\n      var rev = data._rev;\n      var json = stringifyDoc(data);\n      var sql = \'INSERT INTO \' + BY_SEQ_STORE +\n        \' (doc_id, rev, json, deleted) VALUES (?, ?, ?, ?);\';\n      var sqlArgs = [id, rev, json, deletedInt];\n\n      // map seqs to attachment digests, which\n      // we will need later during compaction\n      function insertAttachmentMappings(seq, callback) {\n        var attsAdded = 0;\n        var attsToAdd = Object.keys(data._attachments || {});\n\n        if (!attsToAdd.length) {\n          return callback();\n        }\n        function checkDone() {\n          if (++attsAdded === attsToAdd.length) {\n            callback();\n          }\n          return false; // ack handling a constraint error\n        }\n        function add(att) {\n          var sql = \'INSERT INTO \' + ATTACH_AND_SEQ_STORE +\n            \' (digest, seq) VALUES (?,?)\';\n          var sqlArgs = [data._attachments[att].digest, seq];\n          tx.executeSql(sql, sqlArgs, checkDone, checkDone);\n          // second callback is for a constaint error, which we ignore\n          // because this docid/rev has already been associated with\n          // the digest (e.g. when new_edits == false)\n        }\n        for (var i = 0; i < attsToAdd.length; i++) {\n          add(attsToAdd[i]); // do in parallel\n        }\n      }\n\n      tx.executeSql(sql, sqlArgs, function (tx, result) {\n        var seq = result.insertId;\n        insertAttachmentMappings(seq, function () {\n          dataWritten(tx, seq);\n        });\n      }, function () {\n        // constraint error, recover by updating instead (see #1638)\n        var fetchSql = select(\'seq\', BY_SEQ_STORE, null,\n          \'doc_id=? AND rev=?\');\n        tx.executeSql(fetchSql, [id, rev], function (tx, res) {\n          var seq = res.rows.item(0).seq;\n          var sql = \'UPDATE \' + BY_SEQ_STORE +\n            \' SET json=?, deleted=? WHERE doc_id=? AND rev=?;\';\n          var sqlArgs = [json, deletedInt, id, rev];\n          tx.executeSql(sql, sqlArgs, function (tx) {\n            insertAttachmentMappings(seq, function () {\n              dataWritten(tx, seq);\n            });\n          });\n        });\n        return false; // ack that we\'ve handled the error\n      });\n    }\n\n    function collectResults(attachmentErr) {\n      if (!err) {\n        if (attachmentErr) {\n          err = attachmentErr;\n          callback(err);\n        } else if (recv === attachments.length) {\n          finish();\n        }\n      }\n    }\n\n    var err = null;\n    var recv = 0;\n\n    docInfo.data._id = docInfo.metadata.id;\n    docInfo.data._rev = docInfo.metadata.rev;\n    var attachments = Object.keys(docInfo.data._attachments || {});\n\n\n    if (newRevIsDeleted) {\n      docInfo.data._deleted = true;\n    }\n\n    function attachmentSaved(err) {\n      recv++;\n      collectResults(err);\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        recv++;\n        collectResults();\n      }\n    });\n\n    if (!attachments.length) {\n      finish();\n    }\n\n    function autoCompact() {\n      if (!isUpdate || !api.auto_compaction) {\n        return; // nothing to do\n      }\n      var id = docInfo.metadata.id;\n      var revsToDelete = utils.compactTree(docInfo.metadata);\n      compactRevs(revsToDelete, id, tx);\n    }\n\n    function dataWritten(tx, seq) {\n      autoCompact();\n      docInfo.metadata.seq = seq;\n      delete docInfo.metadata.rev;\n\n      var sql = isUpdate ?\n      \'UPDATE \' + DOC_STORE +\n      \' SET json=?, max_seq=?, winningseq=\' +\n      \'(SELECT seq FROM \' + BY_SEQ_STORE +\n      \' WHERE doc_id=\' + DOC_STORE + \'.id AND rev=?) WHERE id=?\'\n        : \'INSERT INTO \' + DOC_STORE +\n      \' (id, winningseq, max_seq, json) VALUES (?,?,?,?);\';\n      var metadataStr = utils.safeJsonStringify(docInfo.metadata);\n      var id = docInfo.metadata.id;\n      var params = isUpdate ?\n        [metadataStr, seq, winningRev, id] :\n        [id, seq, seq, metadataStr];\n      tx.executeSql(sql, params, function () {\n        results[resultsIdx] = {\n          ok: true,\n          id: docInfo.metadata.id,\n          rev: winningRev\n        };\n        fetchedDocs.set(id, docInfo.metadata);\n        callback();\n      });\n    }\n  }\n\n  function websqlProcessDocs() {\n    processDocs(docInfos, api, fetchedDocs, tx, results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs(callback) {\n    if (!docInfos.length) {\n      return callback();\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        callback();\n      }\n    }\n\n    docInfos.forEach(function (docInfo) {\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        return checkDone(); // skip local docs\n      }\n      var id = docInfo.metadata.id;\n      tx.executeSql(\'SELECT json FROM \' + DOC_STORE +\n      \' WHERE id = ?\', [id], function (tx, result) {\n        if (result.rows.length) {\n          var metadata = utils.safeJsonParse(result.rows.item(0).json);\n          fetchedDocs.set(id, metadata);\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function saveAttachment(digest, data, callback) {\n    var sql = \'SELECT digest FROM \' + ATTACH_STORE + \' WHERE digest=?\';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.length) { // attachment already exists\n        return callback();\n      }\n      // we could just insert before selecting and catch the error,\n      // but my hunch is that it\'s cheaper not to serialize the blob\n      // from JS to C if we don\'t have to (TODO: confirm this)\n      sql = \'INSERT INTO \' + ATTACH_STORE +\n      \' (digest, body, escaped) VALUES (?,?,1)\';\n      tx.executeSql(sql, [digest, websqlUtils.escapeBlob(data)], function () {\n        callback();\n      }, function () {\n        // ignore constaint errors, means it already exists\n        callback();\n        return false; // ack we handled the error\n      });\n    });\n  }\n\n  preprocessAttachments(docInfos, \'binary\', function (err) {\n    if (err) {\n      return callback(err);\n    }\n    db.transaction(function (txn) {\n      tx = txn;\n      verifyAttachments(function (err) {\n        if (err) {\n          preconditionErrored = err;\n        } else {\n          fetchExistingDocs(websqlProcessDocs);\n        }\n      });\n    }, unknownError(callback), complete);\n  });\n}\n\nmodule.exports = websqlBulkDocs;\n\n},{"../../deps/docs/isLocalId":53,"../../deps/docs/preprocessAttachments":57,"../../deps/docs/processDocs":58,"../../deps/errors":62,"../../utils":100,"./constants":22,"./utils":24}],22:[function(require,module,exports){\n\'use strict\';\n\nfunction quote(str) {\n  return "\'" + str + "\'";\n}\n\nexports.ADAPTER_VERSION = 7; // used to manage migrations\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\nexports.DOC_STORE = quote(\'document-store\');\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nexports.BY_SEQ_STORE = quote(\'by-sequence\');\n// Where we store attachments\nexports.ATTACH_STORE = quote(\'attach-store\');\nexports.LOCAL_STORE = quote(\'local-store\');\nexports.META_STORE = quote(\'metadata-store\');\n// where we store many-to-many relations between attachment\n// digests and seqs\nexports.ATTACH_AND_SEQ_STORE = quote(\'attach-seq-store\');\n\n\n},{}],23:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'../../utils\');\nvar isDeleted = require(\'../../deps/docs/isDeleted\');\nvar isLocalId = require(\'../../deps/docs/isLocalId\');\nvar errors = require(\'../../deps/errors\');\nvar parseHexString = require(\'../../deps/parseHex\');\nvar binStringToBlob = require(\'../../deps/binary/binaryStringToBlobOrBuffer\');\nvar hasLocalStorage = require(\'../../deps/env/hasLocalStorage\');\nvar collectConflicts = require(\'../../deps/merge/collectConflicts\');\nvar traverseRevTree = require(\'../../deps/merge/traverseRevTree\');\n\nvar websqlConstants = require(\'./constants\');\nvar websqlUtils = require(\'./utils\');\nvar websqlBulkDocs = require(\'./bulkDocs\');\n\nvar ADAPTER_VERSION = websqlConstants.ADAPTER_VERSION;\nvar DOC_STORE = websqlConstants.DOC_STORE;\nvar BY_SEQ_STORE = websqlConstants.BY_SEQ_STORE;\nvar ATTACH_STORE = websqlConstants.ATTACH_STORE;\nvar LOCAL_STORE = websqlConstants.LOCAL_STORE;\nvar META_STORE = websqlConstants.META_STORE;\nvar ATTACH_AND_SEQ_STORE = websqlConstants.ATTACH_AND_SEQ_STORE;\n\nvar qMarks = websqlUtils.qMarks;\nvar stringifyDoc = websqlUtils.stringifyDoc;\nvar unstringifyDoc = websqlUtils.unstringifyDoc;\nvar select = websqlUtils.select;\nvar compactRevs = websqlUtils.compactRevs;\nvar websqlError = websqlUtils.websqlError;\nvar getSize = websqlUtils.getSize;\nvar openDB = websqlUtils.openDB;\n\nfunction fetchAttachmentsIfNecessary(doc, opts, api, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var attOpts = {binary: opts.binary, ctx: txn};\n    api._getAttachment(attObj, attOpts, function (_, data) {\n      doc._attachments[att] = utils.extend(\n        utils.pick(attObj, [\'digest\', \'content_type\']),\n        { data: data }\n      );\n      checkDone();\n    });\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\nvar POUCH_VERSION = 1;\n\n// these indexes cover the ground for most allDocs queries\nvar BY_SEQ_STORE_DELETED_INDEX_SQL =\n  \'CREATE INDEX IF NOT EXISTS \\\'by-seq-deleted-idx\\\' ON \' +\n  BY_SEQ_STORE + \' (seq, deleted)\';\nvar BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL =\n  \'CREATE UNIQUE INDEX IF NOT EXISTS \\\'by-seq-doc-id-rev\\\' ON \' +\n    BY_SEQ_STORE + \' (doc_id, rev)\';\nvar DOC_STORE_WINNINGSEQ_INDEX_SQL =\n  \'CREATE INDEX IF NOT EXISTS \\\'doc-winningseq-idx\\\' ON \' +\n  DOC_STORE + \' (winningseq)\';\nvar ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL =\n  \'CREATE INDEX IF NOT EXISTS \\\'attach-seq-seq-idx\\\' ON \' +\n    ATTACH_AND_SEQ_STORE + \' (seq)\';\nvar ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL =\n  \'CREATE UNIQUE INDEX IF NOT EXISTS \\\'attach-seq-digest-idx\\\' ON \' +\n    ATTACH_AND_SEQ_STORE + \' (digest, seq)\';\n\nvar DOC_STORE_AND_BY_SEQ_JOINER = BY_SEQ_STORE +\n  \'.seq = \' + DOC_STORE + \'.winningseq\';\n\nvar SELECT_DOCS = BY_SEQ_STORE + \'.seq AS seq, \' +\n  BY_SEQ_STORE + \'.deleted AS deleted, \' +\n  BY_SEQ_STORE + \'.json AS data, \' +\n  BY_SEQ_STORE + \'.rev AS rev, \' +\n  DOC_STORE + \'.json AS metadata\';\n\nfunction WebSqlPouch(opts, callback) {\n  var api = this;\n  var instanceId = null;\n  var size = getSize(opts);\n  var idRequests = [];\n  var encoding;\n\n  api._docCount = -1; // cache sqlite count(*) for performance\n  api._name = opts.name;\n\n  var openDBResult = openDB({\n    name: api._name,\n    version: POUCH_VERSION,\n    description: api._name,\n    size: size,\n    location: opts.location,\n    createFromLocation: opts.createFromLocation,\n    androidDatabaseImplementation: opts.androidDatabaseImplementation\n  });\n  if (openDBResult.error) {\n    return websqlError(callback)(openDBResult.error);\n  }\n  var db = openDBResult.db;\n  if (typeof db.readTransaction !== \'function\') {\n    // doesn\'t exist in sqlite plugin\n    db.readTransaction = db.transaction;\n  }\n\n  function dbCreated() {\n    // note the db name in case the browser upgrades to idb\n    if (hasLocalStorage()) {\n      window.localStorage[\'_pouch__websqldb_\' + api._name] = true;\n    }\n    callback(null, api);\n  }\n\n  // In this migration, we added the \'deleted\' and \'local\' columns to the\n  // by-seq and doc store tables.\n  // To preserve existing user data, we re-process all the existing JSON\n  // and add these values.\n  // Called migration2 because it corresponds to adapter version (db_version) #2\n  function runMigration2(tx, callback) {\n    // index used for the join in the allDocs query\n    tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n\n    tx.executeSql(\'ALTER TABLE \' + BY_SEQ_STORE +\n      \' ADD COLUMN deleted TINYINT(1) DEFAULT 0\', [], function () {\n      tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n      tx.executeSql(\'ALTER TABLE \' + DOC_STORE +\n        \' ADD COLUMN local TINYINT(1) DEFAULT 0\', [], function () {\n        tx.executeSql(\'CREATE INDEX IF NOT EXISTS \\\'doc-store-local-idx\\\' ON \' +\n          DOC_STORE + \' (local, id)\');\n\n        var sql = \'SELECT \' + DOC_STORE + \'.winningseq AS seq, \' + DOC_STORE +\n          \'.json AS metadata FROM \' + BY_SEQ_STORE + \' JOIN \' + DOC_STORE +\n          \' ON \' + BY_SEQ_STORE + \'.seq = \' + DOC_STORE + \'.winningseq\';\n\n        tx.executeSql(sql, [], function (tx, result) {\n\n          var deleted = [];\n          var local = [];\n\n          for (var i = 0; i < result.rows.length; i++) {\n            var item = result.rows.item(i);\n            var seq = item.seq;\n            var metadata = JSON.parse(item.metadata);\n            if (isDeleted(metadata)) {\n              deleted.push(seq);\n            }\n            if (isLocalId(metadata.id)) {\n              local.push(metadata.id);\n            }\n          }\n          tx.executeSql(\'UPDATE \' + DOC_STORE + \'SET local = 1 WHERE id IN \' +\n            qMarks(local.length), local, function () {\n            tx.executeSql(\'UPDATE \' + BY_SEQ_STORE +\n              \' SET deleted = 1 WHERE seq IN \' +\n              qMarks(deleted.length), deleted, callback);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we make all the local docs unversioned\n  function runMigration3(tx, callback) {\n    var local = \'CREATE TABLE IF NOT EXISTS \' + LOCAL_STORE +\n      \' (id UNIQUE, rev, json)\';\n    tx.executeSql(local, [], function () {\n      var sql = \'SELECT \' + DOC_STORE + \'.id AS id, \' +\n        BY_SEQ_STORE + \'.json AS data \' +\n        \'FROM \' + BY_SEQ_STORE + \' JOIN \' +\n        DOC_STORE + \' ON \' + BY_SEQ_STORE + \'.seq = \' +\n        DOC_STORE + \'.winningseq WHERE local = 1\';\n      tx.executeSql(sql, [], function (tx, res) {\n        var rows = [];\n        for (var i = 0; i < res.rows.length; i++) {\n          rows.push(res.rows.item(i));\n        }\n        function doNext() {\n          if (!rows.length) {\n            return callback(tx);\n          }\n          var row = rows.shift();\n          var rev = JSON.parse(row.data)._rev;\n          tx.executeSql(\'INSERT INTO \' + LOCAL_STORE +\n              \' (id, rev, json) VALUES (?,?,?)\',\n              [row.id, rev, row.data], function (tx) {\n            tx.executeSql(\'DELETE FROM \' + DOC_STORE + \' WHERE id=?\',\n                [row.id], function (tx) {\n              tx.executeSql(\'DELETE FROM \' + BY_SEQ_STORE + \' WHERE seq=?\',\n                  [row.seq], function () {\n                doNext();\n              });\n            });\n          });\n        }\n        doNext();\n      });\n    });\n  }\n\n  // in this migration, we remove doc_id_rev and just use rev\n  function runMigration4(tx, callback) {\n\n    function updateRows(rows) {\n      function doNext() {\n        if (!rows.length) {\n          return callback(tx);\n        }\n        var row = rows.shift();\n        var doc_id_rev = parseHexString(row.hex, encoding);\n        var idx = doc_id_rev.lastIndexOf(\'::\');\n        var doc_id = doc_id_rev.substring(0, idx);\n        var rev = doc_id_rev.substring(idx + 2);\n        var sql = \'UPDATE \' + BY_SEQ_STORE +\n          \' SET doc_id=?, rev=? WHERE doc_id_rev=?\';\n        tx.executeSql(sql, [doc_id, rev, doc_id_rev], function () {\n          doNext();\n        });\n      }\n      doNext();\n    }\n\n    var sql = \'ALTER TABLE \' + BY_SEQ_STORE + \' ADD COLUMN doc_id\';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = \'ALTER TABLE \' + BY_SEQ_STORE + \' ADD COLUMN rev\';\n      tx.executeSql(sql, [], function (tx) {\n        tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL, [], function (tx) {\n          var sql = \'SELECT hex(doc_id_rev) as hex FROM \' + BY_SEQ_STORE;\n          tx.executeSql(sql, [], function (tx, res) {\n            var rows = [];\n            for (var i = 0; i < res.rows.length; i++) {\n              rows.push(res.rows.item(i));\n            }\n            updateRows(rows);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we add the attach_and_seq table\n  // for issue #2818\n  function runMigration5(tx, callback) {\n\n    function migrateAttsAndSeqs(tx) {\n      // need to actually populate the table. this is the expensive part,\n      // so as an optimization, check first that this database even\n      // contains attachments\n      var sql = \'SELECT COUNT(*) AS cnt FROM \' + ATTACH_STORE;\n      tx.executeSql(sql, [], function (tx, res) {\n        var count = res.rows.item(0).cnt;\n        if (!count) {\n          return callback(tx);\n        }\n\n        var offset = 0;\n        var pageSize = 10;\n        function nextPage() {\n          var sql = select(\n            SELECT_DOCS + \', \' + DOC_STORE + \'.id AS id\',\n            [DOC_STORE, BY_SEQ_STORE],\n            DOC_STORE_AND_BY_SEQ_JOINER,\n            null,\n            DOC_STORE + \'.id \'\n          );\n          sql += \' LIMIT \' + pageSize + \' OFFSET \' + offset;\n          offset += pageSize;\n          tx.executeSql(sql, [], function (tx, res) {\n            if (!res.rows.length) {\n              return callback(tx);\n            }\n            var digestSeqs = {};\n            function addDigestSeq(digest, seq) {\n              // uniq digest/seq pairs, just in case there are dups\n              var seqs = digestSeqs[digest] = (digestSeqs[digest] || []);\n              if (seqs.indexOf(seq) === -1) {\n                seqs.push(seq);\n              }\n            }\n            for (var i = 0; i < res.rows.length; i++) {\n              var row = res.rows.item(i);\n              var doc = unstringifyDoc(row.data, row.id, row.rev);\n              var atts = Object.keys(doc._attachments || {});\n              for (var j = 0; j < atts.length; j++) {\n                var att = doc._attachments[atts[j]];\n                addDigestSeq(att.digest, row.seq);\n              }\n            }\n            var digestSeqPairs = [];\n            Object.keys(digestSeqs).forEach(function (digest) {\n              var seqs = digestSeqs[digest];\n              seqs.forEach(function (seq) {\n                digestSeqPairs.push([digest, seq]);\n              });\n            });\n            if (!digestSeqPairs.length) {\n              return nextPage();\n            }\n            var numDone = 0;\n            digestSeqPairs.forEach(function (pair) {\n              var sql = \'INSERT INTO \' + ATTACH_AND_SEQ_STORE +\n                \' (digest, seq) VALUES (?,?)\';\n              tx.executeSql(sql, pair, function () {\n                if (++numDone === digestSeqPairs.length) {\n                  nextPage();\n                }\n              });\n            });\n          });\n        }\n        nextPage();\n      });\n    }\n\n    var attachAndRev = \'CREATE TABLE IF NOT EXISTS \' +\n      ATTACH_AND_SEQ_STORE + \' (digest, seq INTEGER)\';\n    tx.executeSql(attachAndRev, [], function (tx) {\n      tx.executeSql(\n        ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL, [], function (tx) {\n          tx.executeSql(\n            ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL, [],\n            migrateAttsAndSeqs);\n        });\n    });\n  }\n\n  // in this migration, we use escapeBlob() and unescapeBlob()\n  // instead of reading out the binary as HEX, which is slow\n  function runMigration6(tx, callback) {\n    var sql = \'ALTER TABLE \' + ATTACH_STORE +\n      \' ADD COLUMN escaped TINYINT(1) DEFAULT 0\';\n    tx.executeSql(sql, [], callback);\n  }\n\n  // issue #3136, in this migration we need a "latest seq" as well\n  // as the "winning seq" in the doc store\n  function runMigration7(tx, callback) {\n    var sql = \'ALTER TABLE \' + DOC_STORE +\n      \' ADD COLUMN max_seq INTEGER\';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = \'UPDATE \' + DOC_STORE + \' SET max_seq=(SELECT MAX(seq) FROM \' +\n        BY_SEQ_STORE + \' WHERE doc_id=id)\';\n      tx.executeSql(sql, [], function (tx) {\n        // add unique index after filling, else we\'ll get a constraint\n        // error when we do the ALTER TABLE\n        var sql =\n          \'CREATE UNIQUE INDEX IF NOT EXISTS \\\'doc-max-seq-idx\\\' ON \' +\n          DOC_STORE + \' (max_seq)\';\n        tx.executeSql(sql, [], callback);\n      });\n    });\n  }\n\n  function checkEncoding(tx, cb) {\n    // UTF-8 on chrome/android, UTF-16 on safari < 7.1\n    tx.executeSql(\'SELECT HEX("a") AS hex\', [], function (tx, res) {\n        var hex = res.rows.item(0).hex;\n        encoding = hex.length === 2 ? \'UTF-8\' : \'UTF-16\';\n        cb();\n      }\n    );\n  }\n\n  function onGetInstanceId() {\n    while (idRequests.length > 0) {\n      var idCallback = idRequests.pop();\n      idCallback(null, instanceId);\n    }\n  }\n\n  function onGetVersion(tx, dbVersion) {\n    if (dbVersion === 0) {\n      // initial schema\n\n      var meta = \'CREATE TABLE IF NOT EXISTS \' + META_STORE +\n        \' (dbid, db_version INTEGER)\';\n      var attach = \'CREATE TABLE IF NOT EXISTS \' + ATTACH_STORE +\n        \' (digest UNIQUE, escaped TINYINT(1), body BLOB)\';\n      var attachAndRev = \'CREATE TABLE IF NOT EXISTS \' +\n        ATTACH_AND_SEQ_STORE + \' (digest, seq INTEGER)\';\n      // TODO: migrate winningseq to INTEGER\n      var doc = \'CREATE TABLE IF NOT EXISTS \' + DOC_STORE +\n        \' (id unique, json, winningseq, max_seq INTEGER UNIQUE)\';\n      var seq = \'CREATE TABLE IF NOT EXISTS \' + BY_SEQ_STORE +\n        \' (seq INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, \' +\n        \'json, deleted TINYINT(1), doc_id, rev)\';\n      var local = \'CREATE TABLE IF NOT EXISTS \' + LOCAL_STORE +\n        \' (id UNIQUE, rev, json)\';\n\n      // creates\n      tx.executeSql(attach);\n      tx.executeSql(local);\n      tx.executeSql(attachAndRev, [], function () {\n        tx.executeSql(ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL);\n        tx.executeSql(ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL);\n      });\n      tx.executeSql(doc, [], function () {\n        tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n        tx.executeSql(seq, [], function () {\n          tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n          tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL);\n          tx.executeSql(meta, [], function () {\n            // mark the db version, and new dbid\n            var initSeq = \'INSERT INTO \' + META_STORE +\n              \' (db_version, dbid) VALUES (?,?)\';\n            instanceId = utils.uuid();\n            var initSeqArgs = [ADAPTER_VERSION, instanceId];\n            tx.executeSql(initSeq, initSeqArgs, function () {\n              onGetInstanceId();\n            });\n          });\n        });\n      });\n    } else { // version > 0\n\n      var setupDone = function () {\n        var migrated = dbVersion < ADAPTER_VERSION;\n        if (migrated) {\n          // update the db version within this transaction\n          tx.executeSql(\'UPDATE \' + META_STORE + \' SET db_version = \' +\n            ADAPTER_VERSION);\n        }\n        // notify db.id() callers\n        var sql = \'SELECT dbid FROM \' + META_STORE;\n        tx.executeSql(sql, [], function (tx, result) {\n          instanceId = result.rows.item(0).dbid;\n          onGetInstanceId();\n        });\n      };\n\n      // would love to use promises here, but then websql\n      // ends the transaction early\n      var tasks = [\n        runMigration2,\n        runMigration3,\n        runMigration4,\n        runMigration5,\n        runMigration6,\n        runMigration7,\n        setupDone\n      ];\n\n      // run each migration sequentially\n      var i = dbVersion;\n      var nextMigration = function (tx) {\n        tasks[i - 1](tx, nextMigration);\n        i++;\n      };\n      nextMigration(tx);\n    }\n  }\n\n  function setup() {\n    db.transaction(function (tx) {\n      // first check the encoding\n      checkEncoding(tx, function () {\n        // then get the version\n        fetchVersion(tx);\n      });\n    }, websqlError(callback), dbCreated);\n  }\n\n  function fetchVersion(tx) {\n    var sql = \'SELECT sql FROM sqlite_master WHERE tbl_name = \' + META_STORE;\n    tx.executeSql(sql, [], function (tx, result) {\n      if (!result.rows.length) {\n        // database hasn\'t even been created yet (version 0)\n        onGetVersion(tx, 0);\n      } else if (!/db_version/.test(result.rows.item(0).sql)) {\n        // table was created, but without the new db_version column,\n        // so add it.\n        tx.executeSql(\'ALTER TABLE \' + META_STORE +\n          \' ADD COLUMN db_version INTEGER\', [], function () {\n          // before version 2, this column didn\'t even exist\n          onGetVersion(tx, 1);\n        });\n      } else { // column exists, we can safely get it\n        tx.executeSql(\'SELECT db_version FROM \' + META_STORE,\n          [], function (tx, result) {\n          var dbVersion = result.rows.item(0).db_version;\n          onGetVersion(tx, dbVersion);\n        });\n      }\n    });\n  }\n\n  if (utils.isCordova()) {\n    //to wait until custom api is made in pouch.adapters before doing setup\n    window.addEventListener(api._name + \'_pouch\', function cordova_init() {\n      window.removeEventListener(api._name + \'_pouch\', cordova_init, false);\n      setup();\n    }, false);\n  } else {\n    setup();\n  }\n\n  api.type = function () {\n    return \'websql\';\n  };\n\n  api._id = utils.toPromise(function (callback) {\n    callback(null, instanceId);\n  });\n\n  api._info = function (callback) {\n    db.readTransaction(function (tx) {\n      countDocs(tx, function (docCount) {\n        var sql = \'SELECT MAX(seq) AS seq FROM \' + BY_SEQ_STORE;\n        tx.executeSql(sql, [], function (tx, res) {\n          var updateSeq = res.rows.item(0).seq || 0;\n          callback(null, {\n            doc_count: docCount,\n            update_seq: updateSeq,\n            // for debugging\n            sqlite_plugin: db._sqlitePlugin,\n            websql_encoding: encoding\n          });\n        });\n      });\n    }, websqlError(callback));\n  };\n\n  api._bulkDocs = function (req, opts, callback) {\n    websqlBulkDocs(req, opts, api, db, WebSqlPouch.Changes, callback);\n  };\n\n  api._get = function (id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var tx = opts.ctx;\n    if (!tx) {\n      return db.readTransaction(function (txn) {\n        api._get(id, utils.extend({ctx: txn}, opts), callback);\n      });\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: tx});\n    }\n\n    var sql;\n    var sqlArgs;\n    if (opts.rev) {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE, BY_SEQ_STORE],\n        DOC_STORE + \'.id=\' + BY_SEQ_STORE + \'.doc_id\',\n        [BY_SEQ_STORE + \'.doc_id=?\', BY_SEQ_STORE + \'.rev=?\']);\n      sqlArgs = [id, opts.rev];\n    } else {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE, BY_SEQ_STORE],\n        DOC_STORE_AND_BY_SEQ_JOINER,\n        DOC_STORE + \'.id=?\');\n      sqlArgs = [id];\n    }\n    tx.executeSql(sql, sqlArgs, function (a, results) {\n      if (!results.rows.length) {\n        err = errors.error(errors.MISSING_DOC, \'missing\');\n        return finish();\n      }\n      var item = results.rows.item(0);\n      metadata = utils.safeJsonParse(item.metadata);\n      if (item.deleted && !opts.rev) {\n        err = errors.error(errors.MISSING_DOC, \'deleted\');\n        return finish();\n      }\n      doc = unstringifyDoc(item.data, metadata.id, item.rev);\n      finish();\n    });\n  };\n\n  function countDocs(tx, callback) {\n\n    if (api._docCount !== -1) {\n      return callback(api._docCount);\n    }\n\n    // count the total rows\n    var sql = select(\n      \'COUNT(\' + DOC_STORE + \'.id) AS \\\'num\\\'\',\n      [DOC_STORE, BY_SEQ_STORE],\n      DOC_STORE_AND_BY_SEQ_JOINER,\n      BY_SEQ_STORE + \'.deleted=0\');\n\n    tx.executeSql(sql, [], function (tx, result) {\n      api._docCount = result.rows.item(0).num;\n      callback(api._docCount);\n    });\n  }\n\n  api._allDocs = function (opts, callback) {\n    var results = [];\n    var totalRows;\n\n    var start = \'startkey\' in opts ? opts.startkey : false;\n    var end = \'endkey\' in opts ? opts.endkey : false;\n    var key = \'key\' in opts ? opts.key : false;\n    var descending = \'descending\' in opts ? opts.descending : false;\n    var limit = \'limit\' in opts ? opts.limit : -1;\n    var offset = \'skip\' in opts ? opts.skip : 0;\n    var inclusiveEnd = opts.inclusive_end !== false;\n\n    var sqlArgs = [];\n    var criteria = [];\n\n    if (key !== false) {\n      criteria.push(DOC_STORE + \'.id = ?\');\n      sqlArgs.push(key);\n    } else if (start !== false || end !== false) {\n      if (start !== false) {\n        criteria.push(DOC_STORE + \'.id \' + (descending ? \'<=\' : \'>=\') + \' ?\');\n        sqlArgs.push(start);\n      }\n      if (end !== false) {\n        var comparator = descending ? \'>\' : \'<\';\n        if (inclusiveEnd) {\n          comparator += \'=\';\n        }\n        criteria.push(DOC_STORE + \'.id \' + comparator + \' ?\');\n        sqlArgs.push(end);\n      }\n      if (key !== false) {\n        criteria.push(DOC_STORE + \'.id = ?\');\n        sqlArgs.push(key);\n      }\n    }\n\n    if (opts.deleted !== \'ok\') {\n      // report deleted if keys are specified\n      criteria.push(BY_SEQ_STORE + \'.deleted = 0\');\n    }\n\n    db.readTransaction(function (tx) {\n\n      // first count up the total rows\n      countDocs(tx, function (count) {\n        totalRows = count;\n\n        if (limit === 0) {\n          return;\n        }\n\n        // then actually fetch the documents\n        var sql = select(\n          SELECT_DOCS,\n          [DOC_STORE, BY_SEQ_STORE],\n          DOC_STORE_AND_BY_SEQ_JOINER,\n          criteria,\n          DOC_STORE + \'.id \' + (descending ? \'DESC\' : \'ASC\')\n          );\n        sql += \' LIMIT \' + limit + \' OFFSET \' + offset;\n\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = utils.safeJsonParse(item.metadata);\n            var id = metadata.id;\n            var data = unstringifyDoc(item.data, id, item.rev);\n            var winningRev = data._rev;\n            var doc = {\n              id: id,\n              key: id,\n              value: {rev: winningRev}\n            };\n            if (opts.include_docs) {\n              doc.doc = data;\n              doc.doc._rev = winningRev;\n              if (opts.conflicts) {\n                doc.doc._conflicts = collectConflicts(metadata);\n              }\n              fetchAttachmentsIfNecessary(doc.doc, opts, api, tx);\n            }\n            if (item.deleted) {\n              if (opts.deleted === \'ok\') {\n                doc.value.deleted = true;\n                doc.doc = null;\n              } else {\n                continue;\n              }\n            }\n            results.push(doc);\n          }\n        });\n      });\n    }, websqlError(callback), function () {\n      callback(null, {\n        total_rows: totalRows,\n        offset: opts.skip,\n        rows: results\n      });\n    });\n  };\n\n  api._changes = function (opts) {\n    opts = utils.clone(opts);\n\n    if (opts.continuous) {\n      var id = api._name + \':\' + utils.uuid();\n      WebSqlPouch.Changes.addListener(api._name, id, api, opts);\n      WebSqlPouch.Changes.notify(api._name);\n      return {\n        cancel: function () {\n          WebSqlPouch.Changes.removeListener(api._name, id);\n        }\n      };\n    }\n\n    var descending = opts.descending;\n\n    // Ignore the `since` parameter when `descending` is true\n    opts.since = opts.since && !descending ? opts.since : 0;\n\n    var limit = \'limit\' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n\n    var returnDocs;\n    if (\'returnDocs\' in opts) {\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    var results = [];\n    var numResults = 0;\n\n    function fetchChanges() {\n\n      var selectStmt =\n        DOC_STORE + \'.json AS metadata, \' +\n        DOC_STORE + \'.max_seq AS maxSeq, \' +\n        BY_SEQ_STORE + \'.json AS winningDoc, \' +\n        BY_SEQ_STORE + \'.rev AS winningRev \';\n\n      var from = DOC_STORE + \' JOIN \' + BY_SEQ_STORE;\n\n      var joiner = DOC_STORE + \'.id=\' + BY_SEQ_STORE + \'.doc_id\' +\n        \' AND \' + DOC_STORE + \'.winningseq=\' + BY_SEQ_STORE + \'.seq\';\n\n      var criteria = [\'maxSeq > ?\'];\n      var sqlArgs = [opts.since];\n\n      if (opts.doc_ids) {\n        criteria.push(DOC_STORE + \'.id IN \' + qMarks(opts.doc_ids.length));\n        sqlArgs = sqlArgs.concat(opts.doc_ids);\n      }\n\n      var orderBy = \'maxSeq \' + (descending ? \'DESC\' : \'ASC\');\n\n      var sql = select(selectStmt, from, joiner, criteria, orderBy);\n\n      var filter = utils.filterChange(opts);\n      if (!opts.view && !opts.filter) {\n        // we can just limit in the query\n        sql += \' LIMIT \' + limit;\n      }\n\n      var lastSeq = opts.since || 0;\n      db.readTransaction(function (tx) {\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          function reportChange(change) {\n            return function () {\n              opts.onChange(change);\n            };\n          }\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = utils.safeJsonParse(item.metadata);\n            lastSeq = item.maxSeq;\n\n            var doc = unstringifyDoc(item.winningDoc, metadata.id,\n              item.winningRev);\n            var change = opts.processChange(doc, metadata, opts);\n            change.seq = item.maxSeq;\n\n            var filtered = filter(change);\n            if (typeof filtered === \'object\') {\n              return opts.complete(filtered);\n            }\n\n            if (filtered) {\n              numResults++;\n              if (returnDocs) {\n                results.push(change);\n              }\n              // process the attachment immediately\n              // for the benefit of live listeners\n              if (opts.attachments && opts.include_docs) {\n                fetchAttachmentsIfNecessary(doc, opts, api, tx,\n                  reportChange(change));\n              } else {\n                reportChange(change)();\n              }\n            }\n            if (numResults === limit) {\n              break;\n            }\n          }\n        });\n      }, websqlError(opts.complete), function () {\n        if (!opts.continuous) {\n          opts.complete(null, {\n            results: results,\n            last_seq: lastSeq\n          });\n        }\n      });\n    }\n\n    fetchChanges();\n  };\n\n  api._close = function (callback) {\n    //WebSQL databases do not need to be closed\n    callback();\n  };\n\n  api._getAttachment = function (attachment, opts, callback) {\n    var res;\n    var tx = opts.ctx;\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n    var sql = \'SELECT escaped, \' +\n      \'CASE WHEN escaped = 1 THEN body ELSE HEX(body) END AS body FROM \' +\n      ATTACH_STORE + \' WHERE digest=?\';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      // websql has a bug where \\u0000 causes early truncation in strings\n      // and blobs. to work around this, we used to use the hex() function,\n      // but that\'s not performant. after migration 6, we remove \\u0000\n      // and add it back in afterwards\n      var item = result.rows.item(0);\n      var data = item.escaped ? websqlUtils.unescapeBlob(item.body) :\n        parseHexString(item.body, encoding);\n      if (opts.binary) {\n        res = binStringToBlob(data, type);\n      } else {\n        res = utils.btoa(data);\n      }\n      callback(null, res);\n    });\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    db.readTransaction(function (tx) {\n      var sql = \'SELECT json AS metadata FROM \' + DOC_STORE + \' WHERE id = ?\';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        if (!result.rows.length) {\n          callback(errors.error(errors.MISSING_DOC));\n        } else {\n          var data = utils.safeJsonParse(result.rows.item(0).metadata);\n          callback(null, data.rev_tree);\n        }\n      });\n    });\n  };\n\n  api._doCompaction = function (docId, revs, callback) {\n    if (!revs.length) {\n      return callback();\n    }\n    db.transaction(function (tx) {\n\n      // update doc store\n      var sql = \'SELECT json AS metadata FROM \' + DOC_STORE + \' WHERE id = ?\';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        var metadata = utils.safeJsonParse(result.rows.item(0).metadata);\n        traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                           revHash, ctx, opts) {\n          var rev = pos + \'-\' + revHash;\n          if (revs.indexOf(rev) !== -1) {\n            opts.status = \'missing\';\n          }\n        });\n\n        var sql = \'UPDATE \' + DOC_STORE + \' SET json = ? WHERE id = ?\';\n        tx.executeSql(sql, [utils.safeJsonStringify(metadata), docId]);\n      });\n\n      compactRevs(revs, docId, tx);\n    }, websqlError(callback), function () {\n      callback();\n    });\n  };\n\n  api._getLocal = function (id, callback) {\n    db.readTransaction(function (tx) {\n      var sql = \'SELECT json, rev FROM \' + LOCAL_STORE + \' WHERE id=?\';\n      tx.executeSql(sql, [id], function (tx, res) {\n        if (res.rows.length) {\n          var item = res.rows.item(0);\n          var doc = unstringifyDoc(item.json, id, item.rev);\n          callback(null, doc);\n        } else {\n          callback(errors.error(errors.MISSING_DOC));\n        }\n      });\n    });\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    var newRev;\n    if (!oldRev) {\n      newRev = doc._rev = \'0-1\';\n    } else {\n      newRev = doc._rev = \'0-\' + (parseInt(oldRev.split(\'-\')[1], 10) + 1);\n    }\n    var json = stringifyDoc(doc);\n\n    var ret;\n    function putLocal(tx) {\n      var sql;\n      var values;\n      if (oldRev) {\n        sql = \'UPDATE \' + LOCAL_STORE + \' SET rev=?, json=? \' +\n          \'WHERE id=? AND rev=?\';\n        values = [newRev, json, id, oldRev];\n      } else {\n        sql = \'INSERT INTO \' + LOCAL_STORE + \' (id, rev, json) VALUES (?,?,?)\';\n        values = [id, newRev, json];\n      }\n      tx.executeSql(sql, values, function (tx, res) {\n        if (res.rowsAffected) {\n          ret = {ok: true, id: id, rev: newRev};\n          if (opts.ctx) { // return immediately\n            callback(null, ret);\n          }\n        } else {\n          callback(errors.error(errors.REV_CONFLICT));\n        }\n      }, function () {\n        callback(errors.error(errors.REV_CONFLICT));\n        return false; // ack that we handled the error\n      });\n    }\n\n    if (opts.ctx) {\n      putLocal(opts.ctx);\n    } else {\n      db.transaction(putLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === \'function\') {\n      callback = opts;\n      opts = {};\n    }\n    var ret;\n\n    function removeLocal(tx) {\n      var sql = \'DELETE FROM \' + LOCAL_STORE + \' WHERE id=? AND rev=?\';\n      var params = [doc._id, doc._rev];\n      tx.executeSql(sql, params, function (tx, res) {\n        if (!res.rowsAffected) {\n          return callback(errors.error(errors.MISSING_DOC));\n        }\n        ret = {ok: true, id: doc._id, rev: \'0-0\'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      });\n    }\n\n    if (opts.ctx) {\n      removeLocal(opts.ctx);\n    } else {\n      db.transaction(removeLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._destroy = function (opts, callback) {\n    WebSqlPouch.Changes.removeAllListeners(api._name);\n    db.transaction(function (tx) {\n      var stores = [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE, META_STORE,\n        LOCAL_STORE, ATTACH_AND_SEQ_STORE];\n      stores.forEach(function (store) {\n        tx.executeSql(\'DROP TABLE IF EXISTS \' + store, []);\n      });\n    }, websqlError(callback), function () {\n      if (hasLocalStorage()) {\n        delete window.localStorage[\'_pouch__websqldb_\' + api._name];\n        delete window.localStorage[api._name];\n      }\n      callback(null, {\'ok\': true});\n    });\n  };\n}\n\nWebSqlPouch.valid = websqlUtils.valid;\n\nWebSqlPouch.Changes = new utils.Changes();\n\nmodule.exports = WebSqlPouch;\n\n},{"../../deps/binary/binaryStringToBlobOrBuffer":42,"../../deps/docs/isDeleted":52,"../../deps/docs/isLocalId":53,"../../deps/env/hasLocalStorage":60,"../../deps/errors":62,"../../deps/merge/collectConflicts":66,"../../deps/merge/traverseRevTree":71,"../../deps/parseHex":74,"../../utils":100,"./bulkDocs":21,"./constants":22,"./utils":24}],24:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'../../utils\');\nvar errors = require(\'../../deps/errors\');\n\nvar websqlConstants = require(\'./constants\');\n\nvar BY_SEQ_STORE = websqlConstants.BY_SEQ_STORE;\nvar ATTACH_STORE = websqlConstants.ATTACH_STORE;\nvar ATTACH_AND_SEQ_STORE = websqlConstants.ATTACH_AND_SEQ_STORE;\n\n// escapeBlob and unescapeBlob are workarounds for a websql bug:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n// The goal is to never actually insert the \\u0000 character\n// in the database.\nfunction escapeBlob(str) {\n  return str\n    .replace(/\\u0002/g, \'\\u0002\\u0002\')\n    .replace(/\\u0001/g, \'\\u0001\\u0002\')\n    .replace(/\\u0000/g, \'\\u0001\\u0001\');\n}\n\nfunction unescapeBlob(str) {\n  return str\n    .replace(/\\u0001\\u0001/g, \'\\u0000\')\n    .replace(/\\u0001\\u0002/g, \'\\u0001\')\n    .replace(/\\u0002\\u0002/g, \'\\u0002\');\n}\n\nfunction stringifyDoc(doc) {\n  // don\'t bother storing the id/rev. it uses lots of space,\n  // in persistent map/reduce especially\n  delete doc._id;\n  delete doc._rev;\n  return JSON.stringify(doc);\n}\n\nfunction unstringifyDoc(doc, id, rev) {\n  doc = JSON.parse(doc);\n  doc._id = id;\n  doc._rev = rev;\n  return doc;\n}\n\n// question mark groups IN queries, e.g. 3 -> \'(?,?,?)\'\nfunction qMarks(num) {\n  var s = \'(\';\n  while (num--) {\n    s += \'?\';\n    if (num) {\n      s += \',\';\n    }\n  }\n  return s + \')\';\n}\n\nfunction select(selector, table, joiner, where, orderBy) {\n  return \'SELECT \' + selector + \' FROM \' +\n    (typeof table === \'string\' ? table : table.join(\' JOIN \')) +\n    (joiner ? (\' ON \' + joiner) : \'\') +\n    (where ? (\' WHERE \' +\n    (typeof where === \'string\' ? where : where.join(\' AND \'))) : \'\') +\n    (orderBy ? (\' ORDER BY \' + orderBy) : \'\');\n}\n\nfunction compactRevs(revs, docId, tx) {\n\n  if (!revs.length) {\n    return;\n  }\n\n  var numDone = 0;\n  var seqs = [];\n\n  function checkDone() {\n    if (++numDone === revs.length) { // done\n      deleteOrphans();\n    }\n  }\n\n  function deleteOrphans() {\n    // find orphaned attachment digests\n\n    if (!seqs.length) {\n      return;\n    }\n\n    var sql = \'SELECT DISTINCT digest AS digest FROM \' +\n      ATTACH_AND_SEQ_STORE + \' WHERE seq IN \' + qMarks(seqs.length);\n\n    tx.executeSql(sql, seqs, function (tx, res) {\n\n      var digestsToCheck = [];\n      for (var i = 0; i < res.rows.length; i++) {\n        digestsToCheck.push(res.rows.item(i).digest);\n      }\n      if (!digestsToCheck.length) {\n        return;\n      }\n\n      var sql = \'DELETE FROM \' + ATTACH_AND_SEQ_STORE +\n        \' WHERE seq IN (\' +\n        seqs.map(function () { return \'?\'; }).join(\',\') +\n        \')\';\n      tx.executeSql(sql, seqs, function (tx) {\n\n        var sql = \'SELECT digest FROM \' + ATTACH_AND_SEQ_STORE +\n          \' WHERE digest IN (\' +\n          digestsToCheck.map(function () { return \'?\'; }).join(\',\') +\n          \')\';\n        tx.executeSql(sql, digestsToCheck, function (tx, res) {\n          var nonOrphanedDigests = new utils.Set();\n          for (var i = 0; i < res.rows.length; i++) {\n            nonOrphanedDigests.add(res.rows.item(i).digest);\n          }\n          digestsToCheck.forEach(function (digest) {\n            if (nonOrphanedDigests.has(digest)) {\n              return;\n            }\n            tx.executeSql(\n              \'DELETE FROM \' + ATTACH_AND_SEQ_STORE + \' WHERE digest=?\',\n              [digest]);\n            tx.executeSql(\n              \'DELETE FROM \' + ATTACH_STORE + \' WHERE digest=?\', [digest]);\n          });\n        });\n      });\n    });\n  }\n\n  // update by-seq and attach stores in parallel\n  revs.forEach(function (rev) {\n    var sql = \'SELECT seq FROM \' + BY_SEQ_STORE +\n      \' WHERE doc_id=? AND rev=?\';\n\n    tx.executeSql(sql, [docId, rev], function (tx, res) {\n      if (!res.rows.length) { // already deleted\n        return checkDone();\n      }\n      var seq = res.rows.item(0).seq;\n      seqs.push(seq);\n\n      tx.executeSql(\n        \'DELETE FROM \' + BY_SEQ_STORE + \' WHERE seq=?\', [seq], checkDone);\n    });\n  });\n}\n\nfunction websqlError(callback) {\n  return function (event) {\n    console.error(\'WebSQL threw an error\', event);\n    // event may actually be a SQLError object, so report is as such\n    var errorNameMatch = event && event.constructor.toString()\n        .match(/function ([^\\(]+)/);\n    var errorName = (errorNameMatch && errorNameMatch[1]) || event.type;\n    var errorReason = event.target || event.message;\n    callback(errors.error(errors.WSQ_ERROR, errorReason, errorName));\n  };\n}\n\nfunction getSize(opts) {\n  if (\'size\' in opts) {\n    // triggers immediate popup in iOS, fixes #2347\n    // e.g. 5000001 asks for 5 MB, 10000001 asks for 10 MB,\n    return opts.size * 1000000;\n  }\n  // In iOS, doesn\'t matter as long as it\'s <= 5000000.\n  // Except that if you request too much, our tests fail\n  // because of the native "do you accept?" popup.\n  // In Android <=4.3, this value is actually used as an\n  // honest-to-god ceiling for data, so we need to\n  // set it to a decently high number.\n  var isAndroid = /Android/.test(window.navigator.userAgent);\n  return isAndroid ? 5000000 : 1; // in PhantomJS, if you use 0 it will crash\n}\n\nfunction createOpenDBFunction() {\n  if (typeof sqlitePlugin !== \'undefined\') {\n    // The SQLite Plugin started deviating pretty heavily from the\n    // standard openDatabase() function, as they started adding more features.\n    // It\'s better to just use their "new" format and pass in a big ol\'\n    // options object.\n    return sqlitePlugin.openDatabase.bind(sqlitePlugin);\n  }\n\n  if (typeof openDatabase !== \'undefined\') {\n    return function openDB(opts) {\n      // Traditional WebSQL API\n      return openDatabase(opts.name, opts.version, opts.description, opts.size);\n    };\n  }\n}\n\nfunction openDBSafely(openDBFunction, opts) {\n  try {\n    return {\n      db: openDBFunction(opts)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nvar cachedDatabases = {};\n\nfunction openDB(opts) {\n  var cachedResult = cachedDatabases[opts.name];\n  if (!cachedResult) {\n    var openDBFun = createOpenDBFunction();\n    cachedResult = cachedDatabases[opts.name] = openDBSafely(openDBFun, opts);\n    if (cachedResult.db) {\n      cachedResult.db._sqlitePlugin = typeof sqlitePlugin !== \'undefined\';\n    }\n  }\n  return cachedResult;\n}\n\nfunction valid() {\n  // SQLitePlugin leaks this global object, which we can use\n  // to detect if it\'s installed or not. The benefit is that it\'s\n  // declared immediately, before the \'deviceready\' event has fired.\n  return typeof openDatabase !== \'undefined\' ||\n    typeof SQLitePlugin !== \'undefined\';\n}\n\nmodule.exports = {\n  escapeBlob: escapeBlob,\n  unescapeBlob: unescapeBlob,\n  stringifyDoc: stringifyDoc,\n  unstringifyDoc: unstringifyDoc,\n  qMarks: qMarks,\n  select: select,\n  compactRevs: compactRevs,\n  websqlError: websqlError,\n  getSize: getSize,\n  openDB: openDB,\n  valid: valid\n};\n},{"../../deps/errors":62,"../../utils":100,"./constants":22}],25:[function(require,module,exports){\n\'use strict\';\nvar utils = require(\'./utils\');\nvar isDeleted = require(\'./deps/docs/isDeleted\');\nvar errors = require(\'./deps/errors\');\nvar EE = require(\'events\').EventEmitter;\nvar evalFilter = require(\'./evalFilter\');\nvar evalView = require(\'./evalView\');\nvar parseDdocFunctionName = require(\'./deps/docs/parseDdocFunctionName\');\nvar normalizeDdocFunctionName =\n  require(\'./deps/docs/normalizeDdocFunctionName\');\nvar collectLeaves = require(\'./deps/merge/collectLeaves\');\nvar collectConflicts = require(\'./deps/merge/collectConflicts\');\nmodule.exports = Changes;\nutils.inherits(Changes, EE);\n\nfunction Changes(db, opts, callback) {\n  EE.call(this);\n  var self = this;\n  this.db = db;\n  opts = opts ? utils.clone(opts) : {};\n  var complete = opts.complete = utils.once(function (err, resp) {\n    if (err) {\n      self.emit(\'error\', err);\n    } else {\n      self.emit(\'complete\', resp);\n    }\n    self.removeAllListeners();\n    db.removeListener(\'destroyed\', onDestroy);\n  });\n  if (callback) {\n    self.on(\'complete\', function (resp) {\n      callback(null, resp);\n    });\n    self.on(\'error\', function (err) {\n      callback(err);\n    });\n  }\n  function onDestroy() {\n    self.cancel();\n  }\n  db.once(\'destroyed\', onDestroy);\n\n  opts.onChange = function (change) {\n    if (opts.isCancelled) {\n      return;\n    }\n    self.emit(\'change\', change);\n    if (self.startSeq && self.startSeq <= change.seq) {\n      self.startSeq = false;\n    }\n  };\n\n  var promise = new utils.Promise(function (fulfill, reject) {\n    opts.complete = function (err, res) {\n      if (err) {\n        reject(err);\n      } else {\n        fulfill(res);\n      }\n    };\n  });\n  self.once(\'cancel\', function () {\n    db.removeListener(\'destroyed\', onDestroy);\n    opts.complete(null, {status: \'cancelled\'});\n  });\n  this.then = promise.then.bind(promise);\n  this[\'catch\'] = promise[\'catch\'].bind(promise);\n  this.then(function (result) {\n    complete(null, result);\n  }, complete);\n\n\n\n  if (!db.taskqueue.isReady) {\n    db.taskqueue.addTask(function () {\n      if (self.isCancelled) {\n        self.emit(\'cancel\');\n      } else {\n        self.doChanges(opts);\n      }\n    });\n  } else {\n    self.doChanges(opts);\n  }\n}\nChanges.prototype.cancel = function () {\n  this.isCancelled = true;\n  if (this.db.taskqueue.isReady) {\n    this.emit(\'cancel\');\n  }\n};\nfunction processChange(doc, metadata, opts) {\n  var changeList = [{rev: doc._rev}];\n  if (opts.style === \'all_docs\') {\n    changeList = collectLeaves(metadata.rev_tree)\n    .map(function (x) { return {rev: x.rev}; });\n  }\n  var change = {\n    id: metadata.id,\n    changes: changeList,\n    doc: doc\n  };\n\n  if (isDeleted(metadata, doc._rev)) {\n    change.deleted = true;\n  }\n  if (opts.conflicts) {\n    change.doc._conflicts = collectConflicts(metadata);\n    if (!change.doc._conflicts.length) {\n      delete change.doc._conflicts;\n    }\n  }\n  return change;\n}\n\nChanges.prototype.doChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n\n  opts = utils.clone(opts);\n  if (\'live\' in opts && !(\'continuous\' in opts)) {\n    opts.continuous = opts.live;\n  }\n  opts.processChange = processChange;\n\n  if (opts.since === \'latest\') {\n    opts.since = \'now\';\n  }\n  if (!opts.since) {\n    opts.since = 0;\n  }\n  if (opts.since === \'now\') {\n    this.db.info().then(function (info) {\n      if (self.isCancelled) {\n        callback(null, {status: \'cancelled\'});\n        return;\n      }\n      opts.since = info.update_seq;\n      self.doChanges(opts);\n    }, callback);\n    return;\n  }\n\n  if (opts.continuous && opts.since !== \'now\') {\n    this.db.info().then(function (info) {\n      self.startSeq = info.update_seq;\n    }, function (err) {\n      if (err.id === \'idbNull\') {\n        //db closed before this returned\n        //thats ok\n        return;\n      }\n      throw err;\n    });\n  }\n\n  if (opts.filter && typeof opts.filter === \'string\') {\n    if (opts.filter === \'_view\') {\n      opts.view = normalizeDdocFunctionName(opts.view);\n    } else {\n      opts.filter = normalizeDdocFunctionName(opts.filter);\n    }\n\n    if (this.db.type() !== \'http\' && !opts.doc_ids) {\n      return this.filterChanges(opts);\n    }\n  }\n\n  if (!(\'descending\' in opts)) {\n    opts.descending = false;\n  }\n\n  // 0 and 1 should return 1 document\n  opts.limit = opts.limit === 0 ? 1 : opts.limit;\n  opts.complete = callback;\n  var newPromise = this.db._changes(opts);\n  if (newPromise && typeof newPromise.cancel === \'function\') {\n    var cancel = self.cancel;\n    self.cancel = utils.getArguments(function (args) {\n      newPromise.cancel();\n      cancel.apply(this, args);\n    });\n  }\n};\n\nChanges.prototype.filterChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n  if (opts.filter === \'_view\') {\n    if (!opts.view || typeof opts.view !== \'string\') {\n      var err = errors.error(errors.BAD_REQUEST,\n        \'`view` filter parameter not found or invalid.\');\n      return callback(err);\n    }\n    // fetch a view from a design doc, make it behave like a filter\n    var viewName = parseDdocFunctionName(opts.view);\n    this.db.get(\'_design/\' + viewName[0], function (err, ddoc) {\n      if (self.isCancelled) {\n        return callback(null, {status: \'cancelled\'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(errors.generateErrorFromResponse(err));\n      }\n      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&\n        ddoc.views[viewName[1]].map;\n      if (!mapFun) {\n        return callback(errors.error(errors.MISSING_DOC,\n          (ddoc.views ? \'missing json key: \' + viewName[1] :\n            \'missing json key: views\')));\n      }\n      opts.filter = evalView(mapFun);\n      self.doChanges(opts);\n    });\n  } else {\n    // fetch a filter from a design doc\n    var filterName = parseDdocFunctionName(opts.filter);\n    if (!filterName) {\n      return callback(errors.error(errors.BAD_REQUEST,\n                             \'`filter` filter parameter invalid.\'));\n    }\n    this.db.get(\'_design/\' + filterName[0], function (err, ddoc) {\n      if (self.isCancelled) {\n        return callback(null, {status: \'cancelled\'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(errors.generateErrorFromResponse(err));\n      }\n      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];\n      if (!filterFun) {\n        return callback(errors.error(errors.MISSING_DOC,\n          ((ddoc && ddoc.filters) ? \'missing json key: \' + filterName[1]\n            : \'missing json key: filters\')));\n      }\n      opts.filter = evalFilter(filterFun);\n      self.doChanges(opts);\n    });\n  }\n};\n\n},{"./deps/docs/isDeleted":52,"./deps/docs/normalizeDdocFunctionName":54,"./deps/docs/parseDdocFunctionName":55,"./deps/errors":62,"./deps/merge/collectConflicts":66,"./deps/merge/collectLeaves":67,"./evalFilter":81,"./evalView":82,"./utils":100,"events":109}],26:[function(require,module,exports){\n\'use strict\';\n\nvar EventEmitter = require(\'events\').EventEmitter;\nvar inherits = require(\'inherits\');\nvar isChromeApp = require(\'./deps/env/isChromeApp\');\nvar hasLocalStorage = require(\'./deps/env/hasLocalStorage\');\nvar pick = require(\'./deps/pick\');\n\ninherits(Changes, EventEmitter);\n\n/* istanbul ignore next */\nfunction attachBrowserEvents(self) {\n  if (isChromeApp()) {\n    chrome.storage.onChanged.addListener(function (e) {\n      // make sure it\'s event addressed to us\n      if (e.db_name != null) {\n        //object only has oldValue, newValue members\n        self.emit(e.dbName.newValue);\n      }\n    });\n  } else if (hasLocalStorage()) {\n    if (typeof addEventListener !== \'undefined\') {\n      addEventListener("storage", function (e) {\n        self.emit(e.key);\n      });\n    } else { // old IE\n      window.attachEvent("storage", function (e) {\n        self.emit(e.key);\n      });\n    }\n  }\n}\n\nfunction Changes() {\n  EventEmitter.call(this);\n  this._listeners = {};\n\n  attachBrowserEvents(this);\n}\nChanges.prototype.addListener = function (dbName, id, db, opts) {\n  if (this._listeners[id]) {\n    return;\n  }\n  var self = this;\n  var inprogress = false;\n  function eventFunction() {\n    if (!self._listeners[id]) {\n      return;\n    }\n    if (inprogress) {\n      inprogress = \'waiting\';\n      return;\n    }\n    inprogress = true;\n    var changesOpts = pick(opts, [\n      \'style\', \'include_docs\', \'attachments\', \'conflicts\', \'filter\',\n      \'doc_ids\', \'view\', \'since\', \'query_params\', \'binary\'\n    ]);\n\n    db.changes(changesOpts).on(\'change\', function (c) {\n      if (c.seq > opts.since && !opts.cancelled) {\n        opts.since = c.seq;\n        opts.onChange(c);\n      }\n    }).on(\'complete\', function () {\n      if (inprogress === \'waiting\') {\n        setTimeout(function(){\n          eventFunction();\n        },0);\n      }\n      inprogress = false;\n    }).on(\'error\', function () {\n      inprogress = false;\n    });\n  }\n  this._listeners[id] = eventFunction;\n  this.on(dbName, eventFunction);\n};\n\nChanges.prototype.removeListener = function (dbName, id) {\n  if (!(id in this._listeners)) {\n    return;\n  }\n  EventEmitter.prototype.removeListener.call(this, dbName,\n    this._listeners[id]);\n};\n\n\n/* istanbul ignore next */\nChanges.prototype.notifyLocalWindows = function (dbName) {\n  //do a useless change on a storage thing\n  //in order to get other windows\'s listeners to activate\n  if (isChromeApp()) {\n    chrome.storage.local.set({dbName: dbName});\n  } else if (hasLocalStorage()) {\n    localStorage[dbName] = (localStorage[dbName] === "a") ? "b" : "a";\n  }\n};\n\nChanges.prototype.notify = function (dbName) {\n  this.emit(dbName);\n  this.notifyLocalWindows(dbName);\n};\n\nmodule.exports = Changes;\n\n},{"./deps/env/hasLocalStorage":60,"./deps/env/isChromeApp":61,"./deps/pick":76,"events":109,"inherits":10}],27:[function(require,module,exports){\n(function (global){\n/*globals cordova */\n"use strict";\n\nvar debug = require(\'debug\');\n\nvar Adapter = require(\'./adapter\');\nvar utils = require(\'./utils\');\nvar TaskQueue = require(\'./taskqueue\');\nvar Promise = utils.Promise;\n\nfunction defaultCallback(err) {\n  /* istanbul ignore next */\n  if (err && global.debug) {\n    console.error(err);\n  }\n}\n\n// OK, so here\'s the deal. Consider this code:\n//     var db1 = new PouchDB(\'foo\');\n//     var db2 = new PouchDB(\'foo\');\n//     db1.destroy();\n// ^ these two both need to emit \'destroyed\' events,\n// as well as the PouchDB constructor itself.\n// So we have one db object (whichever one got destroy() called on it)\n// responsible for emitting the initial event, which then gets emitted\n// by the constructor, which then broadcasts it to any other dbs\n// that may have been created with the same name.\nfunction prepareForDestruction(self, opts) {\n  var name = opts.originalName;\n  var ctor = self.constructor;\n  var destructionListeners = ctor._destructionListeners;\n\n  function onDestroyed() {\n    ctor.emit(\'destroyed\', name);\n    //so we don\'t have to sift through all dbnames\n    ctor.emit(name, \'destroyed\');\n  }\n\n  function onConstructorDestroyed() {\n    self.removeListener(\'destroyed\', onDestroyed);\n    self.emit(\'destroyed\', self);\n  }\n\n  self.once(\'destroyed\', onDestroyed);\n\n  // in setup.js, the constructor is primed to listen for destroy events\n  if (!destructionListeners.has(name)) {\n    destructionListeners.set(name, []);\n  }\n  destructionListeners.get(name).push(onConstructorDestroyed);\n}\n\nutils.inherits(PouchDB, Adapter);\nfunction PouchDB(name, opts, callback) {\n\n  if (!(this instanceof PouchDB)) {\n    return new PouchDB(name, opts, callback);\n  }\n  var self = this;\n  if (typeof opts === \'function\' || typeof opts === \'undefined\') {\n    callback = opts;\n    opts = {};\n  }\n\n  if (name && typeof name === \'object\') {\n    opts = name;\n    name = undefined;\n  }\n  if (typeof callback === \'undefined\') {\n    callback = defaultCallback;\n  }\n  name = name || opts.name;\n  opts = utils.clone(opts);\n  // if name was specified via opts, ignore for the sake of dependentDbs\n  delete opts.name;\n  this.__opts = opts;\n  var oldCB = callback;\n  self.auto_compaction = opts.auto_compaction;\n  self.prefix = PouchDB.prefix;\n  Adapter.call(self);\n  self.taskqueue = new TaskQueue();\n  var promise = new Promise(function (fulfill, reject) {\n    callback = function (err, resp) {\n      if (err) {\n        return reject(err);\n      }\n      delete resp.then;\n      fulfill(resp);\n    };\n  \n    opts = utils.clone(opts);\n    var originalName = opts.name || name;\n    var backend, error;\n    (function () {\n      try {\n\n        if (typeof originalName !== \'string\') {\n          error = new Error(\'Missing/invalid DB name\');\n          error.code = 400;\n          throw error;\n        }\n\n        backend = PouchDB.parseAdapter(originalName, opts);\n        \n        opts.originalName = originalName;\n        opts.name = backend.name;\n        if (opts.prefix && backend.adapter !== \'http\' &&\n            backend.adapter !== \'https\') {\n          opts.name = opts.prefix + opts.name;\n        }\n        opts.adapter = opts.adapter || backend.adapter;\n        self._adapter = opts.adapter;\n        debug(\'pouchdb:adapter\')(\'Picked adapter: \' + opts.adapter);\n\n        self._db_name = originalName;\n        if (!PouchDB.adapters[opts.adapter]) {\n          error = new Error(\'Adapter is missing\');\n          error.code = 404;\n          throw error;\n        }\n\n        if (!PouchDB.adapters[opts.adapter].valid()) {\n          error = new Error(\'Invalid Adapter\');\n          error.code = 404;\n          throw error;\n        }\n      } catch (err) {\n        self.taskqueue.fail(err);\n      }\n    }());\n    if (error) {\n      return reject(error); // constructor error, see above\n    }\n    self.adapter = opts.adapter;\n\n    // needs access to PouchDB;\n    self.replicate = {};\n\n    self.replicate.from = function (url, opts, callback) {\n      return self.constructor.replicate(url, self, opts, callback);\n    };\n\n    self.replicate.to = function (url, opts, callback) {\n      return self.constructor.replicate(self, url, opts, callback);\n    };\n\n    self.sync = function (dbName, opts, callback) {\n      return self.constructor.sync(self, dbName, opts, callback);\n    };\n\n    self.replicate.sync = self.sync;\n\n    PouchDB.adapters[opts.adapter].call(self, opts, function (err) {\n      if (err) {\n        self.taskqueue.fail(err);\n        callback(err);\n        return;\n      }\n      prepareForDestruction(self, opts);\n\n      self.emit(\'created\', self);\n      PouchDB.emit(\'created\', opts.originalName);\n      self.taskqueue.ready(self);\n      callback(null, self);\n    });\n\n    /* istanbul ignore next */\n    if (utils.isCordova()) {\n      //to inform websql adapter that we can use api\n      cordova.fireWindowEvent(opts.name + "_pouch", {});\n    }\n  });\n  promise.then(function (resp) {\n    oldCB(null, resp);\n  }, oldCB);\n  self.then = promise.then.bind(promise);\n  self.catch = promise.catch.bind(promise);\n}\n\nPouchDB.debug = debug;\n\nmodule.exports = PouchDB;\n\n}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})\n},{"./adapter":12,"./taskqueue":99,"./utils":100,"debug":7}],28:[function(require,module,exports){\n"use strict";\n\nvar request = require(\'request\');\n\nvar errors = require(\'./../errors\');\nvar utils = require(\'../../utils\');\nvar applyTypeToBuffer = require(\'./applyTypeToBuffer\');\nvar defaultBody = require(\'./defaultBody\');\nvar explainCors = require(\'./explainCors\');\n\nfunction ajax(options, callback) {\n\n  options = utils.clone(options);\n\n  var defaultOptions = {\n    method : "GET",\n    headers: {},\n    json: true,\n    processData: true,\n    timeout: 10000,\n    cache: false\n  };\n\n  options = utils.extend(defaultOptions, options);\n\n\n  function onSuccess(obj, resp, cb) {\n    if (!options.binary && !options.json && options.processData &&\n      typeof obj !== \'string\') {\n      obj = JSON.stringify(obj);\n    } else if (!options.binary && options.json && typeof obj === \'string\') {\n      try {\n        obj = JSON.parse(obj);\n      } catch (e) {\n        // Probably a malformed JSON from server\n        return cb(e);\n      }\n    }\n    if (Array.isArray(obj)) {\n      obj = obj.map(function (v) {\n        if (v.error || v.missing) {\n          return errors.generateErrorFromResponse(v);\n        } else {\n          return v;\n        }\n      });\n    }\n    if (options.binary) {\n      applyTypeToBuffer(obj, resp);\n    }\n    cb(null, obj, resp);\n  }\n\n  function onError(err, cb) {\n    var errParsed, errObj;\n    if (err.code && err.status) {\n      var err2 = new Error(err.message || err.code);\n      err2.status = err.status;\n      return cb(err2);\n    }\n    try {\n      errParsed = JSON.parse(err.responseText);\n      //would prefer not to have a try/catch clause\n      errObj = errors.generateErrorFromResponse(errParsed);\n    } catch (e) {\n      errObj = errors.generateErrorFromResponse(err);\n    }\n    cb(errObj);\n  }\n\n\n  if (options.json) {\n    if (!options.binary) {\n      options.headers.Accept = \'application/json\';\n    }\n    options.headers[\'Content-Type\'] = options.headers[\'Content-Type\'] ||\n      \'application/json\';\n  }\n\n  if (options.binary) {\n    options.encoding = null;\n    options.json = false;\n  }\n\n  if (!options.processData) {\n    options.json = false;\n  }\n\n  return request(options, function (err, response, body) {\n    if (err) {\n      if (response) {\n        var origin = (typeof document !== \'undefined\') &&\n          document.location.origin;\n        var isCrossOrigin = origin && options.url.indexOf(origin) === 0;\n        if (isCrossOrigin && response.statusCode === 0) {\n          explainCors();\n        }\n        err.status = response.statusCode;\n      } else {\n        err.status = 400;\n      }\n      return onError(err, callback);\n    }\n\n    var error;\n    var content_type = response.headers && response.headers[\'content-type\'];\n    var data = body || defaultBody();\n\n    // CouchDB doesn\'t always return the right content-type for JSON data, so\n    // we check for ^{ and }$ (ignoring leading/trailing whitespace)\n    if (!options.binary && (options.json || !options.processData) &&\n        typeof data !== \'object\' &&\n        (/json/.test(content_type) ||\n         (/^[\\s]*\\{/.test(data) && /\\}[\\s]*$/.test(data)))) {\n      try {\n        data = JSON.parse(data.toString());\n      } catch (e) {}\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      onSuccess(data, response, callback);\n    } else {\n      error = errors.generateErrorFromResponse(data);\n      error.status = response.statusCode;\n      callback(error);\n    }\n  });\n}\n\nmodule.exports = ajax;\n\n},{"../../utils":100,"./../errors":62,"./applyTypeToBuffer":29,"./defaultBody":32,"./explainCors":34,"request":37}],29:[function(require,module,exports){\n\'use strict\';\n\n// the blob already has a type; do nothing\nmodule.exports = function () {};\n},{}],30:[function(require,module,exports){\n\'use strict\';\n\nvar createBlob = require(\'../binary/blob\');\n\nmodule.exports = function createBlobOrBufferFromParts(parts, type) {\n  return createBlob(parts, {type: type});\n};\n},{"../binary/blob":43}],31:[function(require,module,exports){\n\'use strict\';\n\nvar binaryStringToArrayBuffer = require(\'../binary/binaryStringToArrayBuffer\');\n\n// create a "part" suitable for multipart. in the browser\n// this is an ArrayBuffer; in Node it\'s a binary string\nmodule.exports = function createMultipartPart(data) {\n  return binaryStringToArrayBuffer(data);\n};\n},{"../binary/binaryStringToArrayBuffer":41}],32:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = function defaultBody() {\n  return \'\';\n};\n},{}],33:[function(require,module,exports){\n(function (global){\n\'use strict\';\n\n// designed to give info to browser users, who are disturbed\n// when they see 404s in the console\nmodule.exports = function explain404(str) {\n  if (\'console\' in global && \'info\' in console) {\n    console.info(\'The above 404 is totally normal. \' + str);\n  }\n};\n}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})\n},{}],34:[function(require,module,exports){\n(function (global){\n\'use strict\';\n\nmodule.exports = function () {\n  if (\'console\' in global && \'warn\' in console) {\n    console.warn(\'PouchDB: the remote database may not have CORS enabled.\' +\n      \'If not please enable CORS: \' +\n      \'http://pouchdb.com/errors.html#no_access_control_allow_origin_header\');\n  }\n};\n\n}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})\n},{}],35:[function(require,module,exports){\n\'use strict\';\n\n// Create a multipart/related stream out of a document,\n// so we can upload documents in that format when\n// attachments are large. This is shamefully stolen from\n// https://github.com/sballesteros/couch-multipart-stream/\n// and https://github.com/npm/npm-fullfat-registry\n\nvar base64 = require(\'./../binary/base64\');\nvar atob = base64.atob;\nvar uuid = require(\'./../uuid\');\nvar utils = require(\'../../utils\');\nvar clone = utils.clone;\n\nvar createBlufferFromParts = require(\'./createBlobOrBufferFromParts\');\nvar createMultipartPart = require(\'./createMultipartPart\');\n\nfunction createMultipart(doc) {\n  doc = clone(doc);\n\n  var boundary = uuid();\n\n  var nonStubAttachments = {};\n\n  Object.keys(doc._attachments).forEach(function (filename) {\n    var att = doc._attachments[filename];\n    if (att.stub) {\n      return;\n    }\n    var binData = atob(att.data);\n    nonStubAttachments[filename] = {type: att.content_type, data: binData};\n    att.length = binData.length;\n    att.follows = true;\n    delete att.digest;\n    delete att.data;\n  });\n\n  var preamble = \'--\' + boundary +\n    \'\\r\\nContent-Type: application/json\\r\\n\\r\\n\';\n\n  var parts = [preamble, JSON.stringify(doc)];\n\n  Object.keys(nonStubAttachments).forEach(function (filename) {\n    var att = nonStubAttachments[filename];\n    var preamble = \'\\r\\n--\' + boundary +\n      \'\\r\\nContent-Disposition: attachment; filename=\' +\n        JSON.stringify(filename) +\n      \'\\r\\nContent-Type: \' + att.type +\n      \'\\r\\nContent-Length: \' + att.data.length +\n      \'\\r\\n\\r\\n\';\n    parts.push(preamble);\n    parts.push(createMultipartPart(att.data));\n  });\n\n  parts.push(\'\\r\\n--\' + boundary + \'--\');\n\n  var type = \'multipart/related; boundary=\' + boundary;\n  var body = createBlufferFromParts(parts, type);\n\n  return {\n    headers: {\n      \'Content-Type\': type\n    },\n    body: body\n  };\n}\n\nmodule.exports = createMultipart;\n\n},{"../../utils":100,"./../binary/base64":39,"./../uuid":80,"./createBlobOrBufferFromParts":30,"./createMultipartPart":31}],36:[function(require,module,exports){\n\'use strict\';\n\nvar ajax = require(\'./ajaxCore\');\n\nmodule.exports = function(opts, callback) {\n\n  // cache-buster, specifically designed to work around IE\'s aggressive caching\n  // see http://www.dashbay.com/2011/05/internet-explorer-caches-ajax/\n  // Also Safari caches POSTs, so we need to cache-bust those too.\n  if ((opts.method === \'POST\' || opts.method === \'GET\') && !opts.cache) {\n    var hasArgs = opts.url.indexOf(\'?\') !== -1;\n    opts.url += (hasArgs ? \'&\' : \'?\') + \'_nonce=\' + Date.now();\n  }\n\n  return ajax(opts, callback);\n};\n\n},{"./ajaxCore":28}],37:[function(require,module,exports){\n/* global fetch */\n/* global Headers */\n\'use strict\';\n\nvar createBlob = require(\'./../binary/blob.js\');\nvar utils = require(\'../../utils\');\nvar readAsArrayBuffer = require(\'./../binary/readAsArrayBuffer\');\n\nfunction wrappedFetch() {\n  var wrappedPromise = {};\n\n  var promise = new utils.Promise(function(resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n\n  var args = new Array(arguments.length);\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  wrappedPromise.promise = promise;\n\n  utils.Promise.resolve().then(function () {\n    return fetch.apply(null, args);\n  }).then(function(response) {\n    wrappedPromise.resolve(response);\n  }).catch(function(error) {\n    wrappedPromise.reject(error);\n  });\n\n  return wrappedPromise;\n}\n\nfunction fetchRequest(options, callback) {\n  var wrappedPromise, timer, response;\n\n  var headers = new Headers();\n\n  var fetchOptions = {\n    method: options.method,\n    credentials: \'include\',\n    headers: headers\n  };\n\n  if (options.json) {\n    headers.set(\'Accept\', \'application/json\');\n    headers.set(\'Content-Type\', options.headers[\'Content-Type\'] ||\n      \'application/json\');\n  }\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      fetchOptions.body = arrayBuffer;\n    });\n  } else if (options.body &&\n             options.processData &&\n             typeof options.body !== \'string\') {\n    fetchOptions.body = JSON.stringify(options.body);\n  } else if (\'body\' in options) {\n    fetchOptions.body = options.body;\n  } else {\n    fetchOptions.body = null;\n  }\n\n  Object.keys(options.headers).forEach(function(key) {\n    if (options.headers.hasOwnProperty(key)) {\n      headers.set(key, options.headers[key]);\n    }\n  });\n\n  wrappedPromise = wrappedFetch(options.url, fetchOptions);\n\n  if (options.timeout > 0) {\n    timer = setTimeout(function() {\n      wrappedPromise.reject(new Error(\'Load timeout for resource: \' +\n        options.url));\n    }, options.timeout);\n  }\n\n  wrappedPromise.promise.then(function(fetchResponse) {\n    response = {\n      statusCode: fetchResponse.status\n    };\n\n    if (options.timeout > 0) {\n      clearTimeout(timer);\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      return options.binary ? fetchResponse.blob() : fetchResponse.text();\n    }\n\n    return fetchResponse.json();\n  }).then(function(result) {\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      callback(null, response, result);\n    } else {\n      callback(result, response);\n    }\n  }).catch(function(error) {\n    callback(error, response);\n  });\n\n  return {abort: wrappedPromise.reject};\n}\n\nfunction xhRequest(options, callback) {\n\n  var xhr, timer, hasUpload;\n\n  var abortReq = function () {\n    xhr.abort();\n  };\n\n  if (options.xhr) {\n    xhr = new options.xhr();\n  } else {\n    xhr = new XMLHttpRequest();\n  }\n\n  xhr.open(options.method, options.url);\n  xhr.withCredentials = true;\n\n  if (options.method === \'GET\') {\n    delete options.headers[\'Content-Type\'];\n  } else if (options.json) {\n    options.headers.Accept = \'application/json\';\n    options.headers[\'Content-Type\'] = options.headers[\'Content-Type\'] ||\n      \'application/json\';\n    if (options.body &&\n        options.processData &&\n        typeof options.body !== "string") {\n      options.body = JSON.stringify(options.body);\n    }\n  }\n\n  if (options.binary) {\n    xhr.responseType = \'arraybuffer\';\n  }\n\n  if (!(\'body\' in options)) {\n    options.body = null;\n  }\n\n  for (var key in options.headers) {\n    if (options.headers.hasOwnProperty(key)) {\n      xhr.setRequestHeader(key, options.headers[key]);\n    }\n  }\n\n  if (options.timeout > 0) {\n    timer = setTimeout(abortReq, options.timeout);\n    xhr.onprogress = function () {\n      clearTimeout(timer);\n      timer = setTimeout(abortReq, options.timeout);\n    };\n    if (typeof hasUpload === \'undefined\') {\n      // IE throws an error if you try to access it directly\n      hasUpload = Object.keys(xhr).indexOf(\'upload\') !== -1 &&\n                  typeof xhr.upload !== \'undefined\';\n    }\n    if (hasUpload) { // does not exist in ie9\n      xhr.upload.onprogress = xhr.onprogress;\n    }\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    var response = {\n      statusCode: xhr.status\n    };\n\n    if (xhr.status >= 200 && xhr.status < 300) {\n      var data;\n      if (options.binary) {\n        data = createBlob([xhr.response || \'\'], {\n          type: xhr.getResponseHeader(\'Content-Type\')\n        });\n      } else {\n        data = xhr.responseText;\n      }\n      callback(null, response, data);\n    } else {\n      var err = {};\n      try {\n        err = JSON.parse(xhr.response);\n      } catch(e) {}\n      callback(err, response);\n    }\n  };\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      xhr.send(arrayBuffer);\n    });\n  } else {\n    xhr.send(options.body);\n  }\n\n  return {abort: abortReq};\n}\n\nfunction testXhr() {\n  try {\n    new XMLHttpRequest();\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nvar hasXhr = testXhr();\n\nmodule.exports = function(options, callback) {\n  if (hasXhr || options.xhr) {\n    return xhRequest(options, callback);\n  } else {\n    return fetchRequest(options, callback);\n  }\n};\n\n},{"../../utils":100,"./../binary/blob.js":43,"./../binary/readAsArrayBuffer":48}],38:[function(require,module,exports){\n\'use strict\';\n\n//Can\'t find original post, but this is close\n//http://stackoverflow.com/questions/6965107/ (continues on next line)\n//converting-between-strings-and-arraybuffers\nmodule.exports = function (buffer) {\n  var binary = \'\';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n  for (var i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return binary;\n};\n},{}],39:[function(require,module,exports){\n\'use strict\';\n\nvar buffer = require(\'./buffer\');\n\n/* istanbul ignore if */\nif (typeof atob === \'function\') {\n  exports.atob = function (str) {\n    /* global atob */\n    return atob(str);\n  };\n} else {\n  exports.atob = function (str) {\n    var base64 = new buffer(str, \'base64\');\n    // Node.js will just skip the characters it can\'t encode instead of\n    // throwing and exception\n    if (base64.toString(\'base64\') !== str) {\n      throw ("Cannot base64 encode full string");\n    }\n    return base64.toString(\'binary\');\n  };\n}\n\n/* istanbul ignore if */\nif (typeof btoa === \'function\') {\n  exports.btoa = function (str) {\n    /* global btoa */\n    return btoa(str);\n  };\n} else {\n  exports.btoa = function (str) {\n    return new buffer(str, \'binary\').toString(\'base64\');\n  };\n}\n},{"./buffer":45}],40:[function(require,module,exports){\n\'use strict\';\n\nvar atob = require(\'./base64\').atob;\nvar binaryStringToBlobOrBuffer = require(\'./binaryStringToBlobOrBuffer\');\n\nmodule.exports = function (b64, type) {\n  return binaryStringToBlobOrBuffer(atob(b64), type);\n};\n},{"./base64":39,"./binaryStringToBlobOrBuffer":42}],41:[function(require,module,exports){\n\'use strict\';\n\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nmodule.exports = function (bin) {\n  var length = bin.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n  for (var i = 0; i < length; i++) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return buf;\n};\n},{}],42:[function(require,module,exports){\n\'use strict\';\n\nvar createBlob = require(\'./blob\');\nvar binaryStringToArrayBuffer = require(\'./binaryStringToArrayBuffer\');\n\nmodule.exports = function (binString, type) {\n  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});\n};\n},{"./binaryStringToArrayBuffer":41,"./blob":43}],43:[function(require,module,exports){\n"use strict";\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don\'t support the native Blob constructor (e.g.\n// old QtWebKit versions, Android < 4.4).\nfunction createBlob(parts, properties) {\n  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n  parts = parts || [];\n  properties = properties || {};\n  try {\n    return new Blob(parts, properties);\n  } catch (e) {\n    if (e.name !== "TypeError") {\n      throw e;\n    }\n    var Builder = typeof BlobBuilder !== \'undefined\' ? BlobBuilder :\n                  typeof MSBlobBuilder !== \'undefined\' ? MSBlobBuilder :\n                  typeof MozBlobBuilder !== \'undefined\' ? MozBlobBuilder :\n                  WebKitBlobBuilder;\n    var builder = new Builder();\n    for (var i = 0; i < parts.length; i += 1) {\n      builder.append(parts[i]);\n    }\n    return builder.getBlob(properties.type);\n  }\n}\n\nmodule.exports = createBlob;\n\n\n},{}],44:[function(require,module,exports){\n\'use strict\';\n\nvar Promise = require(\'../promise\');\nvar readAsBinaryString = require(\'./readAsBinaryString\');\nvar btoa = require(\'./base64\').btoa;\n\nmodule.exports = function blobToBase64(blobOrBuffer) {\n  return new Promise(function (resolve) {\n    readAsBinaryString(blobOrBuffer, function (bin) {\n      resolve(btoa(bin));\n    });\n  });\n};\n},{"../promise":77,"./base64":39,"./readAsBinaryString":49}],45:[function(require,module,exports){\n// hey guess what, we don\'t need this in the browser\nmodule.exports = {};\n},{}],46:[function(require,module,exports){\n\'use strict\';\n\nfunction cloneArrayBuffer(buff) {\n  if (typeof buff.slice === \'function\') {\n    return buff.slice(0);\n  }\n  // IE10-11 slice() polyfill\n  var target = new ArrayBuffer(buff.byteLength);\n  var targetArray = new Uint8Array(target);\n  var sourceArray = new Uint8Array(buff);\n  targetArray.set(sourceArray);\n  return target;\n}\n\nmodule.exports = function cloneBinaryObject(object) {\n  if (object instanceof ArrayBuffer) {\n    return cloneArrayBuffer(object);\n  }\n  var size = object.size;\n  var type = object.type;\n  // Blob\n  if (typeof object.slice === \'function\') {\n    return object.slice(0, size, type);\n  }\n  // PhantomJS slice() replacement\n  return object.webkitSlice(0, size, type);\n};\n\n},{}],47:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = function isBinaryObject(object) {\n  return object instanceof ArrayBuffer ||\n    (typeof Blob !== \'undefined\' && object instanceof Blob);\n};\n},{}],48:[function(require,module,exports){\n\'use strict\';\n\n// simplified API. universal browser support is assumed\nmodule.exports = function (blob, callback) {\n  var reader = new FileReader();\n  reader.onloadend = function (e) {\n    var result = e.target.result || new ArrayBuffer(0);\n    callback(result);\n  };\n  reader.readAsArrayBuffer(blob);\n};\n},{}],49:[function(require,module,exports){\n\'use strict\';\n\nvar arrayBufferToBinaryString = require(\'./arrayBufferToBinaryString\');\n\n// shim for browsers that don\'t support it\nmodule.exports = function (blob, callback) {\n  var reader = new FileReader();\n  var hasBinaryString = typeof reader.readAsBinaryString === \'function\';\n  reader.onloadend = function (e) {\n    var result = e.target.result || \'\';\n    if (hasBinaryString) {\n      return callback(result);\n    }\n    callback(arrayBufferToBinaryString(result));\n  };\n  if (hasBinaryString) {\n    reader.readAsBinaryString(blob);\n  } else {\n    reader.readAsArrayBuffer(blob);\n  }\n};\n},{"./arrayBufferToBinaryString":38}],50:[function(require,module,exports){\n\'use strict\';\n\nvar pick = require(\'../deps/pick\');\n\n// shim for P/CouchDB adapters that don\'t directly implement _bulk_get\nfunction bulkGet(db, opts, callback) {\n  var requests = Array.isArray(opts) ? opts : opts.docs;\n  if (!requests.length) {\n    return callback(null, {results: []});\n  }\n\n  // consolidate into one request per doc if possible\n  var requestsById = {};\n  requests.forEach(function (request) {\n    if (request.id in requestsById) {\n      requestsById[request.id].push(request);\n    } else {\n      requestsById[request.id] = [request];\n    }\n  });\n\n  var numDocs = Object.keys(requestsById).length;\n  var numDone = 0;\n  var perDocResults = new Array(numDocs);\n\n  function collapseResults() {\n    var results = [];\n    perDocResults.forEach(function (res) {\n      res.docs.forEach(function (info) {\n        results.push({\n          id: res.id,\n          docs: [info]\n        });\n      });\n    });\n    callback(null, {results: results});\n  }\n\n  function checkDone() {\n    if (++numDone === numDocs) {\n      collapseResults();\n    }\n  }\n\n  function gotResult(i, id, docs) {\n    perDocResults[i] = {id: id, docs: docs};\n    checkDone();\n  }\n\n  Object.keys(requestsById).forEach(function (docId, i) {\n\n    var docRequests = requestsById[docId];\n\n    // just use the first request as the "template"\n    // TODO: The _bulk_get API allows for more subtle use cases than this,\n    // but for now it is unlikely that there will be a mix of different\n    // "atts_since" or "attachments" in the same request, since it\'s just\n    // replicate.js that is using this for the moment.\n    // Also, atts_since is aspirational, since we don\'t support it yet.\n    var docOpts = pick(docRequests[0], [\'atts_since\', \'attachments\']);\n    docOpts.open_revs = docRequests.map(function (request) {\n      // rev is required, open_revs disallowed\n      return request.rev;\n    });\n    // globally-supplied options\n    [\'revs\', \'attachments\', \'binary\'].forEach(function (param) {\n      if (param in opts) {\n        docOpts[param] = opts[param];\n      }\n    });\n    db.get(docId, docOpts, function (err, res) {\n      gotResult(i, docId, err ? [{error: err}] : res);\n    });\n  });\n}\n\nmodule.exports = bulkGet;\n},{"../deps/pick":76}],51:[function(require,module,exports){\n\'use strict\';\n\nvar isBinaryObject = require(\'./binary/isBinaryObject\');\nvar cloneBinaryObject = require(\'./binary/cloneBinaryObject\');\n\nmodule.exports = function clone(object) {\n  var newObject;\n  var i;\n  var len;\n\n  if (!object || typeof object !== \'object\') {\n    return object;\n  }\n\n  if (Array.isArray(object)) {\n    newObject = [];\n    for (i = 0, len = object.length; i < len; i++) {\n      newObject[i] = clone(object[i]);\n    }\n    return newObject;\n  }\n\n  // special case: to avoid inconsistencies between IndexedDB\n  // and other backends, we automatically stringify Dates\n  if (object instanceof Date) {\n    return object.toISOString();\n  }\n\n  if (isBinaryObject(object)) {\n    return cloneBinaryObject(object);\n  }\n\n  newObject = {};\n  for (i in object) {\n    if (Object.prototype.hasOwnProperty.call(object, i)) {\n      var value = clone(object[i]);\n      if (typeof value !== \'undefined\') {\n        newObject[i] = value;\n      }\n    }\n  }\n  return newObject;\n};\n\n},{"./binary/cloneBinaryObject":46,"./binary/isBinaryObject":47}],52:[function(require,module,exports){\n\'use strict\';\n\nvar winningRev = require(\'../../deps/merge/winningRev\');\n\nfunction getTrees(node) {\n  return node.ids;\n}\n\n// check if a specific revision of a doc has been deleted\n//  - metadata: the metadata object from the doc store\n//  - rev: (optional) the revision to check. defaults to winning revision\nfunction isDeleted(metadata, rev) {\n  if (!rev) {\n    rev = winningRev(metadata);\n  }\n  var id = rev.substring(rev.indexOf(\'-\') + 1);\n  var toVisit = metadata.rev_tree.map(getTrees);\n\n  var tree;\n  while ((tree = toVisit.pop())) {\n    if (tree[0] === id) {\n      return !!tree[1].deleted;\n    }\n    toVisit = toVisit.concat(tree[2]);\n  }\n}\n\nmodule.exports = isDeleted;\n},{"../../deps/merge/winningRev":72}],53:[function(require,module,exports){\n\'use strict\';\n\nfunction isLocalId(id) {\n  return (/^_local/).test(id);\n}\n\nmodule.exports = isLocalId;\n},{}],54:[function(require,module,exports){\n\'use strict\';\n\nvar parseDdocFunctionName = require(\'./parseDdocFunctionName\');\n\nmodule.exports = function normalizeDesignDocFunctionName(s) {\n  var normalized = parseDdocFunctionName(s);\n  return normalized ? normalized.join(\'/\') : null;\n};\n},{"./parseDdocFunctionName":55}],55:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = function parseDesignDocFunctionName(s) {\n  if (!s) {\n    return null;\n  }\n  var parts = s.split(\'/\');\n  if (parts.length === 2) {\n    return parts;\n  }\n  if (parts.length === 1) {\n    return [s, s];\n  }\n  return null;\n};\n},{}],56:[function(require,module,exports){\n\'use strict\';\n\nvar errors = require(\'./../errors\');\nvar uuid = require(\'./../uuid\');\n\nfunction toObject(array) {\n  return array.reduce(function (obj, item) {\n    obj[item] = true;\n    return obj;\n  }, {});\n}\n// List of top level reserved words for doc\nvar reservedWords = toObject([\n  \'_id\',\n  \'_rev\',\n  \'_attachments\',\n  \'_deleted\',\n  \'_revisions\',\n  \'_revs_info\',\n  \'_conflicts\',\n  \'_deleted_conflicts\',\n  \'_local_seq\',\n  \'_rev_tree\',\n  //replication documents\n  \'_replication_id\',\n  \'_replication_state\',\n  \'_replication_state_time\',\n  \'_replication_state_reason\',\n  \'_replication_stats\',\n  // Specific to Couchbase Sync Gateway\n  \'_removed\'\n]);\n\n// List of reserved words that should end up the document\nvar dataWords = toObject([\n  \'_attachments\',\n  //replication documents\n  \'_replication_id\',\n  \'_replication_state\',\n  \'_replication_state_time\',\n  \'_replication_state_reason\',\n  \'_replication_stats\'\n]);\n\n// Determine id an ID is valid\n//   - invalid IDs begin with an underescore that does not begin \'_design\' or\n//     \'_local\'\n//   - any other string value is a valid id\n// Returns the specific error object for each case\nexports.invalidIdError = function (id) {\n  var err;\n  if (!id) {\n    err = errors.error(errors.MISSING_ID);\n  } else if (typeof id !== \'string\') {\n    err = errors.error(errors.INVALID_ID);\n  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {\n    err = errors.error(errors.RESERVED_ID);\n  }\n  if (err) {\n    throw err;\n  }\n};\n\nfunction parseRevisionInfo(rev) {\n  if (!/^\\d+\\-./.test(rev)) {\n    return errors.error(errors.INVALID_REV);\n  }\n  var idx = rev.indexOf(\'-\');\n  var left = rev.substring(0, idx);\n  var right = rev.substring(idx + 1);\n  return {\n    prefix: parseInt(left, 10),\n    id: right\n  };\n}\n\nfunction makeRevTreeFromRevisions(revisions, opts) {\n  var pos = revisions.start - revisions.ids.length + 1;\n\n  var revisionIds = revisions.ids;\n  var ids = [revisionIds[0], opts, []];\n\n  for (var i = 1, len = revisionIds.length; i < len; i++) {\n    ids = [revisionIds[i], {status: \'missing\'}, [ids]];\n  }\n\n  return [{\n    pos: pos,\n    ids: ids\n  }];\n}\n\n// Preprocess documents, parse their revisions, assign an id and a\n// revision for new writes that are missing them, etc\nexports.parseDoc = function (doc, newEdits) {\n\n  var nRevNum;\n  var newRevId;\n  var revInfo;\n  var opts = {status: \'available\'};\n  if (doc._deleted) {\n    opts.deleted = true;\n  }\n\n  if (newEdits) {\n    if (!doc._id) {\n      doc._id = uuid();\n    }\n    newRevId = uuid(32, 16).toLowerCase();\n    if (doc._rev) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      doc._rev_tree = [{\n        pos: revInfo.prefix,\n        ids: [revInfo.id, {status: \'missing\'}, [[newRevId, opts, []]]]\n      }];\n      nRevNum = revInfo.prefix + 1;\n    } else {\n      doc._rev_tree = [{\n        pos: 1,\n        ids : [newRevId, opts, []]\n      }];\n      nRevNum = 1;\n    }\n  } else {\n    if (doc._revisions) {\n      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);\n      nRevNum = doc._revisions.start;\n      newRevId = doc._revisions.ids[0];\n    }\n    if (!doc._rev_tree) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      nRevNum = revInfo.prefix;\n      newRevId = revInfo.id;\n      doc._rev_tree = [{\n        pos: nRevNum,\n        ids: [newRevId, opts, []]\n      }];\n    }\n  }\n\n  exports.invalidIdError(doc._id);\n\n  doc._rev = nRevNum + \'-\' + newRevId;\n\n  var result = {metadata : {}, data : {}};\n  for (var key in doc) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(doc, key)) {\n      var specialKey = key[0] === \'_\';\n      if (specialKey && !reservedWords[key]) {\n        var error = errors.error(errors.DOC_VALIDATION, key);\n        error.message = errors.DOC_VALIDATION.message + \': \' + key;\n        throw error;\n      } else if (specialKey && !dataWords[key]) {\n        result.metadata[key.slice(1)] = doc[key];\n      } else {\n        result.data[key] = doc[key];\n      }\n    }\n  }\n  return result;\n};\n\n},{"./../errors":62,"./../uuid":80}],57:[function(require,module,exports){\n\'use strict\';\n\nvar base64 = require(\'../binary/base64\');\nvar arrayBuffToBinString = require(\'../binary/arrayBufferToBinaryString\');\nvar readAsArrayBuffer = require(\'../binary/readAsArrayBuffer\');\nvar binStringToBlobOrBuffer = require(\'../binary/binaryStringToBlobOrBuffer\');\nvar errors = require(\'../errors\');\nvar md5 = require(\'../md5\');\n\nfunction preprocessAttachments(docInfos, blobType, callback) {\n\n  if (!docInfos.length) {\n    return callback();\n  }\n\n  var docv = 0;\n\n  function parseBase64(data) {\n    try {\n      return base64.atob(data);\n    } catch (e) {\n      var err = errors.error(errors.BAD_ARG,\n        \'Attachments need to be base64 encoded\');\n      return {error: err};\n    }\n  }\n\n  function preprocessAttachment(att, callback) {\n    if (att.stub) {\n      return callback();\n    }\n    if (typeof att.data === \'string\') {\n      // input is a base64 string\n\n      var asBinary = parseBase64(att.data);\n      if (asBinary.error) {\n        return callback(asBinary.error);\n      }\n\n      att.length = asBinary.length;\n      if (blobType === \'blob\') {\n        att.data = binStringToBlobOrBuffer(asBinary, att.content_type);\n      } else if (blobType === \'base64\') {\n        att.data = base64.btoa(asBinary);\n      } else { // binary\n        att.data = asBinary;\n      }\n      md5(asBinary).then(function (result) {\n        att.digest = \'md5-\' + result;\n        callback();\n      });\n    } else { // input is a blob\n      readAsArrayBuffer(att.data, function (buff) {\n        if (blobType === \'binary\') {\n          att.data = arrayBuffToBinString(buff);\n        } else if (blobType === \'base64\') {\n          att.data = base64.btoa(arrayBuffToBinString(buff));\n        }\n        md5(buff).then(function (result) {\n          att.digest = \'md5-\' + result;\n          att.length = buff.byteLength;\n          callback();\n        });\n      });\n    }\n  }\n\n  var overallErr;\n\n  docInfos.forEach(function (docInfo) {\n    var attachments = docInfo.data && docInfo.data._attachments ?\n      Object.keys(docInfo.data._attachments) : [];\n    var recv = 0;\n\n    if (!attachments.length) {\n      return done();\n    }\n\n    function processedAttachment(err) {\n      overallErr = err;\n      recv++;\n      if (recv === attachments.length) {\n        done();\n      }\n    }\n\n    for (var key in docInfo.data._attachments) {\n      if (docInfo.data._attachments.hasOwnProperty(key)) {\n        preprocessAttachment(docInfo.data._attachments[key],\n          processedAttachment);\n      }\n    }\n  });\n\n  function done() {\n    docv++;\n    if (docInfos.length === docv) {\n      if (overallErr) {\n        callback(overallErr);\n      } else {\n        callback();\n      }\n    }\n  }\n}\n\nmodule.exports = preprocessAttachments;\n},{"../binary/arrayBufferToBinaryString":38,"../binary/base64":39,"../binary/binaryStringToBlobOrBuffer":42,"../binary/readAsArrayBuffer":48,"../errors":62,"../md5":65}],58:[function(require,module,exports){\n\'use strict\';\n\nvar errors = require(\'../errors\');\nvar updateDoc = require(\'./updateDoc\');\nvar isDeleted = require(\'./isDeleted\');\nvar isLocalId = require(\'./isLocalId\');\nvar calculateWinningRev = require(\'../../deps/merge/winningRev\');\nvar merge = require(\'../../deps/merge\');\nvar collections = require(\'pouchdb-collections\');\nvar Map = collections.Map;\n\nfunction processDocs(docInfos, api, fetchedDocs, tx, results, writeDoc, opts,\n                     overallCallback) {\n\n  function insertDoc(docInfo, resultsIdx, callback) {\n    // Cant insert new deleted documents\n    var winningRev = calculateWinningRev(docInfo.metadata);\n    var deleted = isDeleted(docInfo.metadata, winningRev);\n    if (\'was_delete\' in opts && deleted) {\n      results[resultsIdx] = errors.error(errors.MISSING_DOC, \'deleted\');\n      return callback();\n    }\n\n    var delta = deleted ? 0 : 1;\n\n    writeDoc(docInfo, winningRev, deleted, deleted, false,\n      delta, resultsIdx, callback);\n  }\n\n  var newEdits = opts.new_edits;\n  var idsToDocs = new Map();\n\n  var docsDone = 0;\n  var docsToDo = docInfos.length;\n\n  function checkAllDocsDone() {\n    if (++docsDone === docsToDo && overallCallback) {\n      overallCallback();\n    }\n  }\n\n  docInfos.forEach(function (currentDoc, resultsIdx) {\n\n    if (currentDoc._id && isLocalId(currentDoc._id)) {\n      api[currentDoc._deleted ? \'_removeLocal\' : \'_putLocal\'](\n        currentDoc, {ctx: tx}, function (err) {\n          if (err) {\n            results[resultsIdx] = err;\n          } else {\n            results[resultsIdx] = {ok: true};\n          }\n          checkAllDocsDone();\n        });\n      return;\n    }\n\n    var id = currentDoc.metadata.id;\n    if (idsToDocs.has(id)) {\n      docsToDo--; // duplicate\n      idsToDocs.get(id).push([currentDoc, resultsIdx]);\n    } else {\n      idsToDocs.set(id, [[currentDoc, resultsIdx]]);\n    }\n  });\n\n  // in the case of new_edits, the user can provide multiple docs\n  // with the same id. these need to be processed sequentially\n  idsToDocs.forEach(function (docs, id) {\n    var numDone = 0;\n\n    function docWritten() {\n      if (++numDone < docs.length) {\n        nextDoc();\n      } else {\n        checkAllDocsDone();\n      }\n    }\n    function nextDoc() {\n      var value = docs[numDone];\n      var currentDoc = value[0];\n      var resultsIdx = value[1];\n\n      if (fetchedDocs.has(id)) {\n        updateDoc(fetchedDocs.get(id), currentDoc, results,\n          resultsIdx, docWritten, writeDoc, newEdits);\n      } else {\n        // Ensure stemming applies to new writes as well\n        var merged = merge([], currentDoc.metadata.rev_tree[0], 1000);\n        currentDoc.metadata.rev_tree = merged.tree;\n        insertDoc(currentDoc, resultsIdx, docWritten);\n      }\n    }\n    nextDoc();\n  });\n}\n\nmodule.exports = processDocs;\n\n},{"../../deps/merge":68,"../../deps/merge/winningRev":72,"../errors":62,"./isDeleted":52,"./isLocalId":53,"./updateDoc":59,"pouchdb-collections":106}],59:[function(require,module,exports){\n\'use strict\';\n\nvar errors = require(\'../errors\');\nvar isDeleted = require(\'./isDeleted\');\nvar parseDoc = require(\'./parseDoc\').parseDoc;\nvar calculateWinningRev = require(\'../../deps/merge/winningRev\');\nvar merge = require(\'../../deps/merge\');\nvar revExists = require(\'../../deps/merge/revExists\');\n\nfunction updateDoc(prev, docInfo, results, i, cb, writeDoc, newEdits) {\n\n  if (revExists(prev.rev_tree, docInfo.metadata.rev)) {\n    results[i] = docInfo;\n    return cb();\n  }\n\n  // sometimes this is pre-calculated. historically not always\n  var previousWinningRev = prev.winningRev || calculateWinningRev(prev);\n  var previouslyDeleted = \'deleted\' in prev ? prev.deleted :\n    isDeleted(prev, previousWinningRev);\n  var deleted = \'deleted\' in docInfo.metadata ? docInfo.metadata.deleted :\n    isDeleted(docInfo.metadata);\n  var isRoot = /^1-/.test(docInfo.metadata.rev);\n\n  if (previouslyDeleted && !deleted && newEdits && isRoot) {\n    var newDoc = docInfo.data;\n    newDoc._rev = previousWinningRev;\n    newDoc._id = docInfo.metadata.id;\n    docInfo = parseDoc(newDoc, newEdits);\n  }\n\n  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], 1000);\n\n  var inConflict = newEdits && (((previouslyDeleted && deleted) ||\n    (!previouslyDeleted && merged.conflicts !== \'new_leaf\') ||\n    (previouslyDeleted && !deleted && merged.conflicts === \'new_branch\')));\n\n  if (inConflict) {\n    var err = errors.error(errors.REV_CONFLICT);\n    results[i] = err;\n    return cb();\n  }\n\n  var newRev = docInfo.metadata.rev;\n  docInfo.metadata.rev_tree = merged.tree;\n  /* istanbul ignore else */\n  if (prev.rev_map) {\n    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb\n  }\n\n  // recalculate\n  var winningRev = calculateWinningRev(docInfo.metadata);\n  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev);\n\n  // calculate the total number of documents that were added/removed,\n  // from the perspective of total_rows/doc_count\n  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :\n    previouslyDeleted < winningRevIsDeleted ? -1 : 1;\n\n  var newRevIsDeleted;\n  if (newRev === winningRev) {\n    // if the new rev is the same as the winning rev, we can reuse that value\n    newRevIsDeleted = winningRevIsDeleted;\n  } else {\n    // if they\'re not the same, then we need to recalculate\n    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);\n  }\n\n  writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n    true, delta, i, cb);\n}\n\nmodule.exports = updateDoc;\n},{"../../deps/merge":68,"../../deps/merge/revExists":69,"../../deps/merge/winningRev":72,"../errors":62,"./isDeleted":52,"./parseDoc":56}],60:[function(require,module,exports){\n\'use strict\';\n\nvar isChromeApp = require(\'./isChromeApp\');\n\nvar hasLocal;\n\nif (isChromeApp()) {\n  hasLocal = false;\n} else {\n  try {\n    localStorage.setItem(\'_pouch_check_localstorage\', 1);\n    hasLocal = !!localStorage.getItem(\'_pouch_check_localstorage\');\n  } catch (e) {\n    hasLocal = false;\n  }\n}\n\nmodule.exports = function hasLocalStorage() {\n  return hasLocal;\n};\n},{"./isChromeApp":61}],61:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = function isChromeApp() {\n  return (typeof chrome !== "undefined" &&\n    typeof chrome.storage !== "undefined" &&\n    typeof chrome.storage.local !== "undefined");\n};\n},{}],62:[function(require,module,exports){\n"use strict";\n\nvar inherits = require(\'inherits\');\ninherits(PouchError, Error);\n\nfunction PouchError(opts) {\n  Error.call(this, opts.reason);\n  this.status = opts.status;\n  this.name = opts.error;\n  this.message = opts.reason;\n  this.error = true;\n}\n\nPouchError.prototype.toString = function () {\n  return JSON.stringify({\n    status: this.status,\n    name: this.name,\n    message: this.message,\n    reason: this.reason\n  });\n};\n\nexports.UNAUTHORIZED = new PouchError({\n  status: 401,\n  error: \'unauthorized\',\n  reason: "Name or password is incorrect."\n});\n\nexports.MISSING_BULK_DOCS = new PouchError({\n  status: 400,\n  error: \'bad_request\',\n  reason: "Missing JSON list of \'docs\'"\n});\n\nexports.MISSING_DOC = new PouchError({\n  status: 404,\n  error: \'not_found\',\n  reason: \'missing\'\n});\n\nexports.REV_CONFLICT = new PouchError({\n  status: 409,\n  error: \'conflict\',\n  reason: \'Document update conflict\'\n});\n\nexports.INVALID_ID = new PouchError({\n  status: 400,\n  error: \'invalid_id\',\n  reason: \'_id field must contain a string\'\n});\n\nexports.MISSING_ID = new PouchError({\n  status: 412,\n  error: \'missing_id\',\n  reason: \'_id is required for puts\'\n});\n\nexports.RESERVED_ID = new PouchError({\n  status: 400,\n  error: \'bad_request\',\n  reason: \'Only reserved document ids may start with underscore.\'\n});\n\nexports.NOT_OPEN = new PouchError({\n  status: 412,\n  error: \'precondition_failed\',\n  reason: \'Database not open\'\n});\n\nexports.UNKNOWN_ERROR = new PouchError({\n  status: 500,\n  error: \'unknown_error\',\n  reason: \'Database encountered an unknown error\'\n});\n\nexports.BAD_ARG = new PouchError({\n  status: 500,\n  error: \'badarg\',\n  reason: \'Some query argument is invalid\'\n});\n\nexports.INVALID_REQUEST = new PouchError({\n  status: 400,\n  error: \'invalid_request\',\n  reason: \'Request was invalid\'\n});\n\nexports.QUERY_PARSE_ERROR = new PouchError({\n  status: 400,\n  error: \'query_parse_error\',\n  reason: \'Some query parameter is invalid\'\n});\n\nexports.DOC_VALIDATION = new PouchError({\n  status: 500,\n  error: \'doc_validation\',\n  reason: \'Bad special document member\'\n});\n\nexports.BAD_REQUEST = new PouchError({\n  status: 400,\n  error: \'bad_request\',\n  reason: \'Something wrong with the request\'\n});\n\nexports.NOT_AN_OBJECT = new PouchError({\n  status: 400,\n  error: \'bad_request\',\n  reason: \'Document must be a JSON object\'\n});\n\nexports.DB_MISSING = new PouchError({\n  status: 404,\n  error: \'not_found\',\n  reason: \'Database not found\'\n});\n\nexports.IDB_ERROR = new PouchError({\n  status: 500,\n  error: \'indexed_db_went_bad\',\n  reason: \'unknown\'\n});\n\nexports.WSQ_ERROR = new PouchError({\n  status: 500,\n  error: \'web_sql_went_bad\',\n  reason: \'unknown\'\n});\n\nexports.LDB_ERROR = new PouchError({\n  status: 500,\n  error: \'levelDB_went_went_bad\',\n  reason: \'unknown\'\n});\n\nexports.FORBIDDEN = new PouchError({\n  status: 403,\n  error: \'forbidden\',\n  reason: \'Forbidden by design doc validate_doc_update function\'\n});\n\nexports.INVALID_REV = new PouchError({\n  status: 400,\n  error: \'bad_request\',\n  reason: \'Invalid rev format\'\n});\n\nexports.FILE_EXISTS = new PouchError({\n  status: 412,\n  error: \'file_exists\',\n  reason: \'The database could not be created, the file already exists.\'\n});\n\nexports.MISSING_STUB = new PouchError({\n  status: 412,\n  error: \'missing_stub\'\n});\n\nexports.error = function (error, reason, name) {\n  function CustomPouchError(reason) {\n    // inherit error properties from our parent error manually\n    // so as to allow proper JSON parsing.\n    /* jshint ignore:start */\n    for (var p in error) {\n      if (typeof error[p] !== \'function\') {\n        this[p] = error[p];\n      }\n    }\n    /* jshint ignore:end */\n    if (name !== undefined) {\n      this.name = name;\n    }\n    if (reason !== undefined) {\n      this.reason = reason;\n    }\n  }\n  CustomPouchError.prototype = PouchError.prototype;\n  return new CustomPouchError(reason);\n};\n\n// Find one of the errors defined above based on the value\n// of the specified property.\n// If reason is provided prefer the error matching that reason.\n// This is for differentiating between errors with the same name and status,\n// eg, bad_request.\nexports.getErrorTypeByProp = function (prop, value, reason) {\n  var errors = exports;\n  var keys = Object.keys(errors).filter(function (key) {\n    var error = errors[key];\n    return typeof error !== \'function\' && error[prop] === value;\n  });\n  var key = reason && keys.filter(function (key) {\n        var error = errors[key];\n        return error.message === reason;\n      })[0] || keys[0];\n  return (key) ? errors[key] : null;\n};\n\nexports.generateErrorFromResponse = function (res) {\n  var error, errName, errType, errMsg, errReason;\n  var errors = exports;\n\n  errName = (res.error === true && typeof res.name === \'string\') ?\n              res.name :\n              res.error;\n  errReason = res.reason;\n  errType = errors.getErrorTypeByProp(\'name\', errName, errReason);\n\n  if (res.missing ||\n      errReason === \'missing\' ||\n      errReason === \'deleted\' ||\n      errName === \'not_found\') {\n    errType = errors.MISSING_DOC;\n  } else if (errName === \'doc_validation\') {\n    // doc validation needs special treatment since\n    // res.reason depends on the validation error.\n    // see utils.js\n    errType = errors.DOC_VALIDATION;\n    errMsg = errReason;\n  } else if (errName === \'bad_request\' && errType.message !== errReason) {\n    // if bad_request error already found based on reason don\'t override.\n    errType = errors.BAD_REQUEST;\n  }\n\n  // fallback to error by status or unknown error.\n  if (!errType) {\n    errType = errors.getErrorTypeByProp(\'status\', res.status, errReason) ||\n                errors.UNKNOWN_ERROR;\n  }\n\n  error = errors.error(errType, errReason, errName);\n\n  // Keep custom message.\n  if (errMsg) {\n    error.message = errMsg;\n  }\n\n  // Keep helpful response data in our error messages.\n  if (res.id) {\n    error.id = res.id;\n  }\n  if (res.status) {\n    error.status = res.status;\n  }\n  if (res.missing) {\n    error.missing = res.missing;\n  }\n\n  return error;\n};\n\n},{"inherits":10}],63:[function(require,module,exports){\n\'use strict\';\n\nvar clone = require(\'./clone\');\n\nfunction extendInner(obj, otherObj) {\n  for (var key in otherObj) {\n    if (otherObj.hasOwnProperty(key)) {\n      var value = clone(otherObj[key]);\n      if (typeof value !== \'undefined\') {\n        obj[key] = value;\n      }\n    }\n  }\n}\n\nmodule.exports = function extend(obj, obj2, obj3) {\n  extendInner(obj, obj2);\n  if (obj3) {\n    extendInner(obj, obj3);\n  }\n  return obj;\n};\n},{"./clone":51}],64:[function(require,module,exports){\n\'use strict\';\n\n// flatten an array of arrays, with optional non-arrays inside\nmodule.exports = function flatten(arrays) {\n  var res = [];\n  arrays.forEach(function (array) {\n    if (Array.isArray(array)) {\n      res = res.concat(array);\n    } else {\n      res.push(array);\n    }\n  });\n  return res;\n};\n},{}],65:[function(require,module,exports){\n(function (global){\n\'use strict\';\n\nvar toPromise = require(\'./toPromise\');\nvar base64 = require(\'./binary/base64\');\nvar Md5 = require(\'spark-md5\');\nvar setImmediateShim = global.setImmediate || global.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\n// convert a 64-bit int to a binary string\nfunction intToString(int) {\n  return String.fromCharCode(int & 0xff) +\n    String.fromCharCode((int >>> 8) & 0xff) +\n    String.fromCharCode((int >>> 16) & 0xff) +\n    String.fromCharCode((int >>> 24) & 0xff);\n}\n\n// convert an array of 64-bit ints into\n// a base64-encoded string\nfunction rawToBase64(raw) {\n  var res = \'\';\n  for (var i = 0, len = raw.length; i < len; i++) {\n    res += intToString(raw[i]);\n  }\n  return base64.btoa(res);\n}\n\nfunction appendBuffer(buffer, data, start, end) {\n  if (start > 0 || end < data.byteLength) {\n    // only create a subarray if we really need to\n    data = new Uint8Array(data, start,\n      Math.min(end, data.byteLength) - start);\n  }\n  buffer.append(data);\n}\n\nfunction appendString(buffer, data, start, end) {\n  if (start > 0 || end < data.length) {\n    // only create a substring if we really need to\n    data = data.substring(start, end);\n  }\n  buffer.appendBinary(data);\n}\n\nmodule.exports = toPromise(function (data, callback) {\n  var inputIsString = typeof data === \'string\';\n  var len = inputIsString ? data.length : data.byteLength;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n\n  var append = inputIsString ? appendString : appendBuffer;\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end);\n      setImmediateShim(loadNextChunk);\n    } else {\n      append(buffer, data, start, end);\n      var raw = buffer.end(true);\n      var base64 = rawToBase64(raw);\n      callback(null, base64);\n      buffer.destroy();\n    }\n  }\n  loadNextChunk();\n});\n\n}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})\n},{"./binary/base64":39,"./toPromise":78,"spark-md5":107}],66:[function(require,module,exports){\n\'use strict\';\n\nvar winningRev = require(\'./winningRev\');\nvar collectLeaves = require(\'./collectLeaves\');\n\n// returns revs of all conflicts that is leaves such that\n// 1. are not deleted and\n// 2. are different than winning revision\nmodule.exports = function collectConflicts(metadata) {\n  var win = winningRev(metadata);\n  var leaves = collectLeaves(metadata.rev_tree);\n  var conflicts = [];\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    var leaf = leaves[i];\n    if (leaf.rev !== win && !leaf.opts.deleted) {\n      conflicts.push(leaf.rev);\n    }\n  }\n  return conflicts;\n};\n},{"./collectLeaves":67,"./winningRev":72}],67:[function(require,module,exports){\n\'use strict\';\n\nvar traverseRevTree = require(\'./traverseRevTree\');\n\nfunction sortByPos(a, b) {\n  return a.pos - b.pos;\n}\n\nmodule.exports = function collectLeaves(revs) {\n  var leaves = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {\n    if (isLeaf) {\n      leaves.push({rev: pos + "-" + id, pos: pos, opts: opts});\n    }\n  });\n  leaves.sort(sortByPos).reverse();\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    delete leaves[i].pos;\n  }\n  return leaves;\n};\n},{"./traverseRevTree":71}],68:[function(require,module,exports){\n\'use strict\';\n\n// for a better overview of what this is doing, read:\n// https://github.com/apache/couchdb/blob/master/src/couchdb/couch_key_tree.erl\n//\n// But for a quick intro, CouchDB uses a revision tree to store a documents\n// history, A -> B -> C, when a document has conflicts, that is a branch in the\n// tree, A -> (B1 | B2 -> C), We store these as a nested array in the format\n//\n// KeyTree = [Path ... ]\n// Path = {pos: position_from_root, ids: Tree}\n// Tree = [Key, Opts, [Tree, ...]], in particular single node: [Key, []]\n\nvar rootToLeaf = require(\'./rootToLeaf\');\n\nfunction sortByPos(a, b) {\n  return a.pos - b.pos;\n}\n\n// classic binary search\nfunction binarySearch(arr, item, comparator) {\n  var low = 0;\n  var high = arr.length;\n  var mid;\n  while (low < high) {\n    mid = (low + high) >>> 1;\n    if (comparator(arr[mid], item) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\n\n// assuming the arr is sorted, insert the item in the proper place\nfunction insertSorted(arr, item, comparator) {\n  var idx = binarySearch(arr, item, comparator);\n  arr.splice(idx, 0, item);\n}\n\n// Turn a path as a flat array into a tree with a single branch.\n// If any should be stemmed from the beginning of the array, that\'s passed\n// in as the second argument\nfunction pathToTree(path, numStemmed) {\n  var root;\n  var leaf;\n  for (var i = numStemmed, len = path.length; i < len; i++) {\n    var node = path[i];\n    var currentLeaf = [node.id, node.opts, []];\n    if (leaf) {\n      leaf[2].push(currentLeaf);\n      leaf = currentLeaf;\n    } else {\n      root = leaf = currentLeaf;\n    }\n  }\n  return root;\n}\n\n// compare the IDs of two trees\nfunction compareTree(a, b) {\n  return a[0] < b[0] ? -1 : 1;\n}\n\n// Merge two trees together\n// The roots of tree1 and tree2 must be the same revision\nfunction mergeTree(in_tree1, in_tree2) {\n  var queue = [{tree1: in_tree1, tree2: in_tree2}];\n  var conflicts = false;\n  while (queue.length > 0) {\n    var item = queue.pop();\n    var tree1 = item.tree1;\n    var tree2 = item.tree2;\n\n    if (tree1[1].status || tree2[1].status) {\n      tree1[1].status =\n        (tree1[1].status ===  \'available\' ||\n        tree2[1].status === \'available\') ? \'available\' : \'missing\';\n    }\n\n    for (var i = 0; i < tree2[2].length; i++) {\n      if (!tree1[2][0]) {\n        conflicts = \'new_leaf\';\n        tree1[2][0] = tree2[2][i];\n        continue;\n      }\n\n      var merged = false;\n      for (var j = 0; j < tree1[2].length; j++) {\n        if (tree1[2][j][0] === tree2[2][i][0]) {\n          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});\n          merged = true;\n        }\n      }\n      if (!merged) {\n        conflicts = \'new_branch\';\n        insertSorted(tree1[2], tree2[2][i], compareTree);\n      }\n    }\n  }\n  return {conflicts: conflicts, tree: in_tree1};\n}\n\nfunction doMerge(tree, path, dontExpand) {\n  var restree = [];\n  var conflicts = false;\n  var merged = false;\n  var res;\n\n  if (!tree.length) {\n    return {tree: [path], conflicts: \'new_leaf\'};\n  }\n\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var branch = tree[i];\n    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {\n      // Paths start at the same position and have the same root, so they need\n      // merged\n      res = mergeTree(branch.ids, path.ids);\n      restree.push({pos: branch.pos, ids: res.tree});\n      conflicts = conflicts || res.conflicts;\n      merged = true;\n    } else if (dontExpand !== true) {\n      // The paths start at a different position, take the earliest path and\n      // traverse up until it as at the same point from root as the path we\n      // want to merge.  If the keys match we return the longer path with the\n      // other merged After stemming we dont want to expand the trees\n\n      var t1 = branch.pos < path.pos ? branch : path;\n      var t2 = branch.pos < path.pos ? path : branch;\n      var diff = t2.pos - t1.pos;\n\n      var candidateParents = [];\n\n      var trees = [];\n      trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});\n      while (trees.length > 0) {\n        var item = trees.pop();\n        if (item.diff === 0) {\n          if (item.ids[0] === t2.ids[0]) {\n            candidateParents.push(item);\n          }\n          continue;\n        }\n        var elements = item.ids[2];\n        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {\n          trees.push({\n            ids: elements[j],\n            diff: item.diff - 1,\n            parent: item.ids,\n            parentIdx: j\n          });\n        }\n      }\n\n      var el = candidateParents[0];\n\n      if (!el) {\n        restree.push(branch);\n      } else {\n        res = mergeTree(el.ids, t2.ids);\n        el.parent[2][el.parentIdx] = res.tree;\n        restree.push({pos: t1.pos, ids: t1.ids});\n        conflicts = conflicts || res.conflicts;\n        merged = true;\n      }\n    } else {\n      restree.push(branch);\n    }\n  }\n\n  // We didnt find\n  if (!merged) {\n    restree.push(path);\n  }\n\n  restree.sort(sortByPos);\n\n  return {\n    tree: restree,\n    conflicts: conflicts || \'internal_node\'\n  };\n}\n\n// To ensure we dont grow the revision tree infinitely, we stem old revisions\nfunction stem(tree, depth) {\n  // First we break out the tree into a complete list of root to leaf paths\n  var paths = rootToLeaf(tree);\n  var result;\n  for (var i = 0, len = paths.length; i < len; i++) {\n    // Then for each path, we cut off the start of the path based on the\n    // `depth` to stem to, and generate a new set of flat trees\n    var path = paths[i];\n    var stemmed = path.ids;\n    var numStemmed = Math.max(0, stemmed.length - depth);\n    var stemmedNode = {\n      pos: path.pos + numStemmed,\n      ids: pathToTree(stemmed, numStemmed)\n    };\n    // Then we remerge all those flat trees together, ensuring that we dont\n    // connect trees that would go beyond the depth limit\n    if (result) {\n      result = doMerge(result, stemmedNode, true).tree;\n    } else {\n      result = [stemmedNode];\n    }\n  }\n  return result;\n}\n\nmodule.exports = function merge(tree, path, depth) {\n  var newTree = doMerge(tree, path);\n  return {\n    tree: stem(newTree.tree, depth),\n    conflicts: newTree.conflicts\n  };\n};\n},{"./rootToLeaf":70}],69:[function(require,module,exports){\n\'use strict\';\n\n// return true if a rev exists in the rev tree, false otherwise\nmodule.exports = function revExists(revs, rev) {\n  var toVisit = revs.slice();\n  var splitRev = rev.split(\'-\');\n  var targetPos = parseInt(splitRev[0], 10);\n  var targetId = splitRev[1];\n\n  var node;\n  while ((node = toVisit.pop())) {\n    if (node.pos === targetPos && node.ids[0] === targetId) {\n      return true;\n    }\n    var branches = node.ids[2];\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: node.pos + 1, ids: branches[i]});\n    }\n  }\n  return false;\n};\n},{}],70:[function(require,module,exports){\n\'use strict\';\n// build up a list of all the paths to the leafs in this revision tree\nmodule.exports = function rootToLeaf(revs) {\n  var paths = [];\n  var toVisit = revs.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var id = tree[0];\n    var opts = tree[1];\n    var branches = tree[2];\n    var isLeaf = branches.length === 0;\n\n    var history = node.history ? node.history.slice() : [];\n    history.push({id: id, opts: opts});\n    if (isLeaf) {\n      paths.push({pos: (pos + 1 - history.length), ids: history});\n    }\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], history: history});\n    }\n  }\n  return paths.reverse();\n};\n},{}],71:[function(require,module,exports){\n\'use strict\';\n\n// Pretty much all below can be combined into a higher order function to\n// traverse revisions\n// The return value from the callback will be passed as context to all\n// children of that node\nmodule.exports = function traverseRevTree(revs, callback) {\n  var toVisit = revs.slice();\n\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var branches = tree[2];\n    var newCtx =\n      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});\n    }\n  }\n};\n},{}],72:[function(require,module,exports){\n\'use strict\';\n\n// We fetch all leafs of the revision tree, and sort them based on tree length\n// and whether they were deleted, undeleted documents with the longest revision\n// tree (most edits) win\n// The final sort algorithm is slightly documented in a sidebar here:\n// http://guide.couchdb.org/draft/conflicts.html\nmodule.exports = function winningRev(metadata) {\n  var winningId;\n  var winningPos;\n  var winningDeleted;\n  var toVisit = metadata.rev_tree.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var tree = node.ids;\n    var branches = tree[2];\n    var pos = node.pos;\n    if (branches.length) { // non-leaf\n      for (var i = 0, len = branches.length; i < len; i++) {\n        toVisit.push({pos: pos + 1, ids: branches[i]});\n      }\n      continue;\n    }\n    var deleted = !!tree[1].deleted;\n    var id = tree[0];\n    // sort by deleted, then pos, then id\n    if (!winningId || (winningDeleted !== deleted ? winningDeleted :\n        winningPos !== pos ? winningPos < pos : winningId < id)) {\n      winningId = id;\n      winningPos = pos;\n      winningDeleted = deleted;\n    }\n  }\n\n  return winningPos + \'-\' + winningId;\n};\n},{}],73:[function(require,module,exports){\n\'use strict\';\n\nvar getArguments = require(\'argsarray\');\n\nfunction once(fun) {\n  var called = false;\n  return getArguments(function (args) {\n    /* istanbul ignore if */\n    if (called) {\n      // this is a smoke test and should never actually happen\n      throw new Error(\'once called more than once\');\n    } else {\n      called = true;\n      fun.apply(this, args);\n    }\n  });\n}\n\nmodule.exports = once;\n},{"argsarray":6}],74:[function(require,module,exports){\n\'use strict\';\n\n//\n// Parsing hex strings. Yeah.\n//\n// So basically we need this because of a bug in WebSQL:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n//\n// UTF-8 and UTF-16 are provided as separate functions\n// for meager performance improvements\n//\n\nfunction decodeUtf8(str) {\n  return decodeURIComponent(window.escape(str));\n}\n\nfunction hexToInt(charCode) {\n  // \'0\'-\'9\' is 48-57\n  // \'A\'-\'F\' is 65-70\n  // SQLite will only give us uppercase hex\n  return charCode < 65 ? (charCode - 48) : (charCode - 55);\n}\n\n\n// Example:\n// pragma encoding=utf8;\n// select hex(\'A\');\n// returns \'41\'\nfunction parseHexUtf8(str, start, end) {\n  var result = \'\';\n  while (start < end) {\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start++)) << 4) |\n        hexToInt(str.charCodeAt(start++)));\n  }\n  return result;\n}\n\n// Example:\n// pragma encoding=utf16;\n// select hex(\'A\');\n// returns \'4100\'\n// notice that the 00 comes after the 41 (i.e. it\'s swizzled)\nfunction parseHexUtf16(str, start, end) {\n  var result = \'\';\n  while (start < end) {\n    // UTF-16, so swizzle the bytes\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start + 2)) << 12) |\n        (hexToInt(str.charCodeAt(start + 3)) << 8) |\n        (hexToInt(str.charCodeAt(start)) << 4) |\n        hexToInt(str.charCodeAt(start + 1)));\n    start += 4;\n  }\n  return result;\n}\n\nfunction parseHexString(str, encoding) {\n  if (encoding === \'UTF-8\') {\n    return decodeUtf8(parseHexUtf8(str, 0, str.length));\n  } else {\n    return parseHexUtf16(str, 0, str.length);\n  }\n}\n\nmodule.exports = parseHexString;\n},{}],75:[function(require,module,exports){\n\'use strict\';\n\n// originally parseUri 1.2.2, now patched by us\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\nvar keys = ["source", "protocol", "authority", "userInfo", "user", "password",\n    "host", "port", "relative", "path", "directory", "file", "query", "anchor"];\nvar qName ="queryKey";\nvar qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n\n// use the "loose" parser\n/* jshint maxlen: false */\nvar parser = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nfunction parseUri(str) {\n  var m = parser.exec(str);\n  var uri = {};\n  var i = 14;\n\n  while (i--) {\n    var key = keys[i];\n    var value = m[i] || "";\n    var encoded = [\'user\', \'password\'].indexOf(key) !== -1;\n    uri[key] = encoded ? decodeURIComponent(value) : value;\n  }\n\n  uri[qName] = {};\n  uri[keys[12]].replace(qParser, function ($0, $1, $2) {\n    if ($1) {\n      uri[qName][$1] = $2;\n    }\n  });\n\n  return uri;\n}\n\nmodule.exports = parseUri;\n},{}],76:[function(require,module,exports){\n\'use strict\';\n\n// like underscore/lodash _.pick()\nmodule.exports = function pick(obj, arr) {\n  var res = {};\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var prop = arr[i];\n    if (prop in obj) {\n      res[prop] = obj[prop];\n    }\n  }\n  return res;\n};\n},{}],77:[function(require,module,exports){\n\'use strict\';\n/* istanbul ignore next */\nmodule.exports = typeof Promise === \'function\' ? Promise : require(\'lie\');\n\n},{"lie":102}],78:[function(require,module,exports){\n(function (process){\n\'use strict\';\n\nvar Promise = require(\'./promise\');\nvar getArguments = require(\'argsarray\');\nvar clone = require(\'./clone\');\nvar once = require(\'./once\');\n\nfunction toPromise(func) {\n  //create the function we will be returning\n  return getArguments(function (args) {\n    // Clone arguments\n    args = clone(args);\n    var self = this;\n    var tempCB =\n      (typeof args[args.length - 1] === \'function\') ? args.pop() : false;\n    // if the last argument is a function, assume its a callback\n    var usedCB;\n    if (tempCB) {\n      // if it was a callback, create a new callback which calls it,\n      // but do so async so we don\'t trap any errors\n      usedCB = function (err, resp) {\n        process.nextTick(function () {\n          tempCB(err, resp);\n        });\n      };\n    }\n    var promise = new Promise(function (fulfill, reject) {\n      var resp;\n      try {\n        var callback = once(function (err, mesg) {\n          if (err) {\n            reject(err);\n          } else {\n            fulfill(mesg);\n          }\n        });\n        // create a callback for this invocation\n        // apply the function in the orig context\n        args.push(callback);\n        resp = func.apply(self, args);\n        if (resp && typeof resp.then === \'function\') {\n          fulfill(resp);\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n    // if there is a callback, call it back\n    if (usedCB) {\n      promise.then(function (result) {\n        usedCB(null, result);\n      }, usedCB);\n    }\n    return promise;\n  });\n}\n\nmodule.exports = toPromise;\n\n}).call(this,require("/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))\n},{"./clone":51,"./once":73,"./promise":77,"/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":110,"argsarray":6}],79:[function(require,module,exports){\n\'use strict\';\n\nvar Promise = require(\'./promise\');\n\n// this is essentially the "update sugar" function from daleharvey/pouchdb#1388\n// the diffFun tells us what delta to apply to the doc.  it either returns\n// the doc, or false if it doesn\'t need to do an update after all\nvar upsert = module.exports = function upsert(db, docId, diffFun) {\n  return new Promise(function (fulfill, reject) {\n    if (typeof docId !== \'string\') {\n      return reject(new Error(\'doc id is required\'));\n    }\n\n    db.get(docId, function (err, doc) {\n      if (err) {\n        /* istanbul ignore next */\n        if (err.status !== 404) {\n          return reject(err);\n        }\n        doc = {};\n      }\n\n      // the user might change the _rev, so save it for posterity\n      var docRev = doc._rev;\n      var newDoc = diffFun(doc);\n\n      if (!newDoc) {\n        // if the diffFun returns falsy, we short-circuit as\n        // an optimization\n        return fulfill({updated: false, rev: docRev});\n      }\n\n      // users aren\'t allowed to modify these values,\n      // so reset them here\n      newDoc._id = docId;\n      newDoc._rev = docRev;\n      fulfill(tryAndPut(db, newDoc, diffFun));\n    });\n  });\n};\n\nfunction tryAndPut(db, doc, diffFun) {\n  return db.put(doc).then(function (res) {\n    return {\n      updated: true,\n      rev: res.rev\n    };\n  }, function (err) {\n    /* istanbul ignore next */\n    if (err.status !== 409) {\n      throw err;\n    }\n    return upsert(db, doc._id, diffFun);\n  });\n}\n\n},{"./promise":77}],80:[function(require,module,exports){\n"use strict";\n\n// BEGIN Math.uuid.js\n\n/*!\nMath.uuid.js (v1.4)\nhttp://www.broofa.com\nmailto:robert@broofa.com\n\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.\n*/\n\n/*\n * Generate a random uuid.\n *\n * USAGE: Math.uuid(length, radix)\n *   length - the desired number of characters\n *   radix  - the number of allowable values for each character.\n *\n * EXAMPLES:\n *   // No arguments  - returns RFC4122, version 4 ID\n *   >>> Math.uuid()\n *   "92329D39-6F5C-4520-ABFC-AAB64544E172"\n *\n *   // One argument - returns ID of the specified length\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n *   "VcydxgltxrVZSTV"\n *\n *   // Two arguments - returns ID of the specified length, and radix. \n *   // (Radix must be <= 62)\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n *   "01001010"\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n *   "47473046"\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n *   "098F4D35"\n */\nvar chars = (\n  \'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\' +\n  \'abcdefghijklmnopqrstuvwxyz\'\n).split(\'\');\nfunction getValue(radix) {\n  return 0 | Math.random() * radix;\n}\nfunction uuid(len, radix) {\n  radix = radix || chars.length;\n  var out = \'\';\n  var i = -1;\n\n  if (len) {\n    // Compact form\n    while (++i < len) {\n      out += chars[getValue(radix)];\n    }\n    return out;\n  }\n    // rfc4122, version 4 form\n    // Fill in random data.  At i==19 set the high bits of clock sequence as\n    // per rfc4122, sec. 4.1.5\n  while (++i < 36) {\n    switch (i) {\n      case 8:\n      case 13:\n      case 18:\n      case 23:\n        out += \'-\';\n        break;\n      case 19:\n        out += chars[(getValue(16) & 0x3) | 0x8];\n        break;\n      default:\n        out += chars[getValue(16)];\n    }\n  }\n\n  return out;\n}\n\n\n\nmodule.exports = uuid;\n\n\n},{}],81:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = evalFilter;\nfunction evalFilter(input) {\n  /*jshint evil: true */\n  return eval([\n    \'(function () { return \',\n    input,\n    \' })()\'\n  ].join(\'\'));\n}\n},{}],82:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = evalView;\nfunction evalView(input) {\n  /*jshint evil: true */\n  return eval([\n    \'(function () {\',\n    \'  return function (doc) {\',\n    \'    var emitted = false;\',\n    \'    var emit = function (a, b) {\',\n    \'      emitted = true;\',\n    \'    };\',\n    \'    var view = \' + input + \';\',\n    \'    view(doc);\',\n    \'    if (emitted) {\',\n    \'      return true;\',\n    \'    }\',\n    \'  }\',\n    \'})()\'\n  ].join(\'\\n\'));\n}\n},{}],83:[function(require,module,exports){\n"use strict";\n\nvar PouchDB = require(\'./setup\');\n\nmodule.exports = PouchDB;\n\nPouchDB.ajax = require(\'./deps/ajax/prequest\');\nPouchDB.utils = require(\'./utils\');\nPouchDB.Errors = require(\'./deps/errors\');\nPouchDB.replicate = require(\'./replicate\').replicate;\nPouchDB.sync = require(\'./sync\');\nPouchDB.version = require(\'./version\');\nvar httpAdapter = require(\'./adapters/http\');\nPouchDB.adapter(\'http\', httpAdapter);\nPouchDB.adapter(\'https\', httpAdapter);\n\nPouchDB.plugin(require(\'./mapreduce\'));\n\nvar adapters = require(\'./adapters\');\n\nObject.keys(adapters).forEach(function (adapterName) {\n  PouchDB.adapter(adapterName, adapters[adapterName], true);\n});\n\n},{"./adapters":13,"./adapters/http":14,"./deps/ajax/prequest":36,"./deps/errors":62,"./mapreduce":86,"./replicate":94,"./setup":97,"./sync":98,"./utils":100,"./version":101}],84:[function(require,module,exports){\n\'use strict\';\n\nvar upsert = require(\'../deps/upsert\');\nvar Promise = require(\'../deps/promise\');\nvar md5 = require(\'./md5\');\n\nmodule.exports = function (opts) {\n  var sourceDB = opts.db;\n  var viewName = opts.viewName;\n  var mapFun = opts.map;\n  var reduceFun = opts.reduce;\n  var temporary = opts.temporary;\n\n  // the "undefined" part is for backwards compatibility\n  var viewSignature = mapFun.toString() + (reduceFun && reduceFun.toString()) +\n    \'undefined\';\n\n  if (!temporary && sourceDB._cachedViews) {\n    var cachedView = sourceDB._cachedViews[viewSignature];\n    if (cachedView) {\n      return Promise.resolve(cachedView);\n    }\n  }\n\n  return sourceDB.info().then(function (info) {\n\n    var depDbName = info.db_name + \'-mrview-\' +\n      (temporary ? \'temp\' : md5(viewSignature));\n\n    // save the view name in the source db so it can be cleaned up if necessary\n    // (e.g. when the _design doc is deleted, remove all associated view data)\n    function diffFunction(doc) {\n      doc.views = doc.views || {};\n      var fullViewName = viewName;\n      if (fullViewName.indexOf(\'/\') === -1) {\n        fullViewName = viewName + \'/\' + viewName;\n      }\n      var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};\n      /* istanbul ignore if */\n      if (depDbs[depDbName]) {\n        return; // no update necessary\n      }\n      depDbs[depDbName] = true;\n      return doc;\n    }\n    return upsert(sourceDB, \'_local/mrviews\', diffFunction).then(function () {\n      return sourceDB.registerDependentDatabase(depDbName).then(function (res) {\n        var db = res.db;\n        db.auto_compaction = true;\n        var view = {\n          name: depDbName,\n          db: db,\n          sourceDB: sourceDB,\n          adapter: sourceDB.adapter,\n          mapFun: mapFun,\n          reduceFun: reduceFun\n        };\n        return view.db.get(\'_local/lastSeq\').catch(function (err) {\n          /* istanbul ignore if */\n          if (err.status !== 404) {\n            throw err;\n          }\n        }).then(function (lastSeqDoc) {\n          view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;\n          if (!temporary) {\n            sourceDB._cachedViews = sourceDB._cachedViews || {};\n            sourceDB._cachedViews[viewSignature] = view;\n            view.db.once(\'destroyed\', function () {\n              delete sourceDB._cachedViews[viewSignature];\n            });\n          }\n          return view;\n        });\n      });\n    });\n  });\n};\n\n},{"../deps/promise":77,"../deps/upsert":79,"./md5":87}],85:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = function (func, emit, sum, log, isArray, toJSON) {\n  /*jshint evil:true,unused:false */\n  return eval("(" + func.replace(/;\\s*$/, "") + ");");\n};\n\n},{}],86:[function(require,module,exports){\n(function (process){\n\'use strict\';\n\nvar b64ToBluffer = require(\'../deps/binary/base64StringToBlobOrBuffer\');\nvar pouchCollate = require(\'pouchdb-collate\');\nvar TaskQueue = require(\'./taskqueue\');\nvar collate = pouchCollate.collate;\nvar toIndexableString = pouchCollate.toIndexableString;\nvar normalizeKey = pouchCollate.normalizeKey;\nvar parseIndexableString = pouchCollate.parseIndexableString;\nvar createView = require(\'./createView\');\nvar evalFunc = require(\'./evalfunc\');\nvar log;\n/* istanbul ignore else */\nif ((typeof console !== \'undefined\') && (typeof console.log === \'function\')) {\n  log = Function.prototype.bind.call(console.log, console);\n} else {\n  log = function () {};\n}\nvar utils = require(\'./utils\');\nvar Promise = require(\'../deps/promise\');\nvar inherits = require(\'inherits\');\nvar persistentQueues = {};\nvar tempViewQueue = new TaskQueue();\nvar CHANGES_BATCH_SIZE = 50;\n\nfunction parseViewName(name) {\n  // can be either \'ddocname/viewname\' or just \'viewname\'\n  // (where the ddoc name is the same)\n  return name.indexOf(\'/\') === -1 ? [name, name] : name.split(\'/\');\n}\n\nfunction isGenOne(changes) {\n  // only return true if the current change is 1-\n  // and there are no other leafs\n  return changes.length === 1 && /^1-/.test(changes[0].rev);\n}\n\nfunction emitError(db, e) {\n  try {\n    db.emit(\'error\', e);\n  } catch (err) {\n    console.error(\n      \'The user\\\'s map/reduce function threw an uncaught error.\\n\' +\n      \'You can debug this error by doing:\\n\' +\n      \'myDatabase.on(\\\'error\\\', function (err) { debugger; });\\n\' +\n      \'Please double-check your map/reduce function.\');\n    console.error(e);\n  }\n}\n\nfunction tryCode(db, fun, args) {\n  // emit an event if there was an error thrown by a map/reduce function.\n  // putting try/catches in a single function also avoids deoptimizations.\n  try {\n    return {\n      output : fun.apply(null, args)\n    };\n  } catch (e) {\n    emitError(db, e);\n    return {error: e};\n  }\n}\n\nfunction sortByKeyThenValue(x, y) {\n  var keyCompare = collate(x.key, y.key);\n  return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);\n}\n\nfunction sliceResults(results, limit, skip) {\n  skip = skip || 0;\n  if (typeof limit === \'number\') {\n    return results.slice(skip, limit + skip);\n  } else if (skip > 0) {\n    return results.slice(skip);\n  }\n  return results;\n}\n\nfunction rowToDocId(row) {\n  var val = row.value;\n  // Users can explicitly specify a joined doc _id, or it\n  // defaults to the doc _id that emitted the key/value.\n  var docId = (val && typeof val === \'object\' && val._id) || row.id;\n  return docId;\n}\n\nfunction readAttachmentsAsBlobOrBuffer(res) {\n  res.rows.forEach(function (row) {\n    var atts = row.doc && row.doc._attachments;\n    if (!atts) {\n      return;\n    }\n    Object.keys(atts).forEach(function (filename) {\n      var att = atts[filename];\n      atts[filename].data = b64ToBluffer(att.data, att.content_type);\n    });\n  });\n}\n\nfunction postprocessAttachments(opts) {\n  return function (res) {\n    if (opts.include_docs && opts.attachments && opts.binary) {\n      readAttachmentsAsBlobOrBuffer(res);\n    }\n    return res;\n  };\n}\n\nfunction createBuiltInError(name) {\n  var message = \'builtin \' + name +\n    \' function requires map values to be numbers\' +\n    \' or number arrays\';\n  return new BuiltInError(message);\n}\n\nfunction sum(values) {\n  var result = 0;\n  for (var i = 0, len = values.length; i < len; i++) {\n    var num = values[i];\n    if (typeof num !== \'number\') {\n      if (Array.isArray(num)) {\n        // lists of numbers are also allowed, sum them separately\n        result = typeof result === \'number\' ? [result] : result;\n        for (var j = 0, jLen = num.length; j < jLen; j++) {\n          var jNum = num[j];\n          if (typeof jNum !== \'number\') {\n            throw createBuiltInError(\'_sum\');\n          } else if (typeof result[j] === \'undefined\') {\n            result.push(jNum);\n          } else {\n            result[j] += jNum;\n          }\n        }\n      } else { // not array/number\n        throw createBuiltInError(\'_sum\');\n      }\n    } else if (typeof result === \'number\') {\n      result += num;\n    } else { // add number to array\n      result[0] += num;\n    }\n  }\n  return result;\n}\n\nvar builtInReduce = {\n  _sum: function (keys, values) {\n    return sum(values);\n  },\n\n  _count: function (keys, values) {\n    return values.length;\n  },\n\n  _stats: function (keys, values) {\n    // no need to implement rereduce=true, because Pouch\n    // will never call it\n    function sumsqr(values) {\n      var _sumsqr = 0;\n      for (var i = 0, len = values.length; i < len; i++) {\n        var num = values[i];\n        _sumsqr += (num * num);\n      }\n      return _sumsqr;\n    }\n    return {\n      sum     : sum(values),\n      min     : Math.min.apply(null, values),\n      max     : Math.max.apply(null, values),\n      count   : values.length,\n      sumsqr : sumsqr(values)\n    };\n  }\n};\n\nfunction addHttpParam(paramName, opts, params, asJson) {\n  // add an http param from opts to params, optionally json-encoded\n  var val = opts[paramName];\n  if (typeof val !== \'undefined\') {\n    if (asJson) {\n      val = encodeURIComponent(JSON.stringify(val));\n    }\n    params.push(paramName + \'=\' + val);\n  }\n}\n\nfunction checkQueryParseError(options, fun) {\n  var startkeyName = options.descending ? \'endkey\' : \'startkey\';\n  var endkeyName = options.descending ? \'startkey\' : \'endkey\';\n\n  if (typeof options[startkeyName] !== \'undefined\' &&\n    typeof options[endkeyName] !== \'undefined\' &&\n    collate(options[startkeyName], options[endkeyName]) > 0) {\n    throw new QueryParseError(\'No rows can match your key range, \' +\n    \'reverse your start_key and end_key or set {descending : true}\');\n  } else if (fun.reduce && options.reduce !== false) {\n    if (options.include_docs) {\n      throw new QueryParseError(\'{include_docs:true} is invalid for reduce\');\n    } else if (options.keys && options.keys.length > 1 &&\n        !options.group && !options.group_level) {\n      throw new QueryParseError(\'Multi-key fetches for reduce views must use \' +\n      \'{group: true}\');\n    }\n  }\n  if (options.group_level) {\n    if (typeof options.group_level !== \'number\') {\n      throw new QueryParseError(\'Invalid value for integer: "\' +\n      options.group_level + \'"\');\n    }\n    if (options.group_level < 0) {\n      throw new QueryParseError(\'Invalid value for positive integer: \' +\n        \'"\' + options.group_level + \'"\');\n    }\n  }\n}\n\nfunction httpQuery(db, fun, opts) {\n  // List of parameters to add to the PUT request\n  var params = [];\n  var body;\n  var method = \'GET\';\n\n  // If opts.reduce exists and is defined, then add it to the list\n  // of parameters.\n  // If reduce=false then the results are that of only the map function\n  // not the final result of map and reduce.\n  addHttpParam(\'reduce\', opts, params);\n  addHttpParam(\'include_docs\', opts, params);\n  addHttpParam(\'attachments\', opts, params);\n  addHttpParam(\'limit\', opts, params);\n  addHttpParam(\'descending\', opts, params);\n  addHttpParam(\'group\', opts, params);\n  addHttpParam(\'group_level\', opts, params);\n  addHttpParam(\'skip\', opts, params);\n  addHttpParam(\'stale\', opts, params);\n  addHttpParam(\'conflicts\', opts, params);\n  addHttpParam(\'startkey\', opts, params, true);\n  addHttpParam(\'start_key\', opts, params, true);\n  addHttpParam(\'endkey\', opts, params, true);\n  addHttpParam(\'end_key\', opts, params, true);\n  addHttpParam(\'inclusive_end\', opts, params);\n  addHttpParam(\'key\', opts, params, true);\n\n  // Format the list of parameters into a valid URI query string\n  params = params.join(\'&\');\n  params = params === \'\' ? \'\' : \'?\' + params;\n\n  // If keys are supplied, issue a POST to circumvent GET query string limits\n  // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n  if (typeof opts.keys !== \'undefined\') {\n    var MAX_URL_LENGTH = 2000;\n    // according to http://stackoverflow.com/a/417184/680742,\n    // the de facto URL length limit is 2000 characters\n\n    var keysAsString =\n      \'keys=\' + encodeURIComponent(JSON.stringify(opts.keys));\n    if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {\n      // If the keys are short enough, do a GET. we do this to work around\n      // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)\n      params += (params[0] === \'?\' ? \'&\' : \'?\') + keysAsString;\n    } else {\n      method = \'POST\';\n      if (typeof fun === \'string\') {\n        body = {keys: opts.keys};\n      } else { // fun is {map : mapfun}, so append to this\n        fun.keys = opts.keys;\n      }\n    }\n  }\n\n  // We are referencing a query defined in the design doc\n  if (typeof fun === \'string\') {\n    var parts = parseViewName(fun);\n    return db.request({\n      method: method,\n      url: \'_design/\' + parts[0] + \'/_view/\' + parts[1] + params,\n      body: body\n    }).then(postprocessAttachments(opts));\n  }\n\n  // We are using a temporary view, terrible for performance, good for testing\n  body = body || {};\n  Object.keys(fun).forEach(function (key) {\n    if (Array.isArray(fun[key])) {\n      body[key] = fun[key];\n    } else {\n      body[key] = fun[key].toString();\n    }\n  });\n  return db.request({\n    method: \'POST\',\n    url: \'_temp_view\' + params,\n    body: body\n  }).then(postprocessAttachments(opts));\n}\n\nfunction defaultsTo(value) {\n  return function (reason) {\n    /* istanbul ignore else */\n    if (reason.status === 404) {\n      return value;\n    } else {\n      throw reason;\n    }\n  };\n}\n\n// returns a promise for a list of docs to update, based on the input docId.\n// the order doesn\'t matter, because post-3.2.0, bulkDocs\n// is an atomic operation in all three adapters.\nfunction getDocsToPersist(docId, view, docIdsToChangesAndEmits) {\n  var metaDocId = \'_local/doc_\' + docId;\n  var defaultMetaDoc = {_id: metaDocId, keys: []};\n  var docData = docIdsToChangesAndEmits[docId];\n  var indexableKeysToKeyValues = docData.indexableKeysToKeyValues;\n  var changes = docData.changes;\n\n  function getMetaDoc() {\n    if (isGenOne(changes)) {\n      // generation 1, so we can safely assume initial state\n      // for performance reasons (avoids unnecessary GETs)\n      return Promise.resolve(defaultMetaDoc);\n    }\n    return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));\n  }\n\n  function getKeyValueDocs(metaDoc) {\n    if (!metaDoc.keys.length) {\n      // no keys, no need for a lookup\n      return Promise.resolve({rows: []});\n    }\n    return view.db.allDocs({\n      keys: metaDoc.keys,\n      include_docs: true\n    });\n  }\n\n  function processKvDocs(metaDoc, kvDocsRes) {\n    var kvDocs = [];\n    var oldKeysMap = {};\n\n    for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {\n      var row = kvDocsRes.rows[i];\n      var doc = row.doc;\n      if (!doc) { // deleted\n        continue;\n      }\n      kvDocs.push(doc);\n      oldKeysMap[doc._id] = true;\n      doc._deleted = !indexableKeysToKeyValues[doc._id];\n      if (!doc._deleted) {\n        var keyValue = indexableKeysToKeyValues[doc._id];\n        if (\'value\' in keyValue) {\n          doc.value = keyValue.value;\n        }\n      }\n    }\n\n    var newKeys = Object.keys(indexableKeysToKeyValues);\n    newKeys.forEach(function (key) {\n      if (!oldKeysMap[key]) {\n        // new doc\n        var kvDoc = {\n          _id: key\n        };\n        var keyValue = indexableKeysToKeyValues[key];\n        if (\'value\' in keyValue) {\n          kvDoc.value = keyValue.value;\n        }\n        kvDocs.push(kvDoc);\n      }\n    });\n    metaDoc.keys = utils.uniq(newKeys.concat(metaDoc.keys));\n    kvDocs.push(metaDoc);\n\n    return kvDocs;\n  }\n\n  return getMetaDoc().then(function (metaDoc) {\n    return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {\n      return processKvDocs(metaDoc, kvDocsRes);\n    });\n  });\n}\n\n// updates all emitted key/value docs and metaDocs in the mrview database\n// for the given batch of documents from the source database\nfunction saveKeyValues(view, docIdsToChangesAndEmits, seq) {\n  var seqDocId = \'_local/lastSeq\';\n  return view.db.get(seqDocId)\n  .catch(defaultsTo({_id: seqDocId, seq: 0}))\n  .then(function (lastSeqDoc) {\n    var docIds = Object.keys(docIdsToChangesAndEmits);\n    return Promise.all(docIds.map(function (docId) {\n      return getDocsToPersist(docId, view, docIdsToChangesAndEmits);\n    })).then(function (listOfDocsToPersist) {\n      var docsToPersist = utils.flatten(listOfDocsToPersist);\n      lastSeqDoc.seq = seq;\n      docsToPersist.push(lastSeqDoc);\n      // write all docs in a single operation, update the seq once\n      return view.db.bulkDocs({docs : docsToPersist});\n    });\n  });\n}\n\nfunction getQueue(view) {\n  var viewName = typeof view === \'string\' ? view : view.name;\n  var queue = persistentQueues[viewName];\n  if (!queue) {\n    queue = persistentQueues[viewName] = new TaskQueue();\n  }\n  return queue;\n}\n\nfunction updateView(view) {\n  return utils.sequentialize(getQueue(view), function () {\n    return updateViewInQueue(view);\n  })();\n}\n\nfunction updateViewInQueue(view) {\n  // bind the emit function once\n  var mapResults;\n  var doc;\n\n  function emit(key, value) {\n    var output = {id: doc._id, key: normalizeKey(key)};\n    // Don\'t explicitly store the value unless it\'s defined and non-null.\n    // This saves on storage space, because often people don\'t use it.\n    if (typeof value !== \'undefined\' && value !== null) {\n      output.value = normalizeKey(value);\n    }\n    mapResults.push(output);\n  }\n\n  var mapFun;\n  // for temp_views one can use emit(doc, emit), see #38\n  if (typeof view.mapFun === "function" && view.mapFun.length === 2) {\n    var origMap = view.mapFun;\n    mapFun = function (doc) {\n      return origMap(doc, emit);\n    };\n  } else {\n    mapFun = evalFunc(view.mapFun.toString(), emit, sum, log, Array.isArray,\n      JSON.parse);\n  }\n\n  var currentSeq = view.seq || 0;\n\n  function processChange(docIdsToChangesAndEmits, seq) {\n    return function () {\n      return saveKeyValues(view, docIdsToChangesAndEmits, seq);\n    };\n  }\n\n  var queue = new TaskQueue();\n  // TODO(neojski): https://github.com/daleharvey/pouchdb/issues/1521\n\n  return new Promise(function (resolve, reject) {\n\n    function complete() {\n      queue.finish().then(function () {\n        view.seq = currentSeq;\n        resolve();\n      });\n    }\n\n    function processNextBatch() {\n      view.sourceDB.changes({\n        conflicts: true,\n        include_docs: true,\n        style: \'all_docs\',\n        since: currentSeq,\n        limit: CHANGES_BATCH_SIZE\n      }).on(\'complete\', function (response) {\n        var results = response.results;\n        if (!results.length) {\n          return complete();\n        }\n        var docIdsToChangesAndEmits = {};\n        for (var i = 0, l = results.length; i < l; i++) {\n          var change = results[i];\n          if (change.doc._id[0] !== \'_\') {\n            mapResults = [];\n            doc = change.doc;\n\n            if (!doc._deleted) {\n              tryCode(view.sourceDB, mapFun, [doc]);\n            }\n            mapResults.sort(sortByKeyThenValue);\n\n            var indexableKeysToKeyValues = {};\n            var lastKey;\n            for (var j = 0, jl = mapResults.length; j < jl; j++) {\n              var obj = mapResults[j];\n              var complexKey = [obj.key, obj.id];\n              if (collate(obj.key, lastKey) === 0) {\n                complexKey.push(j); // dup key+id, so make it unique\n              }\n              var indexableKey = toIndexableString(complexKey);\n              indexableKeysToKeyValues[indexableKey] = obj;\n              lastKey = obj.key;\n            }\n            docIdsToChangesAndEmits[change.doc._id] = {\n              indexableKeysToKeyValues: indexableKeysToKeyValues,\n              changes: change.changes\n            };\n          }\n          currentSeq = change.seq;\n        }\n        queue.add(processChange(docIdsToChangesAndEmits, currentSeq));\n        if (results.length < CHANGES_BATCH_SIZE) {\n          return complete();\n        }\n        return processNextBatch();\n      }).on(\'error\', onError);\n      /* istanbul ignore next */\n      function onError(err) {\n        reject(err);\n      }\n    }\n\n    processNextBatch();\n  });\n}\n\nfunction reduceView(view, results, options) {\n  if (options.group_level === 0) {\n    delete options.group_level;\n  }\n\n  var shouldGroup = options.group || options.group_level;\n\n  var reduceFun;\n  if (builtInReduce[view.reduceFun]) {\n    reduceFun = builtInReduce[view.reduceFun];\n  } else {\n    reduceFun = evalFunc(\n      view.reduceFun.toString(), null, sum, log, Array.isArray, JSON.parse);\n  }\n\n  var groups = [];\n  var lvl = options.group_level;\n  results.forEach(function (e) {\n    var last = groups[groups.length - 1];\n    var key = shouldGroup ? e.key : null;\n\n    // only set group_level for array keys\n    if (shouldGroup && Array.isArray(key) && typeof lvl === \'number\') {\n      key = key.length > lvl ? key.slice(0, lvl) : key;\n    }\n\n    if (last && collate(last.key[0][0], key) === 0) {\n      last.key.push([key, e.id]);\n      last.value.push(e.value);\n      return;\n    }\n    groups.push({key: [\n      [key, e.id]\n    ], value: [e.value]});\n  });\n  for (var i = 0, len = groups.length; i < len; i++) {\n    var e = groups[i];\n    var reduceTry = tryCode(view.sourceDB, reduceFun, [e.key, e.value, false]);\n    if (reduceTry.error && reduceTry.error instanceof BuiltInError) {\n      // CouchDB returns an error if a built-in errors out\n      throw reduceTry.error;\n    }\n    // CouchDB just sets the value to null if a non-built-in errors out\n    e.value = reduceTry.error ? null : reduceTry.output;\n    e.key = e.key[0][0];\n  }\n  // no total_rows/offset when reducing\n  return {rows: sliceResults(groups, options.limit, options.skip)};\n}\n\nfunction queryView(view, opts) {\n  return utils.sequentialize(getQueue(view), function () {\n    return queryViewInQueue(view, opts);\n  })();\n}\n\nfunction queryViewInQueue(view, opts) {\n  var totalRows;\n  var shouldReduce = view.reduceFun && opts.reduce !== false;\n  var skip = opts.skip || 0;\n  if (typeof opts.keys !== \'undefined\' && !opts.keys.length) {\n    // equivalent query\n    opts.limit = 0;\n    delete opts.keys;\n  }\n\n  function fetchFromView(viewOpts) {\n    viewOpts.include_docs = true;\n    return view.db.allDocs(viewOpts).then(function (res) {\n      totalRows = res.total_rows;\n      return res.rows.map(function (result) {\n\n        // implicit migration - in older versions of PouchDB,\n        // we explicitly stored the doc as {id: ..., key: ..., value: ...}\n        // this is tested in a migration test\n        /* istanbul ignore next */\n        if (\'value\' in result.doc && typeof result.doc.value === \'object\' &&\n            result.doc.value !== null) {\n          var keys = Object.keys(result.doc.value).sort();\n          // this detection method is not perfect, but it\'s unlikely the user\n          // emitted a value which was an object with these 3 exact keys\n          var expectedKeys = [\'id\', \'key\', \'value\'];\n          if (!(keys < expectedKeys || keys > expectedKeys)) {\n            return result.doc.value;\n          }\n        }\n\n        var parsedKeyAndDocId = parseIndexableString(result.doc._id);\n        return {\n          key: parsedKeyAndDocId[0],\n          id: parsedKeyAndDocId[1],\n          value: (\'value\' in result.doc ? result.doc.value : null)\n        };\n      });\n    });\n  }\n\n  function onMapResultsReady(rows) {\n    var finalResults;\n    if (shouldReduce) {\n      finalResults = reduceView(view, rows, opts);\n    } else {\n      finalResults = {\n        total_rows: totalRows,\n        offset: skip,\n        rows: rows\n      };\n    }\n    if (opts.include_docs) {\n      var docIds = utils.uniq(rows.map(rowToDocId));\n\n      return view.sourceDB.allDocs({\n        keys: docIds,\n        include_docs: true,\n        conflicts: opts.conflicts,\n        attachments: opts.attachments,\n        binary: opts.binary\n      }).then(function (allDocsRes) {\n        var docIdsToDocs = {};\n        allDocsRes.rows.forEach(function (row) {\n          if (row.doc) {\n            docIdsToDocs[\'$\' + row.id] = row.doc;\n          }\n        });\n        rows.forEach(function (row) {\n          var docId = rowToDocId(row);\n          var doc = docIdsToDocs[\'$\' + docId];\n          if (doc) {\n            row.doc = doc;\n          }\n        });\n        return finalResults;\n      });\n    } else {\n      return finalResults;\n    }\n  }\n\n  var flatten = function (array) {\n    return array.reduce(function (prev, cur) {\n      return prev.concat(cur);\n    });\n  };\n\n  if (typeof opts.keys !== \'undefined\') {\n    var keys = opts.keys;\n    var fetchPromises = keys.map(function (key) {\n      var viewOpts = {\n        startkey : toIndexableString([key]),\n        endkey   : toIndexableString([key, {}])\n      };\n      return fetchFromView(viewOpts);\n    });\n    return Promise.all(fetchPromises).then(flatten).then(onMapResultsReady);\n  } else { // normal query, no \'keys\'\n    var viewOpts = {\n      descending : opts.descending\n    };\n    if (opts.start_key) {\n        opts.startkey = opts.start_key;\n    }\n    if (opts.end_key) {\n        opts.endkey = opts.end_key;\n    }\n    if (typeof opts.startkey !== \'undefined\') {\n      viewOpts.startkey = opts.descending ?\n        toIndexableString([opts.startkey, {}]) :\n        toIndexableString([opts.startkey]);\n    }\n    if (typeof opts.endkey !== \'undefined\') {\n      var inclusiveEnd = opts.inclusive_end !== false;\n      if (opts.descending) {\n        inclusiveEnd = !inclusiveEnd;\n      }\n\n      viewOpts.endkey = toIndexableString(\n        inclusiveEnd ? [opts.endkey, {}] : [opts.endkey]);\n    }\n    if (typeof opts.key !== \'undefined\') {\n      var keyStart = toIndexableString([opts.key]);\n      var keyEnd = toIndexableString([opts.key, {}]);\n      if (viewOpts.descending) {\n        viewOpts.endkey = keyStart;\n        viewOpts.startkey = keyEnd;\n      } else {\n        viewOpts.startkey = keyStart;\n        viewOpts.endkey = keyEnd;\n      }\n    }\n    if (!shouldReduce) {\n      if (typeof opts.limit === \'number\') {\n        viewOpts.limit = opts.limit;\n      }\n      viewOpts.skip = skip;\n    }\n    return fetchFromView(viewOpts).then(onMapResultsReady);\n  }\n}\n\nfunction httpViewCleanup(db) {\n  return db.request({\n    method: \'POST\',\n    url: \'_view_cleanup\'\n  });\n}\n\nfunction localViewCleanup(db) {\n  return db.get(\'_local/mrviews\').then(function (metaDoc) {\n    var docsToViews = {};\n    Object.keys(metaDoc.views).forEach(function (fullViewName) {\n      var parts = parseViewName(fullViewName);\n      var designDocName = \'_design/\' + parts[0];\n      var viewName = parts[1];\n      docsToViews[designDocName] = docsToViews[designDocName] || {};\n      docsToViews[designDocName][viewName] = true;\n    });\n    var opts = {\n      keys : Object.keys(docsToViews),\n      include_docs : true\n    };\n    return db.allDocs(opts).then(function (res) {\n      var viewsToStatus = {};\n      res.rows.forEach(function (row) {\n        var ddocName = row.key.substring(8);\n        Object.keys(docsToViews[row.key]).forEach(function (viewName) {\n          var fullViewName = ddocName + \'/\' + viewName;\n          /* istanbul ignore if */\n          if (!metaDoc.views[fullViewName]) {\n            // new format, without slashes, to support PouchDB 2.2.0\n            // migration test in pouchdb\'s browser.migration.js verifies this\n            fullViewName = viewName;\n          }\n          var viewDBNames = Object.keys(metaDoc.views[fullViewName]);\n          // design doc deleted, or view function nonexistent\n          var statusIsGood = row.doc && row.doc.views &&\n            row.doc.views[viewName];\n          viewDBNames.forEach(function (viewDBName) {\n            viewsToStatus[viewDBName] =\n              viewsToStatus[viewDBName] || statusIsGood;\n          });\n        });\n      });\n      var dbsToDelete = Object.keys(viewsToStatus).filter(\n        function (viewDBName) { return !viewsToStatus[viewDBName]; });\n      var destroyPromises = dbsToDelete.map(function (viewDBName) {\n        return utils.sequentialize(getQueue(viewDBName), function () {\n          return new db.constructor(viewDBName, db.__opts).destroy();\n        })();\n      });\n      return Promise.all(destroyPromises).then(function () {\n        return {ok: true};\n      });\n    });\n  }, defaultsTo({ok: true}));\n}\n\nexports.viewCleanup = utils.callbackify(function () {\n  var db = this;\n  if (db.type() === \'http\') {\n    return httpViewCleanup(db);\n  }\n  return localViewCleanup(db);\n});\n\nfunction queryPromised(db, fun, opts) {\n  if (db.type() === \'http\') {\n    return httpQuery(db, fun, opts);\n  }\n\n  if (typeof fun !== \'string\') {\n    // temp_view\n    checkQueryParseError(opts, fun);\n\n    var createViewOpts = {\n      db : db,\n      viewName : \'temp_view/temp_view\',\n      map : fun.map,\n      reduce : fun.reduce,\n      temporary : true\n    };\n    tempViewQueue.add(function () {\n      return createView(createViewOpts).then(function (view) {\n        function cleanup() {\n          return view.db.destroy();\n        }\n        return utils.fin(updateView(view).then(function () {\n          return queryView(view, opts);\n        }), cleanup);\n      });\n    });\n    return tempViewQueue.finish();\n  } else {\n    // persistent view\n    var fullViewName = fun;\n    var parts = parseViewName(fullViewName);\n    var designDocName = parts[0];\n    var viewName = parts[1];\n    return db.get(\'_design/\' + designDocName).then(function (doc) {\n      var fun = doc.views && doc.views[viewName];\n\n      if (!fun || typeof fun.map !== \'string\') {\n        throw new NotFoundError(\'ddoc \' + designDocName +\n        \' has no view named \' + viewName);\n      }\n      checkQueryParseError(opts, fun);\n\n      var createViewOpts = {\n        db : db,\n        viewName : fullViewName,\n        map : fun.map,\n        reduce : fun.reduce\n      };\n      return createView(createViewOpts).then(function (view) {\n        if (opts.stale === \'ok\' || opts.stale === \'update_after\') {\n          if (opts.stale === \'update_after\') {\n            process.nextTick(function () {\n              updateView(view);\n            });\n          }\n          return queryView(view, opts);\n        } else { // stale not ok\n          return updateView(view).then(function () {\n            return queryView(view, opts);\n          });\n        }\n      });\n    });\n  }\n}\n\nexports.query = function (fun, opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  if (typeof fun === \'function\') {\n    fun = {map : fun};\n  }\n\n  var db = this;\n  var promise = Promise.resolve().then(function () {\n    return queryPromised(db, fun, opts);\n  });\n  utils.promisedCallback(promise, callback);\n  return promise;\n};\n\nfunction QueryParseError(message) {\n  this.status = 400;\n  this.name = \'query_parse_error\';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, QueryParseError);\n  } catch (e) {}\n}\n\ninherits(QueryParseError, Error);\n\nfunction NotFoundError(message) {\n  this.status = 404;\n  this.name = \'not_found\';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, NotFoundError);\n  } catch (e) {}\n}\n\ninherits(NotFoundError, Error);\n\nfunction BuiltInError(message) {\n  this.status = 500;\n  this.name = \'invalid_value\';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, BuiltInError);\n  } catch (e) {}\n}\n\ninherits(BuiltInError, Error);\n\n}).call(this,require("/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))\n},{"../deps/binary/base64StringToBlobOrBuffer":40,"../deps/promise":77,"./createView":84,"./evalfunc":85,"./taskqueue":88,"./utils":89,"/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":110,"inherits":10,"pouchdb-collate":104}],87:[function(require,module,exports){\n\'use strict\';\n\nvar Md5 = require(\'spark-md5\');\n\nmodule.exports = function (string) {\n  return Md5.hash(string);\n};\n},{"spark-md5":107}],88:[function(require,module,exports){\n\'use strict\';\n/*\n * Simple task queue to sequentialize actions. Assumes\n * callbacks will eventually fire (once).\n */\n\nvar Promise = require(\'../deps/promise\');\n\nfunction TaskQueue() {\n  this.promise = new Promise(function (fulfill) {fulfill(); });\n}\nTaskQueue.prototype.add = function (promiseFactory) {\n  this.promise = this.promise.catch(function () {\n    // just recover\n  }).then(function () {\n    return promiseFactory();\n  });\n  return this.promise;\n};\nTaskQueue.prototype.finish = function () {\n  return this.promise;\n};\n\nmodule.exports = TaskQueue;\n\n},{"../deps/promise":77}],89:[function(require,module,exports){\n(function (process){\n\'use strict\';\n\nvar argsarray = require(\'argsarray\');\n\nexports.promisedCallback = function (promise, callback) {\n  if (callback) {\n    promise.then(function (res) {\n      process.nextTick(function () {\n        callback(null, res);\n      });\n    }, function (reason) {\n      process.nextTick(function () {\n        callback(reason);\n      });\n    });\n  }\n  return promise;\n};\n\nexports.callbackify = function (fun) {\n  return argsarray(function (args) {\n    var cb = args.pop();\n    var promise = fun.apply(this, args);\n    if (typeof cb === \'function\') {\n      exports.promisedCallback(promise, cb);\n    }\n    return promise;\n  });\n};\n\n// Promise finally util similar to Q.finally\nexports.fin = function (promise, finalPromiseFactory) {\n  return promise.then(function (res) {\n    return finalPromiseFactory().then(function () {\n      return res;\n    });\n  }, function (reason) {\n    return finalPromiseFactory().then(function () {\n      throw reason;\n    });\n  });\n};\n\nexports.sequentialize = function (queue, promiseFactory) {\n  return function () {\n    var args = arguments;\n    var that = this;\n    return queue.add(function () {\n      return promiseFactory.apply(that, args);\n    });\n  };\n};\n\nexports.flatten = function (arrs) {\n  var res = [];\n  for (var i = 0, len = arrs.length; i < len; i++) {\n    res = res.concat(arrs[i]);\n  }\n  return res;\n};\n\n// uniq an array of strings, order not guaranteed\n// similar to underscore/lodash _.uniq\nexports.uniq = function (arr) {\n  var map = {};\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    map[\'$\' + arr[i]] = true;\n  }\n\n  var keys = Object.keys(map);\n  var output = new Array(keys.length);\n\n  for (i = 0, len = keys.length; i < len; i++) {\n    output[i] = keys[i].substring(1);\n  }\n  return output;\n};\n}).call(this,require("/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))\n},{"/Users/nolan/workspace/worker-pouch/node_modules/workerify/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":110,"argsarray":6}],90:[function(require,module,exports){\n\'use strict\';\n\nvar STARTING_BACK_OFF = 0;\n\nfunction randomNumber(min, max) {\n  min = parseInt(min, 10);\n  max = parseInt(max, 10);\n  if (min !== min) {\n    min = 0;\n  }\n  if (max !== max || max <= min) {\n    max = (min || 1) << 1; //doubling\n  } else {\n    max = max + 1;\n  }\n  var ratio = Math.random();\n  var range = max - min;\n\n  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.\n}\n\nfunction defaultBackOff(min) {\n  var max = 0;\n  if (!min) {\n    max = 2000;\n  }\n  return randomNumber(min, max);\n}\n\nfunction backOff(opts, returnValue, error, callback) {\n  if (opts.retry === false) {\n    returnValue.emit(\'error\', error);\n    returnValue.removeAllListeners();\n    return;\n  }\n  if (typeof opts.back_off_function !== \'function\') {\n    opts.back_off_function = defaultBackOff;\n  }\n  returnValue.emit(\'requestError\', error);\n  if (returnValue.state === \'active\' || returnValue.state === \'pending\') {\n    returnValue.emit(\'paused\', error);\n    returnValue.state = \'stopped\';\n    returnValue.once(\'active\', function () {\n      opts.current_back_off = STARTING_BACK_OFF;\n    });\n  }\n\n  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;\n  opts.current_back_off = opts.back_off_function(opts.current_back_off);\n  setTimeout(callback, opts.current_back_off);\n}\n\nmodule.exports = backOff;\n\n},{}],91:[function(require,module,exports){\n\'use strict\';\n\nvar Promise = require(\'./../deps/promise\');\nvar explain404 = require(\'./../deps/ajax/explain404\');\nvar pouchCollate = require(\'pouchdb-collate\');\nvar collate = pouchCollate.collate;\n\nvar CHECKPOINT_VERSION = 1;\nvar REPLICATOR = "pouchdb";\n// This is an arbitrary number to limit the\n// amount of replication history we save in the checkpoint.\n// If we save too much, the checkpoing docs will become very big,\n// if we save fewer, we\'ll run a greater risk of having to\n// read all the changes from 0 when checkpoint PUTs fail\n// CouchDB 2.0 has a more involved history pruning,\n// but let\'s go for the simple version for now.\nvar CHECKPOINT_HISTORY_SIZE = 5;\nvar LOWEST_SEQ = 0;\n\nfunction updateCheckpoint(db, id, checkpoint, session, returnValue) {\n  return db.get(id).catch(function (err) {\n    if (err.status === 404) {\n      if (db.type() === \'http\') {\n        explain404(\'PouchDB is just checking if a remote checkpoint exists.\');\n      }\n      return {\n        session_id: session,\n        _id: id,\n        history: [],\n        replicator: REPLICATOR,\n        version: CHECKPOINT_VERSION\n      };\n    }\n    throw err;\n  }).then(function (doc) {\n    if (returnValue.cancelled) {\n      return;\n    }\n    // Filter out current entry for this replication\n    doc.history = (doc.history || []).filter(function (item) {\n      return item.session_id !== session;\n    });\n\n    // Add the latest checkpoint to history\n    doc.history.unshift({\n      last_seq: checkpoint,\n      session_id: session\n    });\n\n    // Just take the last pieces in history, to\n    // avoid really big checkpoint docs.\n    // see comment on history size above\n    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);\n\n    doc.version = CHECKPOINT_VERSION;\n    doc.replicator = REPLICATOR;\n\n    doc.session_id = session;\n    doc.last_seq = checkpoint;\n\n    return db.put(doc).catch(function (err) {\n      if (err.status === 409) {\n        // retry; someone is trying to write a checkpoint simultaneously\n        return updateCheckpoint(db, id, checkpoint, session, returnValue);\n      }\n      throw err;\n    });\n  });\n}\n\nfunction Checkpointer(src, target, id, returnValue) {\n  this.src = src;\n  this.target = target;\n  this.id = id;\n  this.returnValue = returnValue;\n}\n\nCheckpointer.prototype.writeCheckpoint = function (checkpoint, session) {\n  var self = this;\n  return this.updateTarget(checkpoint, session).then(function () {\n    return self.updateSource(checkpoint, session);\n  });\n};\n\nCheckpointer.prototype.updateTarget = function (checkpoint, session) {\n  return updateCheckpoint(this.target, this.id, checkpoint,\n      session, this.returnValue);\n};\n\nCheckpointer.prototype.updateSource = function (checkpoint, session) {\n  var self = this;\n  if (this.readOnlySource) {\n    return Promise.resolve(true);\n  }\n  return updateCheckpoint(this.src, this.id, checkpoint,\n      session, this.returnValue)\n    .catch(function (err) {\n      var isForbidden = typeof err.status === \'number\' &&\n        Math.floor(err.status / 100) === 4;\n      if (isForbidden) {\n        self.readOnlySource = true;\n        return true;\n      }\n      throw err;\n    });\n};\n\nvar comparisons = {\n  "undefined": function(targetDoc, sourceDoc) {\n    // This is the previous comparison function\n    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {\n      return sourceDoc.last_seq;\n    }\n\n    return 0;\n  },\n  "1": function(targetDoc, sourceDoc) {\n    // This is the comparison function ported from CouchDB\n    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;\n  }\n};\n\nCheckpointer.prototype.getCheckpoint = function () {\n  var self = this;\n  return self.target.get(self.id).then(function (targetDoc) {\n    return self.src.get(self.id).then(function (sourceDoc) {\n      // Since we can\'t migrate an old version doc to a new one\n      // (no session id), we just go with the lowest seq in this case\n      if (targetDoc.version !==\n         sourceDoc.version) {\n        return LOWEST_SEQ;\n      }\n\n      var version;\n      if (targetDoc.version) {\n        version = targetDoc.version.toString();\n      } else {\n        version = "undefined";\n      }\n\n      if (version in comparisons) {\n        return comparisons[version](targetDoc, sourceDoc);\n      }\n\n      return LOWEST_SEQ;\n    }, function (err) {\n      if (err.status === 404 && targetDoc.last_seq) {\n        return self.src.put({\n          _id: self.id,\n          last_seq: LOWEST_SEQ\n        }).then(function () {\n          return LOWEST_SEQ;\n        }, function (err) {\n          if (err.status === 401) {\n            self.readOnlySource = true;\n            return targetDoc.last_seq;\n          }\n          return LOWEST_SEQ;\n        });\n      }\n      throw err;\n    });\n  }).catch(function (err) {\n    if (err.status !== 404) {\n      throw err;\n    }\n    return LOWEST_SEQ;\n  });\n};\n// This checkpoint comparison is ported from CouchDBs source\n// they come from here:\n// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906\n\nfunction compareReplicationLogs (srcDoc, tgtDoc) {\n  if (srcDoc.session_id === tgtDoc.session_id) {\n    return {\n      last_seq: srcDoc.last_seq,\n      history: srcDoc.history || []\n    };\n  }\n\n  var sourceHistory = srcDoc.history || [];\n  var targetHistory = tgtDoc.history || [];\n  return compareReplicationHistory(sourceHistory, targetHistory);\n}\n\nfunction compareReplicationHistory (sourceHistory, targetHistory) {\n  // the erlang loop via function arguments is not so easy to repeat in JS\n  // therefore, doing this as recursion\n  var S = sourceHistory[0];\n  var sourceRest = sourceHistory.slice(1);\n  var T = targetHistory[0];\n  var targetRest = targetHistory.slice(1);\n\n  if (!S || targetHistory.length === 0) {\n    return {\n      last_seq: LOWEST_SEQ,\n      history: []\n    };\n  }\n\n  var sourceId = S.session_id;\n  if (hasSessionId(sourceId, targetHistory)) {\n    return {\n      last_seq: S.last_seq,\n      history: sourceHistory\n    };\n  }\n\n  var targetId = T.session_id;\n  if (hasSessionId(targetId, sourceRest)) {\n    return {\n      last_seq: T.last_seq,\n      history: targetRest\n    };\n  }\n\n  return compareReplicationHistory(sourceRest, targetRest);\n}\n\nfunction hasSessionId (sessionId, history) {\n  var props = history[0];\n  var rest = history.slice(1);\n\n  if (!sessionId || history.length === 0) {\n    return false;\n  }\n\n  if (sessionId === props.session_id) {\n    return true;\n  }\n\n  return hasSessionId(sessionId, rest);\n}\n\n\nmodule.exports = Checkpointer;\n\n},{"./../deps/ajax/explain404":33,"./../deps/promise":77,"pouchdb-collate":104}],92:[function(require,module,exports){\n\'use strict\';\n\nvar Promise = require(\'./../deps/promise\');\nvar md5 = require(\'../deps/md5\');\nvar collate = require(\'pouchdb-collate\').collate;\n\nfunction sortObjectPropertiesByKey(queryParams) {\n  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n    result[key] = queryParams[key];\n    return result;\n  }, {});\n}\n\n// Generate a unique id particular to this replication.\n// Not guaranteed to align perfectly with CouchDB\'s rep ids.\nfunction generateReplicationId(src, target, opts) {\n  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : \'\';\n  var filterFun = opts.filter ? opts.filter.toString() : \'\';\n  var queryParams = \'\';\n  var filterViewName =  \'\';\n\n  if (opts.filter && opts.query_params) {\n    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n  }\n\n  if (opts.filter && opts.filter === \'_view\') {\n    filterViewName = opts.view.toString();\n  }\n\n  return Promise.all([src.id(), target.id()]).then(function (res) {\n    var queryData = res[0] + res[1] + filterFun + filterViewName +\n      queryParams + docIds;\n    return md5(queryData);\n  }).then(function (md5sum) {\n    // can\'t use straight-up md5 alphabet, because\n    // the char \'/\' is interpreted as being for attachments,\n    // and + is also not url-safe\n    md5sum = md5sum.replace(/\\//g, \'.\').replace(/\\+/g, \'_\');\n    return \'_local/\' + md5sum;\n  });\n}\n\nmodule.exports = generateReplicationId;\n\n},{"../deps/md5":65,"./../deps/promise":77,"pouchdb-collate":104}],93:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'./../utils\');\nvar clone = utils.clone;\nvar Promise = utils.Promise;\n\nfunction isGenOne(rev) {\n  return /^1-/.test(rev);\n}\n\nfunction createBulkGetOpts(diffs) {\n  var requests = [];\n  Object.keys(diffs).forEach(function (id) {\n    var missingRevs = diffs[id].missing;\n    missingRevs.forEach(function (missingRev) {\n      requests.push({\n        id: id,\n        rev: missingRev\n      });\n    });\n  });\n\n  return {\n    docs: requests,\n    revs: true,\n    attachments: true,\n    binary: true\n  };\n}\n\n//\n// Fetch all the documents from the src as described in the "diffs",\n// which is a mapping of docs IDs to revisions. If the state ever\n// changes to "cancelled", then the returned promise will be rejected.\n// Else it will be resolved with a list of fetched documents.\n//\nfunction getDocs(src, diffs, state) {\n  diffs = clone(diffs); // we do not need to modify this\n\n  var resultDocs = [];\n\n  function getAllDocs() {\n\n    var bulkGetOpts = createBulkGetOpts(diffs);\n\n    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {\n      if (state.cancelled) {\n        throw new Error(\'cancelled\');\n      }\n      bulkGetResponse.results.forEach(function (bulkGetInfo) {\n        bulkGetInfo.docs.forEach(function (doc) {\n          if (doc.ok) {\n            resultDocs.push(doc.ok);\n          }\n        });\n      });\n    });\n  }\n\n  function hasAttachments(doc) {\n    return doc._attachments && Object.keys(doc._attachments).length > 0;\n  }\n\n  function fetchRevisionOneDocs(ids) {\n    // Optimization: fetch gen-1 docs and attachments in\n    // a single request using _all_docs\n    return src.allDocs({\n      keys: ids,\n      include_docs: true\n    }).then(function (res) {\n      if (state.cancelled) {\n        throw new Error(\'cancelled\');\n      }\n      res.rows.forEach(function (row) {\n        if (row.deleted || !row.doc || !isGenOne(row.value.rev) ||\n            hasAttachments(row.doc)) {\n          // if any of these conditions apply, we need to fetch using get()\n          return;\n        }\n\n        // the doc we got back from allDocs() is sufficient\n        resultDocs.push(row.doc);\n        delete diffs[row.id];\n      });\n    });\n  }\n\n  function getRevisionOneDocs() {\n    // filter out the generation 1 docs and get them\n    // leaving the non-generation one docs to be got otherwise\n    var ids = Object.keys(diffs).filter(function (id) {\n      var missing = diffs[id].missing;\n      return missing.length === 1 && isGenOne(missing[0]);\n    });\n    if (ids.length > 0) {\n      return fetchRevisionOneDocs(ids);\n    }\n  }\n\n  function returnDocs() {\n    return resultDocs;\n  }\n\n  return Promise.resolve()\n    .then(getRevisionOneDocs)\n    .then(getAllDocs)\n    .then(returnDocs);\n}\n\nmodule.exports = getDocs;\n},{"./../utils":100}],94:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'../utils\');\nvar replicate = require(\'./replicate\');\nvar Replication = require(\'./replication\');\n\nvar errors = require(\'../deps/errors\');\n\nfunction toPouch(db, opts) {\n  var PouchConstructor = opts.PouchConstructor;\n  if (typeof db === \'string\') {\n    return new PouchConstructor(db, opts);\n  } else {\n    return db;\n  }\n}\n\nfunction replicateWrapper(src, target, opts, callback) {\n\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === \'undefined\') {\n    opts = {};\n  }\n\n  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {\n    throw errors.error(errors.BAD_REQUEST,\n                       "`doc_ids` filter parameter is not a list.");\n  }\n\n  opts.complete = callback;\n  opts = utils.clone(opts);\n  opts.continuous = opts.continuous || opts.live;\n  opts.retry = (\'retry\' in opts) ? opts.retry : false;\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  var replicateRet = new Replication(opts);\n  var srcPouch = toPouch(src, opts);\n  var targetPouch = toPouch(target, opts);\n  replicate(srcPouch, targetPouch, opts, replicateRet);\n  return replicateRet;\n}\n\nmodule.exports = {\n  replicate: replicateWrapper,\n  toPouch: toPouch\n};\n\n},{"../deps/errors":62,"../utils":100,"./replicate":95,"./replication":96}],95:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'./../utils\');\nvar Checkpointer = require(\'./checkpointer\');\nvar backOff = require(\'./backoff\');\nvar generateReplicationId = require(\'./generateReplicationId\');\nvar getDocs = require(\'./getDocs\');\n\nfunction replicate(src, target, opts, returnValue, result) {\n  var batches = [];               // list of batches to be processed\n  var currentBatch;               // the batch currently being processed\n  var pendingBatch = {\n    seq: 0,\n    changes: [],\n    docs: []\n  }; // next batch, not yet ready to be processed\n  var writingCheckpoint = false;  // true while checkpoint is being written\n  var changesCompleted = false;   // true when all changes received\n  var replicationCompleted = false; // true when replication has completed\n  var last_seq = 0;\n  var continuous = opts.continuous || opts.live || false;\n  var batch_size = opts.batch_size || 100;\n  var batches_limit = opts.batches_limit || 10;\n  var changesPending = false;     // true while src.changes is running\n  var doc_ids = opts.doc_ids;\n  var state = {\n    cancelled: false\n  };\n  var repId;\n  var checkpointer;\n  var allErrors = [];\n  var changedDocs = [];\n  // Like couchdb, every replication gets a unique session id\n  var session = utils.uuid();\n\n  result = result || {\n    ok: true,\n    start_time: new Date(),\n    docs_read: 0,\n    docs_written: 0,\n    doc_write_failures: 0,\n    errors: []\n  };\n\n  var changesOpts = {};\n  returnValue.ready(src, target);\n\n  function initCheckpointer() {\n    if (checkpointer) {\n      return utils.Promise.resolve();\n    }\n    return generateReplicationId(src, target, opts).then(function (res) {\n      repId = res;\n      checkpointer = new Checkpointer(src, target, repId, state);\n    });\n  }\n\n  function writeDocs() {\n    if (currentBatch.docs.length === 0) {\n      return;\n    }\n    var docs = currentBatch.docs;\n    return target.bulkDocs({docs: docs, new_edits: false}).then(function (res) {\n      if (state.cancelled) {\n        completeReplication();\n        throw new Error(\'cancelled\');\n      }\n      var errors = [];\n      var errorsById = {};\n      res.forEach(function (res) {\n        if (res.error) {\n          result.doc_write_failures++;\n          errors.push(res);\n          errorsById[res.id] = res;\n        }\n      });\n      allErrors = allErrors.concat(errors);\n      result.docs_written += currentBatch.docs.length - errors.length;\n      var non403s = errors.filter(function (error) {\n        return error.name !== \'unauthorized\' && error.name !== \'forbidden\';\n      });\n\n      changedDocs = [];\n      docs.forEach(function(doc) {\n        var error = errorsById[doc._id];\n        if (error) {\n          returnValue.emit(\'denied\', utils.clone(error));\n        } else {\n          changedDocs.push(doc);\n        }\n      });\n\n      if (non403s.length > 0) {\n        var error = new Error(\'bulkDocs error\');\n        error.other_errors = errors;\n        abortReplication(\'target.bulkDocs failed to write docs\', error);\n        throw new Error(\'bulkWrite partial failure\');\n      }\n    }, function (err) {\n      result.doc_write_failures += docs.length;\n      throw err;\n    });\n  }\n\n  function finishBatch() {\n    result.last_seq = last_seq = currentBatch.seq;\n    var outResult = utils.clone(result);\n    if (changedDocs.length) {\n      outResult.docs = changedDocs;\n      returnValue.emit(\'change\', outResult);\n    }\n    writingCheckpoint = true;\n    return checkpointer.writeCheckpoint(currentBatch.seq,\n        session).then(function () {\n      writingCheckpoint = false;\n      if (state.cancelled) {\n        completeReplication();\n        throw new Error(\'cancelled\');\n      }\n      currentBatch = undefined;\n      getChanges();\n    }).catch(function (err) {\n      writingCheckpoint = false;\n      abortReplication(\'writeCheckpoint completed with error\', err);\n      throw err;\n    });\n  }\n\n  function getDiffs() {\n    var diff = {};\n    currentBatch.changes.forEach(function (change) {\n      // Couchbase Sync Gateway emits these, but we can ignore them\n      if (change.id === "_user/") {\n        return;\n      }\n      diff[change.id] = change.changes.map(function (x) {\n        return x.rev;\n      });\n    });\n    return target.revsDiff(diff).then(function (diffs) {\n      if (state.cancelled) {\n        completeReplication();\n        throw new Error(\'cancelled\');\n      }\n      // currentBatch.diffs elements are deleted as the documents are written\n      currentBatch.diffs = diffs;\n    });\n  }\n\n  function getBatchDocs() {\n    return getDocs(src, currentBatch.diffs, state).then(function (docs) {\n      docs.forEach(function (doc) {\n        delete currentBatch.diffs[doc._id];\n        result.docs_read++;\n        currentBatch.docs.push(doc);\n      });\n    });\n  }\n\n  function startNextBatch() {\n    if (state.cancelled || currentBatch) {\n      return;\n    }\n    if (batches.length === 0) {\n      processPendingBatch(true);\n      return;\n    }\n    currentBatch = batches.shift();\n    getDiffs()\n      .then(getBatchDocs)\n      .then(writeDocs)\n      .then(finishBatch)\n      .then(startNextBatch)\n      .catch(function (err) {\n        abortReplication(\'batch processing terminated with error\', err);\n      });\n  }\n\n\n  function processPendingBatch(immediate) {\n    if (pendingBatch.changes.length === 0) {\n      if (batches.length === 0 && !currentBatch) {\n        if ((continuous && changesOpts.live) || changesCompleted) {\n          returnValue.state = \'pending\';\n          returnValue.emit(\'paused\');\n        }\n        if (changesCompleted) {\n          completeReplication();\n        }\n      }\n      return;\n    }\n    if (\n      immediate ||\n      changesCompleted ||\n      pendingBatch.changes.length >= batch_size\n    ) {\n      batches.push(pendingBatch);\n      pendingBatch = {\n        seq: 0,\n        changes: [],\n        docs: []\n      };\n      if (returnValue.state === \'pending\' || returnValue.state === \'stopped\') {\n        returnValue.state = \'active\';\n        returnValue.emit(\'active\');\n      }\n      startNextBatch();\n    }\n  }\n\n\n  function abortReplication(reason, err) {\n    if (replicationCompleted) {\n      return;\n    }\n    if (!err.message) {\n      err.message = reason;\n    }\n    result.ok = false;\n    result.status = \'aborting\';\n    result.errors.push(err);\n    allErrors = allErrors.concat(err);\n    batches = [];\n    pendingBatch = {\n      seq: 0,\n      changes: [],\n      docs: []\n    };\n    completeReplication();\n  }\n\n\n  function completeReplication() {\n    if (replicationCompleted) {\n      return;\n    }\n    if (state.cancelled) {\n      result.status = \'cancelled\';\n      if (writingCheckpoint) {\n        return;\n      }\n    }\n    result.status = result.status || \'complete\';\n    result.end_time = new Date();\n    result.last_seq = last_seq;\n    replicationCompleted = state.cancelled = true;\n    var non403s = allErrors.filter(function (error) {\n      return error.name !== \'unauthorized\' && error.name !== \'forbidden\';\n    });\n    if (non403s.length > 0) {\n      var error = allErrors.pop();\n      if (allErrors.length > 0) {\n        error.other_errors = allErrors;\n      }\n      error.result = result;\n      backOff(opts, returnValue, error, function () {\n        replicate(src, target, opts, returnValue);\n      });\n    } else {\n      result.errors = allErrors;\n      returnValue.emit(\'complete\', result);\n      returnValue.removeAllListeners();\n    }\n  }\n\n\n  function onChange(change) {\n    if (state.cancelled) {\n      return completeReplication();\n    }\n    var filter = utils.filterChange(opts)(change);\n    if (!filter) {\n      return;\n    }\n    pendingBatch.seq = change.seq;\n    pendingBatch.changes.push(change);\n    processPendingBatch(batches.length === 0);\n  }\n\n\n  function onChangesComplete(changes) {\n    changesPending = false;\n    if (state.cancelled) {\n      return completeReplication();\n    }\n\n    // if no results were returned then we\'re done,\n    // else fetch more\n    if (changes.results.length > 0) {\n      changesOpts.since = changes.last_seq;\n      getChanges();\n    } else {\n      if (continuous) {\n        changesOpts.live = true;\n        getChanges();\n      } else {\n        changesCompleted = true;\n      }\n    }\n    processPendingBatch(true);\n  }\n\n\n  function onChangesError(err) {\n    changesPending = false;\n    if (state.cancelled) {\n      return completeReplication();\n    }\n    abortReplication(\'changes rejected\', err);\n  }\n\n\n  function getChanges() {\n    if (!(\n      !changesPending &&\n      !changesCompleted &&\n      batches.length < batches_limit\n      )) {\n      return;\n    }\n    changesPending = true;\n    function abortChanges() {\n      changes.cancel();\n    }\n    function removeListener() {\n      returnValue.removeListener(\'cancel\', abortChanges);\n    }\n\n    if (returnValue._changes) { // remove old changes() and listeners\n      returnValue.removeListener(\'cancel\', returnValue._abortChanges);\n      returnValue._changes.cancel();\n    }\n    returnValue.once(\'cancel\', abortChanges);\n\n    var changes = src.changes(changesOpts)\n      .on(\'change\', onChange);\n    changes.then(removeListener, removeListener);\n    changes.then(onChangesComplete)\n      .catch(onChangesError);\n\n    if (opts.retry) {\n      // save for later so we can cancel if necessary\n      returnValue._changes = changes;\n      returnValue._abortChanges = abortChanges;\n    }\n  }\n\n\n  function startChanges() {\n    initCheckpointer().then(function () {\n      if (state.cancelled) {\n        completeReplication();\n        return;\n      }\n      return checkpointer.getCheckpoint().then(function (checkpoint) {\n        last_seq = checkpoint;\n        changesOpts = {\n          since: last_seq,\n          limit: batch_size,\n          batch_size: batch_size,\n          style: \'all_docs\',\n          doc_ids: doc_ids,\n          returnDocs: true // required so we know when we\'re done\n        };\n        if (opts.filter) {\n          if (typeof opts.filter !== \'string\') {\n            // required for the client-side filter in onChange\n            changesOpts.include_docs = true;\n          } else { // ddoc filter\n            changesOpts.filter = opts.filter;\n          }\n        }\n        if (opts.query_params) {\n          changesOpts.query_params = opts.query_params;\n        }\n        if (opts.view) {\n          changesOpts.view = opts.view;\n        }\n        getChanges();\n      });\n    }).catch(function (err) {\n      abortReplication(\'getCheckpoint rejected with \', err);\n    });\n  }\n\n  if (returnValue.cancelled) { // cancelled immediately\n    completeReplication();\n    return;\n  }\n\n  if (!returnValue._addedListeners) {\n    returnValue.once(\'cancel\', completeReplication);\n\n    if (typeof opts.complete === \'function\') {\n      returnValue.once(\'error\', opts.complete);\n      returnValue.once(\'complete\', function (result) {\n        opts.complete(null, result);\n      });\n    }\n    returnValue._addedListeners = true;\n  }\n\n  if (typeof opts.since === \'undefined\') {\n    startChanges();\n  } else {\n    initCheckpointer().then(function () {\n      writingCheckpoint = true;\n      return checkpointer.writeCheckpoint(opts.since, session);\n    }).then(function () {\n      writingCheckpoint = false;\n      if (state.cancelled) {\n        completeReplication();\n        return;\n      }\n      last_seq = opts.since;\n      startChanges();\n    }).catch(function (err) {\n      writingCheckpoint = false;\n      abortReplication(\'writeCheckpoint completed with error\', err);\n      throw err;\n    });\n  }\n}\n\nmodule.exports = replicate;\n\n},{"./../utils":100,"./backoff":90,"./checkpointer":91,"./generateReplicationId":92,"./getDocs":93}],96:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'./../utils\');\nvar EE = require(\'events\').EventEmitter;\nvar Promise = utils.Promise;\n\n// We create a basic promise so the caller can cancel the replication possibly\n// before we have actually started listening to changes etc\nutils.inherits(Replication, EE);\nfunction Replication() {\n  EE.call(this);\n  this.cancelled = false;\n  this.state = \'pending\';\n  var self = this;\n  var promise = new Promise(function (fulfill, reject) {\n    self.once(\'complete\', fulfill);\n    self.once(\'error\', reject);\n  });\n  self.then = function (resolve, reject) {\n    return promise.then(resolve, reject);\n  };\n  self.catch = function (reject) {\n    return promise.catch(reject);\n  };\n  // As we allow error handling via "error" event as well,\n  // put a stub in here so that rejecting never throws UnhandledError.\n  self.catch(function () {});\n}\n\nReplication.prototype.cancel = function () {\n  this.cancelled = true;\n  this.state = \'cancelled\';\n  this.emit(\'cancel\');\n};\n\nReplication.prototype.ready = function (src, target) {\n  var self = this;\n  if (self._readyCalled) {\n    return;\n  }\n  self._readyCalled = true;\n\n  function onDestroy() {\n    self.cancel();\n  }\n  src.once(\'destroyed\', onDestroy);\n  target.once(\'destroyed\', onDestroy);\n  function cleanup() {\n    src.removeListener(\'destroyed\', onDestroy);\n    target.removeListener(\'destroyed\', onDestroy);\n  }\n  self.once(\'complete\', cleanup);\n};\n\nmodule.exports = Replication;\n},{"./../utils":100,"events":109}],97:[function(require,module,exports){\n"use strict";\n\nvar PouchDB = require("./constructor");\nvar utils = require(\'./utils\');\nvar EE = require(\'events\').EventEmitter;\nvar hasLocalStorage = require(\'./deps/env/hasLocalStorage\');\n\nPouchDB.adapters = {};\nPouchDB.preferredAdapters = [];\n\nPouchDB.prefix = \'_pouch_\';\n\nvar eventEmitter = new EE();\n\nfunction setUpEventEmitter(Pouch) {\n  Object.keys(EE.prototype).forEach(function (key) {\n    if (typeof EE.prototype[key] === \'function\') {\n      Pouch[key] = eventEmitter[key].bind(eventEmitter);\n    }\n  });\n\n  // these are created in constructor.js, and allow us to notify each DB with\n  // the same name that it was destroyed, via the constructor object\n  var destructionListeners = Pouch._destructionListeners = new utils.Map();\n  Pouch.on(\'destroyed\', function onConstructorDestroyed(name) {\n    if (!destructionListeners.has(name)) {\n      return;\n    }\n    destructionListeners.get(name).forEach(function (callback) {\n      callback();\n    });\n    destructionListeners.delete(name);\n  });\n}\n\nsetUpEventEmitter(PouchDB);\n\nPouchDB.parseAdapter = function (name, opts) {\n  var match = name.match(/([a-z\\-]*):\\/\\/(.*)/);\n  var adapter, adapterName;\n  if (match) {\n    // the http adapter expects the fully qualified name\n    name = /http(s?)/.test(match[1]) ? match[1] + \'://\' + match[2] : match[2];\n    adapter = match[1];\n    if (!PouchDB.adapters[adapter].valid()) {\n      throw \'Invalid adapter\';\n    }\n    return {name: name, adapter: match[1]};\n  }\n\n  // check for browsers that have been upgraded from websql-only to websql+idb\n  var skipIdb = \'idb\' in PouchDB.adapters && \'websql\' in PouchDB.adapters &&\n    hasLocalStorage() &&\n    localStorage[\'_pouch__websqldb_\' + PouchDB.prefix + name];\n\n\n  if (opts.adapter) {\n    adapterName = opts.adapter;\n  } else if (typeof opts !== \'undefined\' && opts.db) {\n    adapterName = \'leveldb\';\n  } else { // automatically determine adapter\n    for (var i = 0; i < PouchDB.preferredAdapters.length; ++i) {\n      adapterName = PouchDB.preferredAdapters[i];\n      if (adapterName in PouchDB.adapters) {\n        if (skipIdb && adapterName === \'idb\') {\n          // log it, because this can be confusing during development\n          console.log(\'PouchDB is downgrading "\' + name + \'" to WebSQL to\' +\n            \' avoid data loss, because it was already opened with WebSQL.\');\n          continue; // keep using websql to avoid user data loss\n        }\n        break;\n      }\n    }\n  }\n\n  adapter = PouchDB.adapters[adapterName];\n\n  // if adapter is invalid, then an error will be thrown later\n  var usePrefix = (adapter && \'use_prefix\' in adapter) ?\n      adapter.use_prefix : true;\n\n  return {\n    name: usePrefix ? (PouchDB.prefix + name) : name,\n    adapter: adapterName\n  };\n};\n\nPouchDB.adapter = function (id, obj, addToPreferredAdapters) {\n  if (obj.valid()) {\n    PouchDB.adapters[id] = obj;\n    if (addToPreferredAdapters) {\n      PouchDB.preferredAdapters.push(id);\n    }\n  }\n};\n\nPouchDB.plugin = function (obj) {\n  Object.keys(obj).forEach(function (id) {\n    PouchDB.prototype[id] = obj[id];\n  });\n\n  return PouchDB;\n};\n\nPouchDB.defaults = function (defaultOpts) {\n  function PouchAlt(name, opts, callback) {\n    if (!(this instanceof PouchAlt)) {\n      return new PouchAlt(name, opts, callback);\n    }\n\n    if (typeof opts === \'function\' || typeof opts === \'undefined\') {\n      callback = opts;\n      opts = {};\n    }\n    if (name && typeof name === \'object\') {\n      opts = name;\n      name = undefined;\n    }\n\n    opts = utils.extend({}, defaultOpts, opts);\n    PouchDB.call(this, name, opts, callback);\n  }\n\n  utils.inherits(PouchAlt, PouchDB);\n\n  setUpEventEmitter(PouchAlt);\n\n  PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();\n  Object.keys(PouchDB).forEach(function (key) {\n    if (!(key in PouchAlt)) {\n      PouchAlt[key] = PouchDB[key];\n    }\n  });\n\n  return PouchAlt;\n};\n\nmodule.exports = PouchDB;\n\n},{"./constructor":27,"./deps/env/hasLocalStorage":60,"./utils":100,"events":109}],98:[function(require,module,exports){\n\'use strict\';\n\nvar utils = require(\'./utils\');\nvar replication = require(\'./replicate\');\nvar replicate = replication.replicate;\nvar EE = require(\'events\').EventEmitter;\n\nutils.inherits(Sync, EE);\nmodule.exports = sync;\nfunction sync(src, target, opts, callback) {\n  if (typeof opts === \'function\') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === \'undefined\') {\n    opts = {};\n  }\n  opts = utils.clone(opts);\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  src = replication.toPouch(src, opts);\n  target = replication.toPouch(target, opts);\n  return new Sync(src, target, opts, callback);\n}\n\nfunction Sync(src, target, opts, callback) {\n  var self = this;\n  this.canceled = false;\n\n  var optsPush = opts.push ? utils.extend({}, opts, opts.push) : opts;\n  var optsPull = opts.pull ? utils.extend({}, opts, opts.pull) : opts;\n\n  this.push = replicate(src, target, optsPush);\n  this.pull = replicate(target, src, optsPull);\n\n  this.pushPaused = true;\n  this.pullPaused = true;\n\n  function pullChange(change) {\n    self.emit(\'change\', {\n      direction: \'pull\',\n      change: change\n    });\n  }\n  function pushChange(change) {\n    self.emit(\'change\', {\n      direction: \'push\',\n      change: change\n    });\n  }\n  function pushDenied(doc) {\n    self.emit(\'denied\', {\n      direction: \'push\',\n      doc: doc\n    });\n  }\n  function pullDenied(doc) {\n    self.emit(\'denied\', {\n      direction: \'pull\',\n      doc: doc\n    });\n  }\n  function pushPaused() {\n    self.pushPaused = true;\n    if (self.pullPaused) {\n      self.emit(\'paused\');\n    }\n  }\n  function pullPaused() {\n    self.pullPaused = true;\n    if (self.pushPaused) {\n      self.emit(\'paused\');\n    }\n  }\n  function pushActive() {\n    self.pushPaused = false;\n    if (self.pullPaused) {\n      self.emit(\'active\', {\n        direction: \'push\'\n      });\n    }\n  }\n  function pullActive() {\n    self.pullPaused = false;\n    if (self.pushPaused) {\n      self.emit(\'active\', {\n        direction: \'pull\'\n      });\n    }\n  }\n\n  var removed = {};\n\n  function removeAll(type) { // type is \'push\' or \'pull\'\n    return function (event, func) {\n      var isChange = event === \'change\' &&\n        (func === pullChange || func === pushChange);\n      var isDenied = event === \'denied\' &&\n        (func === pullDenied || func === pushDenied);\n      var isPaused = event === \'paused\' &&\n        (func === pullPaused || func === pushPaused);\n      var isActive = event === \'active\' &&\n        (func === pullActive || func === pushActive);\n\n      if (isChange || isDenied || isPaused || isActive) {\n        if (!(event in removed)) {\n          removed[event] = {};\n        }\n        removed[event][type] = true;\n        if (Object.keys(removed[event]).length === 2) {\n          // both push and pull have asked to be removed\n          self.removeAllListeners(event);\n        }\n      }\n    };\n  }\n\n  if (opts.live) {\n    this.push.on(\'complete\', self.pull.cancel.bind(self.pull));\n    this.pull.on(\'complete\', self.push.cancel.bind(self.push));\n  }\n\n  this.on(\'newListener\', function (event) {\n    if (event === \'change\') {\n      self.pull.on(\'change\', pullChange);\n      self.push.on(\'change\', pushChange);\n    } else if (event === \'denied\') {\n      self.pull.on(\'denied\', pullDenied);\n      self.push.on(\'denied\', pushDenied);\n    } else if (event === \'active\') {\n      self.pull.on(\'active\', pullActive);\n      self.push.on(\'active\', pushActive);\n    } else if (event === \'paused\') {\n      self.pull.on(\'paused\', pullPaused);\n      self.push.on(\'paused\', pushPaused);\n    }\n  });\n\n  this.on(\'removeListener\', function (event) {\n    if (event === \'change\') {\n      self.pull.removeListener(\'change\', pullChange);\n      self.push.removeListener(\'change\', pushChange);\n    } else if (event === \'denied\') {\n      self.pull.removeListener(\'denied\', pullDenied);\n      self.push.removeListener(\'denied\', pushDenied);\n    } else if (event === \'active\') {\n      self.pull.removeListener(\'active\', pullActive);\n      self.push.removeListener(\'active\', pushActive);\n    } else if (event === \'paused\') {\n      self.pull.removeListener(\'paused\', pullPaused);\n      self.push.removeListener(\'paused\', pushPaused);\n    }\n  });\n\n  this.pull.on(\'removeListener\', removeAll(\'pull\'));\n  this.push.on(\'removeListener\', removeAll(\'push\'));\n\n  var promise = utils.Promise.all([\n    this.push,\n    this.pull\n  ]).then(function (resp) {\n    var out = {\n      push: resp[0],\n      pull: resp[1]\n    };\n    self.emit(\'complete\', out);\n    if (callback) {\n      callback(null, out);\n    }\n    self.removeAllListeners();\n    return out;\n  }, function (err) {\n    self.cancel();\n    if (callback) {\n      // if there\'s a callback, then the callback can receive\n      // the error event\n      callback(err);\n    } else {\n      // if there\'s no callback, then we\'re safe to emit an error\n      // event, which would otherwise throw an unhandled error\n      // due to \'error\' being a special event in EventEmitters\n      self.emit(\'error\', err);\n    }\n    self.removeAllListeners();\n    if (callback) {\n      // no sense throwing if we\'re already emitting an \'error\' event\n      throw err;\n    }\n  });\n\n  this.then = function (success, err) {\n    return promise.then(success, err);\n  };\n\n  this.catch = function (err) {\n    return promise.catch(err);\n  };\n}\n\nSync.prototype.cancel = function () {\n  if (!this.canceled) {\n    this.canceled = true;\n    this.push.cancel();\n    this.pull.cancel();\n  }\n};\n\n},{"./replicate":94,"./utils":100,"events":109}],99:[function(require,module,exports){\n\'use strict\';\n\nmodule.exports = TaskQueue;\n\nfunction TaskQueue() {\n  this.isReady = false;\n  this.failed = false;\n  this.queue = [];\n}\n\nTaskQueue.prototype.execute = function () {\n  var fun;\n  if (this.failed) {\n    while ((fun = this.queue.shift())) {\n      fun(this.failed);\n    }\n  } else {\n    while ((fun = this.queue.shift())) {\n      fun();\n    }\n  }\n};\n\nTaskQueue.prototype.fail = function (err) {\n  this.failed = err;\n  this.execute();\n};\n\nTaskQueue.prototype.ready = function (db) {\n  this.isReady = true;\n  this.db = db;\n  this.execute();\n};\n\nTaskQueue.prototype.addTask = function (fun) {\n  this.queue.push(fun);\n  if (this.failed) {\n    this.execute();\n  }\n};\n\n},{}],100:[function(require,module,exports){\n/*jshint strict: false */\nvar traverseRevTree = require(\'./deps/merge/traverseRevTree\');\nexports.ajax = require(\'./deps/ajax/prequest\');\nexports.uuid = require(\'./deps/uuid\');\nexports.getArguments = require(\'argsarray\');\nvar collections = require(\'pouchdb-collections\');\nexports.Map = collections.Map;\nexports.Set = collections.Set;\nvar parseDoc = require(\'./deps/docs/parseDoc\');\n\nvar Promise = require(\'./deps/promise\');\nexports.Promise = Promise;\n\nvar base64 = require(\'./deps/binary/base64\');\nvar errors = require(\'./deps/errors\');\n\n// TODO: don\'t export these\nexports.atob = base64.atob;\nexports.btoa = base64.btoa;\n\nvar binStringToBlobOrBuffer =\n  require(\'./deps/binary/binaryStringToBlobOrBuffer\');\n\n// TODO: only used by the integration tests\nexports.binaryStringToBlobOrBuffer = binStringToBlobOrBuffer;\n\nexports.clone = require(\'./deps/clone\');\nexports.extend = require(\'./deps/extend\');\n\nexports.pick = require(\'./deps/pick\');\nexports.inherits = require(\'inherits\');\n\nfunction tryFilter(filter, doc, req) {\n  try {\n    return !filter(doc, req);\n  } catch (err) {\n    var msg = \'Filter function threw: \' + err.toString();\n    return errors.error(errors.BAD_REQUEST, msg);\n  }\n}\n\nexports.filterChange = function filterChange(opts) {\n  var req = {};\n  var hasFilter = opts.filter && typeof opts.filter === \'function\';\n  req.query = opts.query_params;\n\n  return function filter(change) {\n    if (!change.doc) {\n      // CSG sends events on the changes feed that don\'t have documents,\n      // this hack makes a whole lot of existing code robust.\n      change.doc = {};\n    }\n\n    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);\n\n    if (typeof filterReturn === \'object\') {\n      return filterReturn;\n    }\n\n    if (filterReturn) {\n      return false;\n    }\n\n    if (!opts.include_docs) {\n      delete change.doc;\n    } else if (!opts.attachments) {\n      for (var att in change.doc._attachments) {\n        /* istanbul ignore else */\n        if (change.doc._attachments.hasOwnProperty(att)) {\n          change.doc._attachments[att].stub = true;\n        }\n      }\n    }\n    return true;\n  };\n};\n\nexports.parseDoc = parseDoc.parseDoc;\nexports.invalidIdError = parseDoc.invalidIdError;\n\nexports.isCordova = function () {\n  return (typeof cordova !== "undefined" ||\n          typeof PhoneGap !== "undefined" ||\n          typeof phonegap !== "undefined");\n};\n\nexports.Changes = require(\'./changesHandler\');\n\nexports.once = require(\'./deps/once\');\n\nexports.toPromise = require(\'./deps/toPromise\');\n\nexports.adapterFun = function (name, callback) {\n  var log = require(\'debug\')(\'pouchdb:api\');\n\n  function logApiCall(self, name, args) {\n    /* istanbul ignore if */\n    if (log.enabled) {\n      var logArgs = [self._db_name, name];\n      for (var i = 0; i < args.length - 1; i++) {\n        logArgs.push(args[i]);\n      }\n      log.apply(null, logArgs);\n\n      // override the callback itself to log the response\n      var origCallback = args[args.length - 1];\n      args[args.length - 1] = function (err, res) {\n        var responseArgs = [self._db_name, name];\n        responseArgs = responseArgs.concat(\n          err ? [\'error\', err] : [\'success\', res]\n        );\n        log.apply(null, responseArgs);\n        origCallback(err, res);\n      };\n    }\n  }\n\n  return exports.toPromise(exports.getArguments(function (args) {\n    if (this._closed) {\n      return Promise.reject(new Error(\'database is closed\'));\n    }\n    var self = this;\n    logApiCall(self, name, args);\n    if (!this.taskqueue.isReady) {\n      return new Promise(function (fulfill, reject) {\n        self.taskqueue.addTask(function (failed) {\n          if (failed) {\n            reject(failed);\n          } else {\n            fulfill(self[name].apply(self, args));\n          }\n        });\n      });\n    }\n    return callback.apply(this, args);\n  }));\n};\n\nexports.explain404 = require(\'./deps/ajax/explain404\');\n\nexports.parseUri = require(\'./deps/parseUri\');\n\nexports.compare = function (left, right) {\n  return left < right ? -1 : left > right ? 1 : 0;\n};\n\n\n// compact a tree by marking its non-leafs as missing,\n// and return a list of revs to delete\nexports.compactTree = function compactTree(metadata) {\n  var revs = [];\n  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                     revHash, ctx, opts) {\n    if (opts.status === \'available\' && !isLeaf) {\n      revs.push(pos + \'-\' + revHash);\n      opts.status = \'missing\';\n    }\n  });\n  return revs;\n};\n\nvar vuvuzela = require(\'vuvuzela\');\n\nexports.safeJsonParse = function safeJsonParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return vuvuzela.parse(str);\n  }\n};\n\nexports.safeJsonStringify = function safeJsonStringify(json) {\n  try {\n    return JSON.stringify(json);\n  } catch (e) {\n    return vuvuzela.stringify(json);\n  }\n};\n\n},{"./changesHandler":26,"./deps/ajax/explain404":33,"./deps/ajax/prequest":36,"./deps/binary/base64":39,"./deps/binary/binaryStringToBlobOrBuffer":42,"./deps/clone":51,"./deps/docs/parseDoc":56,"./deps/errors":62,"./deps/extend":63,"./deps/merge/traverseRevTree":71,"./deps/once":73,"./deps/parseUri":75,"./deps/pick":76,"./deps/promise":77,"./deps/toPromise":78,"./deps/uuid":80,"argsarray":6,"debug":7,"inherits":10,"pouchdb-collections":106,"vuvuzela":108}],101:[function(require,module,exports){\nmodule.exports = "4.0.4-prerelease";\n\n},{}],102:[function(require,module,exports){\n\'use strict\';\nvar immediate = require(\'immediate\');\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = [\'REJECTED\'];\nvar FULFILLED = [\'FULFILLED\'];\nvar PENDING = [\'PENDING\'];\nvar UNHANDLED;\n\nmodule.exports = exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== \'function\') {\n    throw new TypeError(\'resolver must be a function\');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype["catch"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== \'function\' && this.state === FULFILLED ||\n    typeof onRejected !== \'function\' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === \'function\') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === \'function\') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError(\'Cannot resolve promise with itself\'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === \'error\') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === \'object\' && typeof then === \'function\') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === \'error\') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = \'success\';\n  } catch (e) {\n    out.status = \'error\';\n    out.value = e;\n  }\n  return out;\n}\n\nexports.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nexports.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nexports.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== \'[object Array]\') {\n    return this.reject(new TypeError(\'must be an array\'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nexports.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== \'[object Array]\') {\n    return this.reject(new TypeError(\'must be an array\'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{"immediate":103}],103:[function(require,module,exports){\n(function (global){\n\'use strict\';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode(\'\');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== \'undefined\') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if (\'document\' in global && \'onreadystatechange\' in global.document.createElement(\'script\')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n      var scriptEl = global.document.createElement(\'script\');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})\n},{}],104:[function(require,module,exports){\n\'use strict\';\n\nvar MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE\nvar MAGNITUDE_DIGITS = 3; // ditto\nvar SEP = \'\'; // set to \'_\' for easier debugging \n\nvar utils = require(\'./utils\');\n\nexports.collate = function (a, b) {\n\n  if (a === b) {\n    return 0;\n  }\n\n  a = exports.normalizeKey(a);\n  b = exports.normalizeKey(b);\n\n  var ai = collationIndex(a);\n  var bi = collationIndex(b);\n  if ((ai - bi) !== 0) {\n    return ai - bi;\n  }\n  if (a === null) {\n    return 0;\n  }\n  switch (typeof a) {\n    case \'number\':\n      return a - b;\n    case \'boolean\':\n      return a === b ? 0 : (a < b ? -1 : 1);\n    case \'string\':\n      return stringCollate(a, b);\n  }\n  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);\n};\n\n// couch considers null/NaN/Infinity/-Infinity === undefined,\n// for the purposes of mapreduce indexes. also, dates get stringified.\nexports.normalizeKey = function (key) {\n  switch (typeof key) {\n    case \'undefined\':\n      return null;\n    case \'number\':\n      if (key === Infinity || key === -Infinity || isNaN(key)) {\n        return null;\n      }\n      return key;\n    case \'object\':\n      var origKey = key;\n      if (Array.isArray(key)) {\n        var len = key.length;\n        key = new Array(len);\n        for (var i = 0; i < len; i++) {\n          key[i] = exports.normalizeKey(origKey[i]);\n        }\n      } else if (key instanceof Date) {\n        return key.toJSON();\n      } else if (key !== null) { // generic object\n        key = {};\n        for (var k in origKey) {\n          if (origKey.hasOwnProperty(k)) {\n            var val = origKey[k];\n            if (typeof val !== \'undefined\') {\n              key[k] = exports.normalizeKey(val);\n            }\n          }\n        }\n      }\n  }\n  return key;\n};\n\nfunction indexify(key) {\n  if (key !== null) {\n    switch (typeof key) {\n      case \'boolean\':\n        return key ? 1 : 0;\n      case \'number\':\n        return numToIndexableString(key);\n      case \'string\':\n        // We\'ve to be sure that key does not contain \\u0000\n        // Do order-preserving replacements:\n        // 0 -> 1, 1\n        // 1 -> 1, 2\n        // 2 -> 2, 2\n        return key\n          .replace(/\\u0002/g, \'\\u0002\\u0002\')\n          .replace(/\\u0001/g, \'\\u0001\\u0002\')\n          .replace(/\\u0000/g, \'\\u0001\\u0001\');\n      case \'object\':\n        var isArray = Array.isArray(key);\n        var arr = isArray ? key : Object.keys(key);\n        var i = -1;\n        var len = arr.length;\n        var result = \'\';\n        if (isArray) {\n          while (++i < len) {\n            result += exports.toIndexableString(arr[i]);\n          }\n        } else {\n          while (++i < len) {\n            var objKey = arr[i];\n            result += exports.toIndexableString(objKey) +\n                exports.toIndexableString(key[objKey]);\n          }\n        }\n        return result;\n    }\n  }\n  return \'\';\n}\n\n// convert the given key to a string that would be appropriate\n// for lexical sorting, e.g. within a database, where the\n// sorting is the same given by the collate() function.\nexports.toIndexableString = function (key) {\n  var zero = \'\\u0000\';\n  key = exports.normalizeKey(key);\n  return collationIndex(key) + SEP + indexify(key) + zero;\n};\n\nfunction parseNumber(str, i) {\n  var originalIdx = i;\n  var num;\n  var zero = str[i] === \'1\';\n  if (zero) {\n    num = 0;\n    i++;\n  } else {\n    var neg = str[i] === \'0\';\n    i++;\n    var numAsString = \'\';\n    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);\n    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;\n    if (neg) {\n      magnitude = -magnitude;\n    }\n    i += MAGNITUDE_DIGITS;\n    while (true) {\n      var ch = str[i];\n      if (ch === \'\\u0000\') {\n        break;\n      } else {\n        numAsString += ch;\n      }\n      i++;\n    }\n    numAsString = numAsString.split(\'.\');\n    if (numAsString.length === 1) {\n      num = parseInt(numAsString, 10);\n    } else {\n      num = parseFloat(numAsString[0] + \'.\' + numAsString[1]);\n    }\n    if (neg) {\n      num = num - 10;\n    }\n    if (magnitude !== 0) {\n      // parseFloat is more reliable than pow due to rounding errors\n      // e.g. Number.MAX_VALUE would return Infinity if we did\n      // num * Math.pow(10, magnitude);\n      num = parseFloat(num + \'e\' + magnitude);\n    }\n  }\n  return {num: num, length : i - originalIdx};\n}\n\n// move up the stack while parsing\n// this function moved outside of parseIndexableString for performance\nfunction pop(stack, metaStack) {\n  var obj = stack.pop();\n\n  if (metaStack.length) {\n    var lastMetaElement = metaStack[metaStack.length - 1];\n    if (obj === lastMetaElement.element) {\n      // popping a meta-element, e.g. an object whose value is another object\n      metaStack.pop();\n      lastMetaElement = metaStack[metaStack.length - 1];\n    }\n    var element = lastMetaElement.element;\n    var lastElementIndex = lastMetaElement.index;\n    if (Array.isArray(element)) {\n      element.push(obj);\n    } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n      var key = stack.pop();\n      element[key] = obj;\n    } else {\n      stack.push(obj); // obj with key only\n    }\n  }\n}\n\nexports.parseIndexableString = function (str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n\n  while (true) {\n    var collationIndex = str[i++];\n    if (collationIndex === \'\\u0000\') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case \'1\':\n        stack.push(null);\n        break;\n      case \'2\':\n        stack.push(str[i] === \'1\');\n        i++;\n        break;\n      case \'3\':\n        var parsedNum = parseNumber(str, i);\n        stack.push(parsedNum.num);\n        i += parsedNum.length;\n        break;\n      case \'4\':\n        var parsedStr = \'\';\n        while (true) {\n          var ch = str[i];\n          if (ch === \'\\u0000\') {\n            break;\n          }\n          parsedStr += ch;\n          i++;\n        }\n        // perform the reverse of the order-preserving replacement\n        // algorithm (see above)\n        parsedStr = parsedStr.replace(/\\u0001\\u0001/g, \'\\u0000\')\n          .replace(/\\u0001\\u0002/g, \'\\u0001\')\n          .replace(/\\u0002\\u0002/g, \'\\u0002\');\n        stack.push(parsedStr);\n        break;\n      case \'5\':\n        var arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case \'6\':\n        var objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      default:\n        throw new Error(\n          \'bad collationIndex or unexpectedly reached end of input: \' + collationIndex);\n    }\n  }\n};\n\nfunction arrayCollate(a, b) {\n  var len = Math.min(a.length, b.length);\n  for (var i = 0; i < len; i++) {\n    var sort = exports.collate(a[i], b[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n  }\n  return (a.length === b.length) ? 0 :\n    (a.length > b.length) ? 1 : -1;\n}\nfunction stringCollate(a, b) {\n  // See: https://github.com/daleharvey/pouchdb/issues/40\n  // This is incompatible with the CouchDB implementation, but its the\n  // best we can do for now\n  return (a === b) ? 0 : ((a > b) ? 1 : -1);\n}\nfunction objectCollate(a, b) {\n  var ak = Object.keys(a), bk = Object.keys(b);\n  var len = Math.min(ak.length, bk.length);\n  for (var i = 0; i < len; i++) {\n    // First sort the keys\n    var sort = exports.collate(ak[i], bk[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n    // if the keys are equal sort the values\n    sort = exports.collate(a[ak[i]], b[bk[i]]);\n    if (sort !== 0) {\n      return sort;\n    }\n\n  }\n  return (ak.length === bk.length) ? 0 :\n    (ak.length > bk.length) ? 1 : -1;\n}\n// The collation is defined by erlangs ordered terms\n// the atoms null, true, false come first, then numbers, strings,\n// arrays, then objects\n// null/undefined/NaN/Infinity/-Infinity are all considered null\nfunction collationIndex(x) {\n  var id = [\'boolean\', \'number\', \'string\', \'object\'];\n  var idx = id.indexOf(typeof x);\n  //false if -1 otherwise true, but fast!!!!1\n  if (~idx) {\n    if (x === null) {\n      return 1;\n    }\n    if (Array.isArray(x)) {\n      return 5;\n    }\n    return idx < 3 ? (idx + 2) : (idx + 3);\n  }\n  if (Array.isArray(x)) {\n    return 5;\n  }\n}\n\n// conversion:\n// x yyy zz...zz\n// x = 0 for negative, 1 for 0, 2 for positive\n// y = exponent (for negative numbers negated) moved so that it\'s >= 0\n// z = mantisse\nfunction numToIndexableString(num) {\n\n  if (num === 0) {\n    return \'1\';\n  }\n\n  // convert number to exponential format for easier and\n  // more succinct string sorting\n  var expFormat = num.toExponential().split(/e\\+?/);\n  var magnitude = parseInt(expFormat[1], 10);\n\n  var neg = num < 0;\n\n  var result = neg ? \'0\' : \'2\';\n\n  // first sort by magnitude\n  // it\'s easier if all magnitudes are positive\n  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);\n  var magString = utils.padLeft((magForComparison).toString(), \'0\', MAGNITUDE_DIGITS);\n\n  result += SEP + magString;\n\n  // then sort by the factor\n  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)\n  if (neg) { // for negative reverse ordering\n    factor = 10 - factor;\n  }\n\n  var factorStr = factor.toFixed(20);\n\n  // strip zeros from the end\n  factorStr = factorStr.replace(/\\.?0+$/, \'\');\n\n  result += SEP + factorStr;\n\n  return result;\n}\n\n},{"./utils":105}],105:[function(require,module,exports){\n\'use strict\';\n\nfunction pad(str, padWith, upToLength) {\n  var padding = \'\';\n  var targetLength = upToLength - str.length;\n  while (padding.length < targetLength) {\n    padding += padWith;\n  }\n  return padding;\n}\n\nexports.padLeft = function (str, padWith, upToLength) {\n  var padding = pad(str, padWith, upToLength);\n  return padding + str;\n};\n\nexports.padRight = function (str, padWith, upToLength) {\n  var padding = pad(str, padWith, upToLength);\n  return str + padding;\n};\n\nexports.stringLexCompare = function (a, b) {\n\n  var aLen = a.length;\n  var bLen = b.length;\n\n  var i;\n  for (i = 0; i < aLen; i++) {\n    if (i === bLen) {\n      // b is shorter substring of a\n      return 1;\n    }\n    var aChar = a.charAt(i);\n    var bChar = b.charAt(i);\n    if (aChar !== bChar) {\n      return aChar < bChar ? -1 : 1;\n    }\n  }\n\n  if (aLen < bLen) {\n    // a is shorter substring of b\n    return -1;\n  }\n\n  return 0;\n};\n\n/*\n * returns the decimal form for the given integer, i.e. writes\n * out all the digits (in base-10) instead of using scientific notation\n */\nexports.intToDecimalForm = function (int) {\n\n  var isNeg = int < 0;\n  var result = \'\';\n\n  do {\n    var remainder = isNeg ? -Math.ceil(int % 10) : Math.floor(int % 10);\n\n    result = remainder + result;\n    int = isNeg ? Math.ceil(int / 10) : Math.floor(int / 10);\n  } while (int);\n\n\n  if (isNeg && result !== \'0\') {\n    result = \'-\' + result;\n  }\n\n  return result;\n};\n},{}],106:[function(require,module,exports){\n\'use strict\';\nexports.Map = LazyMap; // TODO: use ES6 map\nexports.Set = LazySet; // TODO: use ES6 set\n// based on https://github.com/montagejs/collections\nfunction LazyMap() {\n  this.store = {};\n}\nLazyMap.prototype.mangle = function (key) {\n  if (typeof key !== "string") {\n    throw new TypeError("key must be a string but Got " + key);\n  }\n  return \'$\' + key;\n};\nLazyMap.prototype.unmangle = function (key) {\n  return key.substring(1);\n};\nLazyMap.prototype.get = function (key) {\n  var mangled = this.mangle(key);\n  if (mangled in this.store) {\n    return this.store[mangled];\n  }\n  return void 0;\n};\nLazyMap.prototype.set = function (key, value) {\n  var mangled = this.mangle(key);\n  this.store[mangled] = value;\n  return true;\n};\nLazyMap.prototype.has = function (key) {\n  var mangled = this.mangle(key);\n  return mangled in this.store;\n};\nLazyMap.prototype.delete = function (key) {\n  var mangled = this.mangle(key);\n  if (mangled in this.store) {\n    delete this.store[mangled];\n    return true;\n  }\n  return false;\n};\nLazyMap.prototype.forEach = function (cb) {\n  var keys = Object.keys(this.store);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    var value = this.store[key];\n    key = this.unmangle(key);\n    cb(value, key);\n  }\n};\n\nfunction LazySet(array) {\n  this.store = new LazyMap();\n\n  // init with an array\n  if (array && Array.isArray(array)) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      this.add(array[i]);\n    }\n  }\n}\nLazySet.prototype.add = function (key) {\n  return this.store.set(key, true);\n};\nLazySet.prototype.has = function (key) {\n  return this.store.has(key);\n};\nLazySet.prototype.delete = function (key) {\n  return this.store.delete(key);\n};\n\n},{}],107:[function(require,module,exports){\n/*jshint bitwise:false*/\n/*global unescape*/\n\n(function (factory) {\n    if (typeof exports === \'object\') {\n        // Node/CommonJS\n        module.exports = factory();\n    } else if (typeof define === \'function\' && define.amd) {\n        // AMD\n        define(factory);\n    } else {\n        // Browser globals (with support for web workers)\n        var glob;\n        try {\n            glob = window;\n        } catch (e) {\n            glob = self;\n        }\n\n        glob.SparkMD5 = factory();\n    }\n}(function (undefined) {\n\n    \'use strict\';\n\n    ////////////////////////////////////////////////////////////////////////////\n\n    /*\n     * Fastest md5 implementation around (JKM md5)\n     * Credits: Joseph Myers\n     *\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n     * @see http://jsperf.com/md5-shootout/7\n     */\n\n    /* this function is much faster,\n      so if possible we use it. Some IEs\n      are the only ones I know of that\n      need the idiotic second function,\n      generated by an if clause.  */\n    var add32 = function (a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    },\n\n    cmn = function (q, a, b, x, s, t) {\n        a = add32(add32(a, q), add32(x, t));\n        return add32((a << s) | (a >>> (32 - s)), b);\n    },\n\n    ff = function (a, b, c, d, x, s, t) {\n        return cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    },\n\n    gg = function (a, b, c, d, x, s, t) {\n        return cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    },\n\n    hh = function (a, b, c, d, x, s, t) {\n        return cmn(b ^ c ^ d, a, b, x, s, t);\n    },\n\n    ii = function (a, b, c, d, x, s, t) {\n        return cmn(c ^ (b | (~d)), a, b, x, s, t);\n    },\n\n    md5cycle = function (x, k) {\n        var a = x[0],\n            b = x[1],\n            c = x[2],\n            d = x[3];\n\n        a = ff(a, b, c, d, k[0], 7, -680876936);\n        d = ff(d, a, b, c, k[1], 12, -389564586);\n        c = ff(c, d, a, b, k[2], 17, 606105819);\n        b = ff(b, c, d, a, k[3], 22, -1044525330);\n        a = ff(a, b, c, d, k[4], 7, -176418897);\n        d = ff(d, a, b, c, k[5], 12, 1200080426);\n        c = ff(c, d, a, b, k[6], 17, -1473231341);\n        b = ff(b, c, d, a, k[7], 22, -45705983);\n        a = ff(a, b, c, d, k[8], 7, 1770035416);\n        d = ff(d, a, b, c, k[9], 12, -1958414417);\n        c = ff(c, d, a, b, k[10], 17, -42063);\n        b = ff(b, c, d, a, k[11], 22, -1990404162);\n        a = ff(a, b, c, d, k[12], 7, 1804603682);\n        d = ff(d, a, b, c, k[13], 12, -40341101);\n        c = ff(c, d, a, b, k[14], 17, -1502002290);\n        b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n        a = gg(a, b, c, d, k[1], 5, -165796510);\n        d = gg(d, a, b, c, k[6], 9, -1069501632);\n        c = gg(c, d, a, b, k[11], 14, 643717713);\n        b = gg(b, c, d, a, k[0], 20, -373897302);\n        a = gg(a, b, c, d, k[5], 5, -701558691);\n        d = gg(d, a, b, c, k[10], 9, 38016083);\n        c = gg(c, d, a, b, k[15], 14, -660478335);\n        b = gg(b, c, d, a, k[4], 20, -405537848);\n        a = gg(a, b, c, d, k[9], 5, 568446438);\n        d = gg(d, a, b, c, k[14], 9, -1019803690);\n        c = gg(c, d, a, b, k[3], 14, -187363961);\n        b = gg(b, c, d, a, k[8], 20, 1163531501);\n        a = gg(a, b, c, d, k[13], 5, -1444681467);\n        d = gg(d, a, b, c, k[2], 9, -51403784);\n        c = gg(c, d, a, b, k[7], 14, 1735328473);\n        b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n        a = hh(a, b, c, d, k[5], 4, -378558);\n        d = hh(d, a, b, c, k[8], 11, -2022574463);\n        c = hh(c, d, a, b, k[11], 16, 1839030562);\n        b = hh(b, c, d, a, k[14], 23, -35309556);\n        a = hh(a, b, c, d, k[1], 4, -1530992060);\n        d = hh(d, a, b, c, k[4], 11, 1272893353);\n        c = hh(c, d, a, b, k[7], 16, -155497632);\n        b = hh(b, c, d, a, k[10], 23, -1094730640);\n        a = hh(a, b, c, d, k[13], 4, 681279174);\n        d = hh(d, a, b, c, k[0], 11, -358537222);\n        c = hh(c, d, a, b, k[3], 16, -722521979);\n        b = hh(b, c, d, a, k[6], 23, 76029189);\n        a = hh(a, b, c, d, k[9], 4, -640364487);\n        d = hh(d, a, b, c, k[12], 11, -421815835);\n        c = hh(c, d, a, b, k[15], 16, 530742520);\n        b = hh(b, c, d, a, k[2], 23, -995338651);\n\n        a = ii(a, b, c, d, k[0], 6, -198630844);\n        d = ii(d, a, b, c, k[7], 10, 1126891415);\n        c = ii(c, d, a, b, k[14], 15, -1416354905);\n        b = ii(b, c, d, a, k[5], 21, -57434055);\n        a = ii(a, b, c, d, k[12], 6, 1700485571);\n        d = ii(d, a, b, c, k[3], 10, -1894986606);\n        c = ii(c, d, a, b, k[10], 15, -1051523);\n        b = ii(b, c, d, a, k[1], 21, -2054922799);\n        a = ii(a, b, c, d, k[8], 6, 1873313359);\n        d = ii(d, a, b, c, k[15], 10, -30611744);\n        c = ii(c, d, a, b, k[6], 15, -1560198380);\n        b = ii(b, c, d, a, k[13], 21, 1309151649);\n        a = ii(a, b, c, d, k[4], 6, -145523070);\n        d = ii(d, a, b, c, k[11], 10, -1120210379);\n        c = ii(c, d, a, b, k[2], 15, 718787259);\n        b = ii(b, c, d, a, k[9], 21, -343485551);\n\n        x[0] = add32(a, x[0]);\n        x[1] = add32(b, x[1]);\n        x[2] = add32(c, x[2]);\n        x[3] = add32(d, x[3]);\n    },\n\n    /* there needs to be support for Unicode here,\n       * unless we pretend that we can redefine the MD-5\n       * algorithm for multi-byte characters (perhaps\n       * by adding every four 16-bit characters and\n       * shortening the sum to 32 bits). Otherwise\n       * I suggest performing MD-5 as if every character\n       * was two bytes--e.g., 0040 0025 = @%--but then\n       * how will an ordinary MD-5 sum be matched?\n       * There is no way to standardize text to something\n       * like UTF-8 before transformation; speed cost is\n       * utterly prohibitive. The JavaScript standard\n       * itself needs to look at this: it should start\n       * providing access to strings as preformed UTF-8\n       * 8-bit unsigned value arrays.\n       */\n    md5blk = function (s) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    },\n\n    md5blk_array = function (a) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n    },\n\n    md51 = function (s) {\n        var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n        return state;\n    },\n\n    md51_array = function (a) {\n        var n = a.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n        // containing the last element of the parent array if the sub array specified starts\n        // beyond the length of the parent array - weird.\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n        }\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n\n        return state;\n    },\n\n    hex_chr = [\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'a\', \'b\', \'c\', \'d\', \'e\', \'f\'],\n\n    rhex = function (n) {\n        var s = \'\',\n            j;\n        for (j = 0; j < 4; j += 1) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    },\n\n    hex = function (x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n            x[i] = rhex(x[i]);\n        }\n        return x.join(\'\');\n    },\n\n    md5 = function (s) {\n        return hex(md51(s));\n    },\n\n\n\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * SparkMD5 OOP implementation.\n     *\n     * Use this class to perform an incremental md5, otherwise use the\n     * static methods instead.\n     */\n    SparkMD5 = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n\n    // In some cases the fast add32 function cannot be used..\n    if (md5(\'hello\') !== \'5d41402abc4b2a76b9719d911017c592\') {\n        add32 = function (x, y) {\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n            return (msw << 16) | (lsw & 0xFFFF);\n        };\n    }\n\n\n    /**\n     * Appends a string.\n     * A conversion will be applied if an utf8 string is detected.\n     *\n     * @param {String} str The string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.append = function (str) {\n        // converts the string to utf8 bytes if necessary\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        // then append as binary\n        this.appendBinary(str);\n\n        return this;\n    };\n\n    /**\n     * Appends a binary string.\n     *\n     * @param {String} contents The binary string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n\n        var length = this._buff.length,\n            i;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._state, md5blk(this._buff.substring(i - 64, i)));\n        }\n\n        this._buff = this._buff.substr(i - 64);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     * Use the raw parameter to obtain the raw result instead of the hex one.\n     *\n     * @param {Boolean} raw True to get the raw result, false to get the hex result\n     *\n     * @return {String|Array} The result\n     */\n    SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            i,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = !!raw ? this._state : hex(this._state);\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Finish the final calculation based on the tail.\n     *\n     * @param {Array}  tail   The tail (will be modified)\n     * @param {Number} length The length of the remaining buffer\n     */\n    SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n            tmp,\n            lo,\n            hi;\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(this._state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Do the final computation based on the tail and length\n        // Beware that the final length may not fit in 32 bits so we take care of that\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._state, tail);\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.reset = function () {\n        this._buff = "";\n        this._length = 0;\n        this._state = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other aditional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.prototype.destroy = function () {\n        delete this._state;\n        delete this._buff;\n        delete this._length;\n    };\n\n\n    /**\n     * Performs the md5 hash on a string.\n     * A conversion will be applied if utf8 string is detected.\n     *\n     * @param {String}  str The string\n     * @param {Boolean} raw True to get the raw result, false to get the hex result\n     *\n     * @return {String|Array} The result\n     */\n    SparkMD5.hash = function (str, raw) {\n        // converts the string to utf8 bytes if necessary\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        var hash = md51(str);\n\n        return !!raw ? hash : hex(hash);\n    };\n\n    /**\n     * Performs the md5 hash on a binary string.\n     *\n     * @param {String}  content The binary string\n     * @param {Boolean} raw     True to get the raw result, false to get the hex result\n     *\n     * @return {String|Array} The result\n     */\n    SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content);\n\n        return !!raw ? hash : hex(hash);\n    };\n\n    /**\n     * SparkMD5 OOP implementation for array buffers.\n     *\n     * Use this class to perform an incremental md5 ONLY for array buffers.\n     */\n    SparkMD5.ArrayBuffer = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Appends an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array to be appended\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        // TODO: we could avoid the concatenation here but the algorithm would be more complex\n        //       if you find yourself needing extra performance, please make a PR.\n        var buff = this._concatArrayBuffer(this._buff, arr),\n            length = buff.length,\n            i;\n\n        this._length += arr.byteLength;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._state, md5blk_array(buff.subarray(i - 64, i)));\n        }\n\n        // Avoids IE10 weirdness (documented above)\n        this._buff = (i - 64) < length ? buff.subarray(i - 64) : new Uint8Array(0);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     * Use the raw parameter to obtain the raw result instead of the hex one.\n     *\n     * @param {Boolean} raw True to get the raw result, false to get the hex result\n     *\n     * @return {String|Array} The result\n     */\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            i,\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = !!raw ? this._state : hex(this._state);\n\n        this.reset();\n\n        return ret;\n    };\n\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._state = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other aditional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\n    /**\n     * Concats two array buffers, returning a new one.\n     *\n     * @param  {ArrayBuffer} first  The first array buffer\n     * @param  {ArrayBuffer} second The second array buffer\n     *\n     * @return {ArrayBuffer} The new array buffer\n     */\n    SparkMD5.ArrayBuffer.prototype._concatArrayBuffer = function (first, second) {\n        var firstLength = first.length,\n            result = new Uint8Array(firstLength + second.byteLength);\n\n        result.set(first);\n        result.set(new Uint8Array(second), firstLength);\n\n        return result;\n    };\n\n    /**\n     * Performs the md5 hash on an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array buffer\n     * @param {Boolean}     raw True to get the raw result, false to get the hex result\n     *\n     * @return {String|Array} The result\n     */\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr));\n\n        return !!raw ? hash : hex(hash);\n    };\n\n    return SparkMD5;\n}));\n\n},{}],108:[function(require,module,exports){\n\'use strict\';\n\n/**\n * Stringify/parse functions that don\'t operate\n * recursively, so they avoid call stack exceeded\n * errors.\n */\nexports.stringify = function stringify(input) {\n  var queue = [];\n  queue.push({obj: input});\n\n  var res = \'\';\n  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;\n  while ((next = queue.pop())) {\n    obj = next.obj;\n    prefix = next.prefix || \'\';\n    val = next.val || \'\';\n    res += prefix;\n    if (val) {\n      res += val;\n    } else if (typeof obj !== \'object\') {\n      res += typeof obj === \'undefined\' ? null : JSON.stringify(obj);\n    } else if (obj === null) {\n      res += \'null\';\n    } else if (Array.isArray(obj)) {\n      queue.push({val: \']\'});\n      for (i = obj.length - 1; i >= 0; i--) {\n        arrayPrefix = i === 0 ? \'\' : \',\';\n        queue.push({obj: obj[i], prefix: arrayPrefix});\n      }\n      queue.push({val: \'[\'});\n    } else { // object\n      keys = [];\n      for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          keys.push(k);\n        }\n      }\n      queue.push({val: \'}\'});\n      for (i = keys.length - 1; i >= 0; i--) {\n        key = keys[i];\n        value = obj[key];\n        objPrefix = (i > 0 ? \',\' : \'\');\n        objPrefix += JSON.stringify(key) + \':\';\n        queue.push({obj: value, prefix: objPrefix});\n      }\n      queue.push({val: \'{\'});\n    }\n  }\n  return res;\n};\n\n// Convenience function for the parse function.\n// This pop function is basically copied from\n// pouchCollate.parseIndexableString\nfunction pop(obj, stack, metaStack) {\n  var lastMetaElement = metaStack[metaStack.length - 1];\n  if (obj === lastMetaElement.element) {\n    // popping a meta-element, e.g. an object whose value is another object\n    metaStack.pop();\n    lastMetaElement = metaStack[metaStack.length - 1];\n  }\n  var element = lastMetaElement.element;\n  var lastElementIndex = lastMetaElement.index;\n  if (Array.isArray(element)) {\n    element.push(obj);\n  } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n    var key = stack.pop();\n    element[key] = obj;\n  } else {\n    stack.push(obj); // obj with key only\n  }\n}\n\nexports.parse = function (str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n  var collationIndex,parsedNum,numChar;\n  var parsedString,lastCh,numConsecutiveSlashes,ch;\n  var arrayElement, objElement;\n  while (true) {\n    collationIndex = str[i++];\n    if (collationIndex === \'}\' ||\n        collationIndex === \']\' ||\n        typeof collationIndex === \'undefined\') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack.pop(), stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case \' \':\n      case \'\\t\':\n      case \'\\n\':\n      case \':\':\n      case \',\':\n        break;\n      case \'n\':\n        i += 3; // \'ull\'\n        pop(null, stack, metaStack);\n        break;\n      case \'t\':\n        i += 3; // \'rue\'\n        pop(true, stack, metaStack);\n        break;\n      case \'f\':\n        i += 4; // \'alse\'\n        pop(false, stack, metaStack);\n        break;\n      case \'0\':\n      case \'1\':\n      case \'2\':\n      case \'3\':\n      case \'4\':\n      case \'5\':\n      case \'6\':\n      case \'7\':\n      case \'8\':\n      case \'9\':\n      case \'-\':\n        parsedNum = \'\';\n        i--;\n        while (true) {\n          numChar = str[i++];\n          if (/[\\d\\.\\-e\\+]/.test(numChar)) {\n            parsedNum += numChar;\n          } else {\n            i--;\n            break;\n          }\n        }\n        pop(parseFloat(parsedNum), stack, metaStack);\n        break;\n      case \'"\':\n        parsedString = \'\';\n        lastCh = void 0;\n        numConsecutiveSlashes = 0;\n        while (true) {\n          ch = str[i++];\n          if (ch !== \'"\' || (lastCh === \'\\\\\' &&\n              numConsecutiveSlashes % 2 === 1)) {\n            parsedString += ch;\n            lastCh = ch;\n            if (lastCh === \'\\\\\') {\n              numConsecutiveSlashes++;\n            } else {\n              numConsecutiveSlashes = 0;\n            }\n          } else {\n            break;\n          }\n        }\n        pop(JSON.parse(\'"\' + parsedString + \'"\'), stack, metaStack);\n        break;\n      case \'[\':\n        arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case \'{\':\n        objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      default:\n        throw new Error(\n          \'unexpectedly reached end of input: \' + collationIndex);\n    }\n  }\n};\n\n},{}],109:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// "Software"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError(\'n must be a positive number\');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no \'error\' event listener then throw.\n  if (type === \'error\') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled \'error\' event\n      }\n      throw TypeError(\'Uncaught, unspecified "error" event.\');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError(\'listener must be a function\');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === "newListener"! Before\n  // adding it to the listeners, first emit "newListener".\n  if (this._events.newListener)\n    this.emit(\'newListener\', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don\'t need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we\'ve already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error(\'(node) warning: possible EventEmitter memory \' +\n                    \'leak detected. %d listeners added. \' +\n                    \'Use emitter.setMaxListeners() to increase limit.\',\n                    this._events[type].length);\n      if (typeof console.trace === \'function\') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError(\'listener must be a function\');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a \'removeListener\' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError(\'listener must be a function\');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit(\'removeListener\', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit(\'removeListener\', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === \'removeListener\') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners(\'removeListener\');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === \'function\';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === \'number\';\n}\n\nfunction isObject(arg) {\n  return typeof arg === \'object\' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],110:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== \'undefined\'\n    && window.setImmediate;\n    var canPost = typeof window !== \'undefined\'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener(\'message\', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === \'process-tick\') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage(\'process-tick\', \'*\');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = \'browser\';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error(\'process.binding is not supported\');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return \'/\' };\nprocess.chdir = function (dir) {\n    throw new Error(\'process.chdir is not supported\');\n};\n\n},{}]},{},[2])'],{type:"text/javascript"})))
/* jshint ignore: end */
},{}],3:[function(_dereq_,module,exports){
'use strict';

var utils = _dereq_('../shared/utils');
var clientUtils = _dereq_('./utils');
var uuid = _dereq_('./../shared/uuid');
var errors = _dereq_('../shared/errors');
var log = _dereq_('debug')('pouchdb:worker:client');
var preprocessAttachments = clientUtils.preprocessAttachments;
var stringifyArgs = clientUtils.stringifyArgs;
var adapterFun = clientUtils.adapterFun;

var worker = _dereq_('./get-worker');

// Implements the PouchDB API for dealing with PouchDB instances over WW
function WorkerPouch(opts, callback) {
  var api = this;

  if (typeof opts === 'string') {
    var slashIdx = utils.lastIndexOf(opts, '/');
    opts = {
      url: opts.substring(0, slashIdx),
      name: opts.substring(slashIdx + 1)
    };
  } else {
    opts = utils.clone(opts);
  }

  log('constructor called', opts);

  if (!opts.name) {
    var optsErrMessage = 'Error: you must provide a database name.';
    console.error(optsErrMessage);
    return callback(new Error(optsErrMessage));
  }

  function onReceiveMessage(message) {
    var messageId = message.messageId;
    var messageType = message.type;
    var content = message.content;
    var cb = api._callbacks[messageId];

    if (!cb) {
      log('duplicate message (ignoring)', messageId, messageType, content);
      return;
    }

    log('receive message', api._name, messageId, messageType, content);

    if (messageType === 'error') {
      delete api._callbacks[messageId];
      cb(content);
    } else if (messageType === 'success') {
      delete api._callbacks[messageId];
      cb(null, content);
    } else { // update
      api._changesListeners[messageId](content);
    }
  }

  function workerListener(e) {
    if (e.data.id === api._name) {
      onReceiveMessage(e.data);
    }
  }

  function sendMessage(type, args, callback) {
    var messageId = uuid();
    log('send message', api._socketId, messageId, type, args);
    api._callbacks[messageId] = callback;
    var stringArgs = stringifyArgs(args);
    worker.postMessage({
      id: api._name,
      type: type,
      messageId: messageId,
      args: stringArgs
    });
    log('message sent', api._name, messageId);
  }

  function sendRawMessage(messageId, type, args) {
    log('send message', api._socketId, messageId, type, args);
    var stringArgs = stringifyArgs(args);
    worker.postMessage({
      id: api._name,
      type: type,
      messageId: messageId,
      args: stringArgs
    });
    log('message sent', api._name, messageId);
  }

  api.type = function () {
    return 'socket';
  };

  api._id = adapterFun('id', function (callback) {
    sendMessage('id', [], callback);
  });

  api.compact = adapterFun('compact', function (opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    sendMessage('compact', [opts], callback);
  });

  api._info = function (callback) {
    sendMessage('info', [], callback);
  };

  api.get = adapterFun('get', function (id, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    sendMessage('get', [id, opts], callback);
  });

  api.remove =
    adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {
      var doc;
      if (typeof optsOrRev === 'string') {
        // id, rev, opts, callback style
        doc = {
          _id: docOrId,
          _rev: optsOrRev
        };
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
      } else {
        // doc, opts, callback style
        doc = docOrId;
        if (typeof optsOrRev === 'function') {
          callback = optsOrRev;
          opts = {};
        } else {
          callback = opts;
          opts = optsOrRev;
        }
      }
      var rev = (doc._rev || opts.rev);

      sendMessage('remove', [doc._id, rev], callback);
  });

  api.getAttachment =
    adapterFun('getAttachment', function (docId, attachmentId, opts,
                                                callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      sendMessage('getAttachment', [docId, attachmentId, opts], callback);
  });

  api.removeAttachment =
    adapterFun('removeAttachment', function (docId, attachmentId, rev,
                                                   callback) {

      sendMessage('removeAttachment', [docId, attachmentId, rev], callback);
    });

  // Add the attachment given by blob and its contentType property
  // to the document with the given id, the revision given by rev, and
  // add it to the database given by host.
  api.putAttachment =
    adapterFun('putAttachment', function (docId, attachmentId, rev, blob,
                                                type, callback) {
      if (typeof type === 'function') {
        callback = type;
        type = blob;
        blob = rev;
        rev = null;
      }
      if (typeof type === 'undefined') {
        type = blob;
        blob = rev;
        rev = null;
      }

      if (typeof blob === 'string') {
        var binary;
        try {
          binary = atob(blob);
        } catch (err) {
          // it's not base64-encoded, so throw error
          return callback(errors.error(errors.BAD_ARG,
            'Attachments need to be base64 encoded'));
        }
        blob = utils.createBlob([utils.binaryStringToArrayBuffer(binary)], {type: type});
      }

      var args = [docId, attachmentId, rev, blob, type];
      sendMessage('putAttachment', args, callback);
    });

  api.put = adapterFun('put', utils.getArguments(function (args) {
    var temp, temptype, opts;
    var doc = args.shift();
    var id = '_id' in doc;
    var callback = args.pop();
    if (typeof doc !== 'object' || Array.isArray(doc)) {
      return callback(errors.error(errors.NOT_AN_OBJECT));
    }

    doc = utils.clone(doc);

    preprocessAttachments(doc).then(function () {
      while (true) {
        temp = args.shift();
        temptype = typeof temp;
        if (temptype === "string" && !id) {
          doc._id = temp;
          id = true;
        } else if (temptype === "string" && id && !('_rev' in doc)) {
          doc._rev = temp;
        } else if (temptype === "object") {
          opts = utils.clone(temp);
        }
        if (!args.length) {
          break;
        }
      }
      opts = opts || {};

      sendMessage('put', [doc, opts], callback);
    })["catch"](callback);

  }));

  api.post = adapterFun('post', function (doc, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = utils.clone(opts);

    sendMessage('post', [doc, opts], callback);
  });

  api._bulkDocs = function (req, opts, callback) {
    sendMessage('bulkDocs', [req, opts], callback);
  };

  api._allDocs = function (opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    sendMessage('allDocs', [opts], callback);
  };

  api._changes = function (opts) {
    opts = utils.clone(opts);

    if (opts.continuous) {
      var messageId = uuid();
      api._changesListeners[messageId] = opts.onChange;
      api._callbacks[messageId] = opts.complete;
      sendRawMessage(messageId, 'liveChanges', [opts]);
      return {
        cancel: function () {
          sendRawMessage(messageId, 'cancelChanges', []);
        }
      };
    }

    // just send all the docs anyway because we need to emit change events
    // TODO: be smarter about emitting changes without building up an array
    var returnDocs = 'returnDocs' in opts ? opts.returnDocs : true;
    opts.returnDocs = true;
    sendMessage('changes', [opts], function (err, res) {
      if (err) {
        opts.complete(err);
        return callback(err);
      }
      res.results.forEach(function (change) {
        opts.onChange(change);
      });
      if (!returnDocs) {
        res.results = [];
      }
      opts.complete(null, res);
      callback(null, res);
    });
  };

  // Given a set of document/revision IDs (given by req), tets the subset of
  // those that do NOT correspond to revisions stored in the database.
  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff
  api.revsDiff = adapterFun('revsDiff', function (req, opts, callback) {
    // If no options were given, set the callback to be the second parameter
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    sendMessage('revsDiff', [req, opts], callback);
  });

  api._query = adapterFun('query', function (fun, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    var funEncoded = fun;
    if (typeof fun === 'function') {
      funEncoded = {map: fun};
    }
    sendMessage('query', [funEncoded, opts], callback);
  });

  api._viewCleanup = adapterFun('viewCleanup', function (callback) {
    sendMessage('viewCleanup', [], callback);
  });

  api._close = function (callback) {
    callback();
  };

  api.destroy = adapterFun('destroy', function (opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    sendMessage('destroy', [], function (err, res) {
      if (err) {
        api.emit('error', err);
        return callback(err);
      }
      worker.removeEventListener('message', workerListener);
      api.emit('destroyed');
      api.constructor.emit('destroyed', api._name);
      callback(null, res);
    });
  });

  api._callbacks = {};
  api._changesListeners = {};
  api._name = opts.originalName;

  worker.addEventListener('message', workerListener);

  sendMessage('createDatabase', [{
    name: api._name,
    auto_compaction: !!opts.auto_compaction
  }], function (err) {
    if (err) {
      return callback(err);
    }
    callback(null, api);
  });

}

// WorkerPouch is a valid adapter.
WorkerPouch.valid = function () {
  return true;
};

module.exports = WorkerPouch;

/* istanbul ignore next */
if (typeof window !== 'undefined' && window.PouchDB) {
  window.PouchDB.adapter('worker', module.exports);
}

},{"../shared/errors":5,"../shared/utils":7,"./../shared/uuid":8,"./get-worker":2,"./utils":4,"debug":10}],4:[function(_dereq_,module,exports){
(function (process){
'use strict';

var utils = _dereq_('../shared/utils');
var log = _dereq_('debug')('pouchdb:socket:client');
var isBrowser = typeof process === 'undefined' || process.browser;

exports.preprocessAttachments = function preprocessAttachments(doc) {
  if (!doc._attachments || !Object.keys(doc._attachments)) {
    return utils.Promise.resolve();
  }

  return utils.Promise.all(Object.keys(doc._attachments).map(function (key) {
    var attachment = doc._attachments[key];
    if (attachment.data && typeof attachment.data !== 'string') {
      if (isBrowser) {
        return new utils.Promise(function (resolve) {
          utils.readAsBinaryString(attachment.data, function (binary) {
            attachment.data = btoa(binary);
            resolve();
          });
        });
      } else {
        attachment.data = attachment.data.toString('base64');
      }
    }
  }));
};

exports.stringifyArgs = function stringifyArgs(args) {
  var funcArgs = ['filter', 'map', 'reduce'];
  var funcsToRemove = ['onChange', 'processChange', 'complete'];
  var result = [];
  args.forEach(function (arg) {
    if (typeof arg === 'object' && arg !== null && !Array.isArray(arg)) {
      funcArgs.forEach(function (funcArg) {
        if (funcArg in arg && typeof arg[funcArg] === 'function') {
          arg[funcArg] = {
            type: 'func',
            func: arg[funcArg].toString()
          };
        }
      });
      var newArg = {};
      Object.keys(arg).forEach(function (key) {
        if (funcsToRemove.indexOf(key) === -1) {
          newArg[key] = arg[key];
        }
      });
      arg = newArg;
    }
    result.push(arg);
  });
  return result;
};

exports.padInt = function padInt(i, len) {
  var res = i.toString();
  while (res.length < len) {
    res = '0' + res;
  }
  return res;
};


exports.adapterFun = function adapterFun(name, callback) {

  function logApiCall(self, name, args) {
    if (!log.enabled) {
      return;
    }
    var logArgs = [self._db_name, name];
    for (var i = 0; i < args.length - 1; i++) {
      logArgs.push(args[i]);
    }
    log.apply(null, logArgs);

    // override the callback itself to log the response
    var origCallback = args[args.length - 1];
    args[args.length - 1] = function (err, res) {
      var responseArgs = [self._db_name, name];
      responseArgs = responseArgs.concat(
        err ? ['error', err] : ['success', res]
      );
      log.apply(null, responseArgs);
      origCallback(err, res);
    };
  }


  return utils.toPromise(utils.getArguments(function (args) {
    if (this._closed) {
      return utils.Promise.reject(new Error('database is closed'));
    }
    var self = this;
    logApiCall(self, name, args);
    if (!this.taskqueue.isReady) {
      return new utils.Promise(function (fulfill, reject) {
        self.taskqueue.addTask(function (failed) {
          if (failed) {
            reject(failed);
          } else {
            fulfill(self[name].apply(self, args));
          }
        });
      });
    }
    return callback.apply(this, args);
  }));
};
}).call(this,_dereq_('_process'))
},{"../shared/utils":7,"_process":9,"debug":10}],5:[function(_dereq_,module,exports){
"use strict";

var inherits = _dereq_('inherits');
inherits(PouchError, Error);

function PouchError(opts) {
  Error.call(opts.reason);
  this.status = opts.status;
  this.name = opts.error;
  this.message = opts.reason;
  this.error = true;
}

PouchError.prototype.toString = function () {
  return JSON.stringify({
    status: this.status,
    name: this.name,
    message: this.message
  });
};

exports.UNAUTHORIZED = new PouchError({
  status: 401,
  error: 'unauthorized',
  reason: "Name or password is incorrect."
});

exports.MISSING_BULK_DOCS = new PouchError({
  status: 400,
  error: 'bad_request',
  reason: "Missing JSON list of 'docs'"
});

exports.MISSING_DOC = new PouchError({
  status: 404,
  error: 'not_found',
  reason: 'missing'
});

exports.REV_CONFLICT = new PouchError({
  status: 409,
  error: 'conflict',
  reason: 'Document update conflict'
});

exports.INVALID_ID = new PouchError({
  status: 400,
  error: 'invalid_id',
  reason: '_id field must contain a string'
});

exports.MISSING_ID = new PouchError({
  status: 412,
  error: 'missing_id',
  reason: '_id is required for puts'
});

exports.RESERVED_ID = new PouchError({
  status: 400,
  error: 'bad_request',
  reason: 'Only reserved document ids may start with underscore.'
});

exports.NOT_OPEN = new PouchError({
  status: 412,
  error: 'precondition_failed',
  reason: 'Database not open'
});

exports.UNKNOWN_ERROR = new PouchError({
  status: 500,
  error: 'unknown_error',
  reason: 'Database encountered an unknown error'
});

exports.BAD_ARG = new PouchError({
  status: 500,
  error: 'badarg',
  reason: 'Some query argument is invalid'
});

exports.INVALID_REQUEST = new PouchError({
  status: 400,
  error: 'invalid_request',
  reason: 'Request was invalid'
});

exports.QUERY_PARSE_ERROR = new PouchError({
  status: 400,
  error: 'query_parse_error',
  reason: 'Some query parameter is invalid'
});

exports.DOC_VALIDATION = new PouchError({
  status: 500,
  error: 'doc_validation',
  reason: 'Bad special document member'
});

exports.BAD_REQUEST = new PouchError({
  status: 400,
  error: 'bad_request',
  reason: 'Something wrong with the request'
});

exports.NOT_AN_OBJECT = new PouchError({
  status: 400,
  error: 'bad_request',
  reason: 'Document must be a JSON object'
});

exports.DB_MISSING = new PouchError({
  status: 404,
  error: 'not_found',
  reason: 'Database not found'
});

exports.IDB_ERROR = new PouchError({
  status: 500,
  error: 'indexed_db_went_bad',
  reason: 'unknown'
});

exports.WSQ_ERROR = new PouchError({
  status: 500,
  error: 'web_sql_went_bad',
  reason: 'unknown'
});

exports.LDB_ERROR = new PouchError({
  status: 500,
  error: 'levelDB_went_went_bad',
  reason: 'unknown'
});

exports.FORBIDDEN = new PouchError({
  status: 403,
  error: 'forbidden',
  reason: 'Forbidden by design doc validate_doc_update function'
});

exports.INVALID_REV = new PouchError({
  status: 400,
  error: 'bad_request',
  reason: 'Invalid rev format'
});

exports.FILE_EXISTS = new PouchError({
  status: 412,
  error: 'file_exists',
  reason: 'The database could not be created, the file already exists.'
});

exports.MISSING_STUB = new PouchError({
  status: 412,
  error: 'missing_stub'
});

exports.error = function (error, reason, name) {
  function CustomPouchError(reason) {
    // inherit error properties from our parent error manually
    // so as to allow proper JSON parsing.
    /* jshint ignore:start */
    for (var p in error) {
      if (typeof error[p] !== 'function') {
        this[p] = error[p];
      }
    }
    /* jshint ignore:end */
    if (name !== undefined) {
      this.name = name;
    }
    if (reason !== undefined) {
      this.reason = reason;
    }
  }
  CustomPouchError.prototype = PouchError.prototype;
  return new CustomPouchError(reason);
};

// Find one of the errors defined above based on the value
// of the specified property.
// If reason is provided prefer the error matching that reason.
// This is for differentiating between errors with the same name and status,
// eg, bad_request.
exports.getErrorTypeByProp = function (prop, value, reason) {
  var errors = exports;
  var keys = Object.keys(errors).filter(function (key) {
    var error = errors[key];
    return typeof error !== 'function' && error[prop] === value;
  });
  var key = reason && keys.filter(function (key) {
      var error = errors[key];
      return error.message === reason;
    })[0] || keys[0];
  return (key) ? errors[key] : null;
};

exports.generateErrorFromResponse = function (res) {
  var error, errName, errType, errMsg, errReason;
  var errors = exports;

  errName = (res.error === true && typeof res.name === 'string') ?
    res.name :
    res.error;
  errReason = res.reason;
  errType = errors.getErrorTypeByProp('name', errName, errReason);

  if (res.missing ||
    errReason === 'missing' ||
    errReason === 'deleted' ||
    errName === 'not_found') {
    errType = errors.MISSING_DOC;
  } else if (errName === 'doc_validation') {
    // doc validation needs special treatment since
    // res.reason depends on the validation error.
    // see utils.js
    errType = errors.DOC_VALIDATION;
    errMsg = errReason;
  } else if (errName === 'bad_request' && errType.message !== errReason) {
    // if bad_request error already found based on reason don't override.

    // attachment errors.
    if (errReason.indexOf('unknown stub attachment') === 0) {
      errType = errors.MISSING_STUB;
      errMsg = errReason;
    } else {
      errType = errors.BAD_REQUEST;
    }
  }

  // fallback to error by statys or unknown error.
  if (!errType) {
    errType = errors.getErrorTypeByProp('status', res.status, errReason) ||
    errors.UNKNOWN_ERROR;
  }

  error = errors.error(errType, errReason, errName);

  // Keep custom message.
  if (errMsg) {
    error.message = errMsg;
  }

  // Keep helpful response data in our error messages.
  if (res.id) {
    error.id = res.id;
  }
  if (res.status) {
    error.status = res.status;
  }
  if (res.statusText) {
    error.name = res.statusText;
  }
  if (res.missing) {
    error.missing = res.missing;
  }

  return error;
};

},{"inherits":13}],6:[function(_dereq_,module,exports){
'use strict';

function isBinaryObject(object) {
  return object instanceof ArrayBuffer ||
    (typeof Blob !== 'undefined' && object instanceof Blob);
}

function cloneArrayBuffer(buff) {
  if (typeof buff.slice === 'function') {
    return buff.slice(0);
  }
  // IE10-11 slice() polyfill
  var target = new ArrayBuffer(buff.byteLength);
  var targetArray = new Uint8Array(target);
  var sourceArray = new Uint8Array(buff);
  targetArray.set(sourceArray);
  return target;
}

function cloneBinaryObject(object) {
  if (object instanceof ArrayBuffer) {
    return cloneArrayBuffer(object);
  }
  // Blob
  return object.slice(0, object.size, object.type);
}

module.exports = function clone(object) {
  var newObject;
  var i;
  var len;

  if (!object || typeof object !== 'object') {
    return object;
  }

  if (Array.isArray(object)) {
    newObject = [];
    for (i = 0, len = object.length; i < len; i++) {
      newObject[i] = clone(object[i]);
    }
    return newObject;
  }

  // special case: to avoid inconsistencies between IndexedDB
  // and other backends, we automatically stringify Dates
  if (object instanceof Date) {
    return object.toISOString();
  }

  if (isBinaryObject(object)) {
    return cloneBinaryObject(object);
  }

  newObject = {};
  for (i in object) {
    if (Object.prototype.hasOwnProperty.call(object, i)) {
      var value = clone(object[i]);
      if (typeof value !== 'undefined') {
        newObject[i] = value;
      }
    }
  }
  return newObject;
};

},{}],7:[function(_dereq_,module,exports){
(function (process){
'use strict';

var Promise = _dereq_('pouchdb/extras/promise');

exports.lastIndexOf = function lastIndexOf(str, char) {
  for (var i = str.length - 1; i >= 0; i--) {
    if (str.charAt(i) === char) {
      return i;
    }
  }
  return -1;
};

// TODO: move to pouchdb/extras
exports.clone = _dereq_('./pouchdb-clone');

/* istanbul ignore next */
exports.once = function once(fun) {
  var called = false;
  return exports.getArguments(function (args) {
    if (called) {
      console.trace();
      throw new Error('once called  more than once');
    } else {
      called = true;
      fun.apply(this, args);
    }
  });
};
/* istanbul ignore next */
exports.getArguments = function getArguments(fun) {
  return function () {
    var len = arguments.length;
    var args = new Array(len);
    var i = -1;
    while (++i < len) {
      args[i] = arguments[i];
    }
    return fun.call(this, args);
  };
};
/* istanbul ignore next */
exports.toPromise = function toPromise(func) {
  //create the function we will be returning
  return exports.getArguments(function (args) {
    var self = this;
    var tempCB = (typeof args[args.length - 1] === 'function') ? args.pop() : false;
    // if the last argument is a function, assume its a callback
    var usedCB;
    if (tempCB) {
      // if it was a callback, create a new callback which calls it,
      // but do so async so we don't trap any errors
      usedCB = function (err, resp) {
        process.nextTick(function () {
          tempCB(err, resp);
        });
      };
    }
    var promise = new Promise(function (fulfill, reject) {
      try {
        var callback = exports.once(function (err, mesg) {
          if (err) {
            reject(err);
          } else {
            fulfill(mesg);
          }
        });
        // create a callback for this invocation
        // apply the function in the orig context
        args.push(callback);
        func.apply(self, args);
      } catch (e) {
        reject(e);
      }
    });
    // if there is a callback, call it back
    if (usedCB) {
      promise.then(function (result) {
        usedCB(null, result);
      }, usedCB);
    }
    promise.cancel = function () {
      return this;
    };
    return promise;
  });
};

exports.inherits = _dereq_('inherits');
exports.Promise = Promise;

var binUtil = _dereq_('pouchdb-binary-util');

exports.createBlob = binUtil.createBlob;
exports.readAsArrayBuffer = binUtil.readAsArrayBuffer;
exports.readAsBinaryString = binUtil.readAsBinaryString;
exports.binaryStringToArrayBuffer = binUtil.binaryStringToArrayBuffer;
exports.arrayBufferToBinaryString = binUtil.arrayBufferToBinaryString;
}).call(this,_dereq_('_process'))
},{"./pouchdb-clone":6,"_process":9,"inherits":13,"pouchdb-binary-util":14,"pouchdb/extras/promise":15}],8:[function(_dereq_,module,exports){
"use strict";

// BEGIN Math.uuid.js

/*!
 Math.uuid.js (v1.4)
 http://www.broofa.com
 mailto:robert@broofa.com

 Copyright (c) 2010 Robert Kieffer
 Dual licensed under the MIT and GPL licenses.
 */

/*
 * Generate a random uuid.
 *
 * USAGE: Math.uuid(length, radix)
 *   length - the desired number of characters
 *   radix  - the number of allowable values for each character.
 *
 * EXAMPLES:
 *   // No arguments  - returns RFC4122, version 4 ID
 *   >>> Math.uuid()
 *   "92329D39-6F5C-4520-ABFC-AAB64544E172"
 *
 *   // One argument - returns ID of the specified length
 *   >>> Math.uuid(15)     // 15 character ID (default base=62)
 *   "VcydxgltxrVZSTV"
 *
 *   // Two arguments - returns ID of the specified length, and radix. 
 *   // (Radix must be <= 62)
 *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)
 *   "01001010"
 *   >>> Math.uuid(8, 10) // 8 character ID (base=10)
 *   "47473046"
 *   >>> Math.uuid(8, 16) // 8 character ID (base=16)
 *   "098F4D35"
 */
var chars = (
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
'abcdefghijklmnopqrstuvwxyz'
).split('');
function getValue(radix) {
  return 0 | Math.random() * radix;
}
function uuid(len, radix) {
  radix = radix || chars.length;
  var out = '';
  var i = -1;

  if (len) {
    // Compact form
    while (++i < len) {
      out += chars[getValue(radix)];
    }
    return out;
  }
  // rfc4122, version 4 form
  // Fill in random data.  At i==19 set the high bits of clock sequence as
  // per rfc4122, sec. 4.1.5
  while (++i < 36) {
    switch (i) {
      case 8:
      case 13:
      case 18:
      case 23:
        out += '-';
        break;
      case 19:
        out += chars[(getValue(16) & 0x3) | 0x8];
        break;
      default:
        out += chars[getValue(16)];
    }
  }

  return out;
}



module.exports = uuid;


},{}],9:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],10:[function(_dereq_,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = _dereq_('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

},{"./debug":11}],11:[function(_dereq_,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = _dereq_('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":12}],12:[function(_dereq_,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options["long"]
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],13:[function(_dereq_,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],14:[function(_dereq_,module,exports){
(function (global){
"use strict";

//Abstracts constructing a Blob object, so it also works in older
//browsers that don't support the native Blob constructor. (i.e.
//old QtWebKit versions, at least).
function createBlob(parts, properties) {
  parts = parts || [];
  properties = properties || {};
  try {
    return new Blob(parts, properties);
  } catch (e) {
    if (e.name !== "TypeError") {
      throw e;
    }
    var BlobBuilder = global.BlobBuilder ||
                      global.MSBlobBuilder ||
                      global.MozBlobBuilder ||
                      global.WebKitBlobBuilder;
    var builder = new BlobBuilder();
    for (var i = 0; i < parts.length; i += 1) {
      builder.append(parts[i]);
    }
    return builder.getBlob(properties.type);
  }
}

//Can't find original post, but this is close
//http://stackoverflow.com/questions/6965107/ (continues on next line)
//converting-between-strings-and-arraybuffers
function arrayBufferToBinaryString(buffer) {
  var binary = "";
  var bytes = new Uint8Array(buffer);
  var length = bytes.byteLength;
  for (var i = 0; i < length; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return binary;
}

// This used to be called "fixBinary", which wasn't a very evocative name
// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function binaryStringToArrayBuffer(bin) {
  var length = bin.length;
  var buf = new ArrayBuffer(length);
  var arr = new Uint8Array(buf);
  for (var i = 0; i < length; i++) {
    arr[i] = bin.charCodeAt(i);
  }
  return buf;
}

// shim for browsers that don't support it
function readAsBinaryString(blob, callback) {
  var reader = new FileReader();
  var hasBinaryString = typeof reader.readAsBinaryString === 'function';
  reader.onloadend = function (e) {
    var result = e.target.result || '';
    if (hasBinaryString) {
      return callback(result);
    }
    callback(arrayBufferToBinaryString(result));
  };
  if (hasBinaryString) {
    reader.readAsBinaryString(blob);
  } else {
    reader.readAsArrayBuffer(blob);
  }
}

// simplified API. universal browser support is assumed
function readAsArrayBuffer(blob, callback) {
  var reader = new FileReader();
  reader.onloadend = function (e) {
    var result = e.target.result || new ArrayBuffer(0);
    callback(result);
  };
  reader.readAsArrayBuffer(blob);
}

module.exports = {
  createBlob: createBlob,
  readAsArrayBuffer: readAsArrayBuffer,
  readAsBinaryString: readAsBinaryString,
  binaryStringToArrayBuffer: binaryStringToArrayBuffer,
  arrayBufferToBinaryString: arrayBufferToBinaryString
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],15:[function(_dereq_,module,exports){
'use strict';

// allow external plugins to require('pouchdb/extras/promise')
module.exports = _dereq_('../lib/deps/promise');
},{"../lib/deps/promise":16}],16:[function(_dereq_,module,exports){
'use strict';
/* istanbul ignore next */
module.exports = typeof Promise === 'function' ? Promise : _dereq_('lie');

},{"lie":17}],17:[function(_dereq_,module,exports){
'use strict';
var immediate = _dereq_('immediate');

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];
var UNHANDLED;

module.exports = exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && typeof obj === 'object' && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

exports.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

exports.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

exports.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

exports.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}

},{"immediate":18}],18:[function(_dereq_,module,exports){
(function (global){
'use strict';
var Mutation = global.MutationObserver || global.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = global.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      global.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1]);
